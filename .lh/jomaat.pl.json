{
    "sourceFile": "jomaat.pl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1752656952702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752656959553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,310 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+% حجم الشبكة\n+grid(3).\n+\n+% متطلبات الصفوف (عدد خلايا السفن في كل صف)\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+% متطلبات الأعمدة (عدد خلايا السفن في كل عمود)\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+% متطلبات السفن (الطول، العدد)\n+ship(2, 1).\n+\n+% ===============================================\n+% حالة الشبكة الأولية\n+% ===============================================\n+\n+% cell(الصف, العمود, النوع, الشكل, الاتجاه)\n+cell(1, 1, 2, 1, 1).  % سفينة، منحني، أعلى\n+cell(1, 2, 2, 1, 1).  % سفينة، منحني، أعلى\n+cell(1, 3, 1, 4, 0).  % بحر\n+cell(2, 1, 1, 4, 0).  % بحر\n+cell(2, 2, 1, 4, 0).  % بحر\n+cell(2, 3, 1, 4, 0).  % بحر\n+cell(3, 1, 1, 4, 0).  % بحر\n+cell(3, 2, 1, 4, 0).  % بحر\n+cell(3, 3, 1, 4, 0).  % بحر\n+\n+% ===============================================\n+% خوارزميات البحث عن السفن\n+% ===============================================\n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+% البحث عن جميع السفن في الشبكة\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+% بناء السفينة المتصلة\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+% ===============================================\n+% تحديث أشكال السفن\n+% ===============================================\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          % تحديث الرأس\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n+          % تحديث الذيل\n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n+          % تحديث الوسط\n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  % مربع للوسط\n+            )\n+          )\n+        )\n+    )).\n+\n+% ===============================================\n+% قواعد التحقق من صحة الحل\n+% ===============================================\n+\n+% التحقق من أعداد السفن في الصفوف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+% التحقق من أعداد السفن في الأعمدة\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752656965320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+% ===============================================\n+% حالة الشبكة الأولية\n+% ===============================================\n+\n+% cell(الصف, العمود, النوع, الشكل, الاتجاه)\n+cell(1, 1, 2, 1, 1).  % سفينة، منحني، أعلى\n+cell(1, 2, 2, 1, 1).  % سفينة، منحني، أعلى\n+cell(1, 3, 1, 4, 0).  % بحر\n+cell(2, 1, 1, 4, 0).  % بحر\n+cell(2, 2, 1, 4, 0).  % بحر\n+cell(2, 3, 1, 4, 0).  % بحر\n+cell(3, 1, 1, 4, 0).  % بحر\n+cell(3, 2, 1, 4, 0).  % بحر\n+cell(3, 3, 1, 4, 0).  % بحر\n+\n+% ===============================================\n+% خوارزميات البحث عن السفن\n+% ===============================================\n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+% البحث عن جميع السفن في الشبكة\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+% بناء السفينة المتصلة\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+% ===============================================\n+% تحديث أشكال السفن\n+% ===============================================\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          % تحديث الرأس\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n+          % تحديث الذيل\n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n+          % تحديث الوسط\n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  % مربع للوسط\n+            )\n+          )\n+        )\n+    )).\n+\n+% ===============================================\n+% قواعد التحقق من صحة الحل\n+% ===============================================\n+\n+% التحقق من أعداد السفن في الصفوف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+% التحقق من أعداد السفن في الأعمدة\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752656971924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,325 +35,12 @@\n col(3, 0).\n \n ship(2, 1).\n \n-% ===============================================\n-% حالة الشبكة الأولية\n-% ===============================================\n \n-% cell(الصف, العمود, النوع, الشكل, الاتجاه)\n-cell(1, 1, 2, 1, 1).  % سفينة، منحني، أعلى\n-cell(1, 2, 2, 1, 1).  % سفينة، منحني، أعلى\n-cell(1, 3, 1, 4, 0).  % بحر\n-cell(2, 1, 1, 4, 0).  % بحر\n-cell(2, 2, 1, 4, 0).  % بحر\n-cell(2, 3, 1, 4, 0).  % بحر\n-cell(3, 1, 1, 4, 0).  % بحر\n-cell(3, 2, 1, 4, 0).  % بحر\n-cell(3, 3, 1, 4, 0).  % بحر\n \n-% ===============================================\n-% خوارزميات البحث عن السفن\n-% ===============================================\n-\n-neighbor_offsets([\n-    (-1, 0), (1, 0), (0, -1), (0, 1)\n-]).\n-\n-% البحث عن جميع السفن في الشبكة\n-find_all_ships(Ships) :-\n-    grid(_),\n-    findall((R,C), cell(R,C,2,_,_), ShipCells),\n-    find_connected_ships(ShipCells, [], Ships).\n-\n-find_connected_ships([], _, []).\n-find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n-    \\+ member(Cell, Visited),\n-    build_connected_ship(Cell, [Cell], Ship),\n-    append(Visited, Ship, NewVisited),\n-    subtract(Rest, Ship, NewRest),\n-    find_connected_ships(NewRest, NewVisited, Ships).\n-find_connected_ships([Cell|Rest], Visited, Ships) :-\n-    member(Cell, Visited),\n-    find_connected_ships(Rest, Visited, Ships).\n-\n-% بناء السفينة المتصلة\n-build_connected_ship(Cell, Visited, Ship) :-\n-    find_all_neighbors(Cell, Neighbors),\n-    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n-\n-find_all_neighbors((R,C), Neighbors) :-\n-    neighbor_offsets(Offsets),\n-    findall((NR, NC),\n-        ( member((DR,DC), Offsets),\n-          NR is R + DR, NC is C + DC,\n-          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n-          cell(NR, NC, 2, _, _)\n-        ),\n-        Neighbors\n-    ).\n-\n-extend_ship_with_neighbors([], Ship, Ship).\n-extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n-    ( member(Neighbor, Visited) ->\n-        extend_ship_with_neighbors(Rest, Visited, Ship)\n-    ;   append(Visited, [Neighbor], NewVisited),\n-        build_connected_ship(Neighbor, NewVisited, TempShip),\n-        extend_ship_with_neighbors(Rest, TempShip, Ship)\n-    ).\n-\n-% ===============================================\n-% تحديث أشكال السفن\n-% ===============================================\n-\n-update_ship_shapes :-\n-    find_all_ships(Ships),\n-    forall(member(Ship, Ships), (\n-        length(Ship, Len),\n-        ( Len =:= 1 ->\n-            Ship = [(R,C)],\n-            cell(R,C,2,_,D),\n-            retract(cell(R,C,2,_,D)),\n-            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n-        ; \n-          Ship = [(R1,C1)|Rest],\n-          last(Rest, (RLast, CLast)),\n-          % تحديث الرأس\n-          cell(R1,C1,2,_,D1),\n-          retract(cell(R1,C1,2,_,D1)),\n-          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n-          % تحديث الذيل\n-          cell(RLast, CLast, 2, _, DLast),\n-          retract(cell(RLast, CLast, 2, _, DLast)),\n-          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n-          % تحديث الوسط\n-          forall(\n-            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n-            (\n-                cell(R,C,2,_,D),\n-                retract(cell(R,C,2,_,D)),\n-                assert(cell(R,C,2,2,D))  % مربع للوسط\n-            )\n-          )\n-        )\n-    )).\n-\n-% ===============================================\n-% قواعد التحقق من صحة الحل\n-% ===============================================\n-\n-% التحقق من أعداد السفن في الصفوف\n-validate_row_counts :-\n-    grid(MaxRows),\n-    forall(between(1, MaxRows, R), (\n-        row(R, Expected),\n-        count_ships_in_row(R, Count),\n-        Expected =:= Count\n-    )).\n-\n-% التحقق من أعداد السفن في الأعمدة\n-validate_col_counts :-\n-    grid(MaxCols),\n-    forall(between(1, MaxCols, C), (\n-        col(C, Expected),\n-        count_ships_in_col(C, Count),\n-        Expected =:= Count\n-    )).\n-\n-% عد السفن في صف معين\n-count_ships_in_row(R, Count) :-\n-    grid(MaxCols),\n-    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n-    length(L, Count).\n-\n-% عد السفن في عمود معين\n-count_ships_in_col(C, Count) :-\n-    grid(MaxRows),\n-    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n-    length(L, Count).\n-\n-% التحقق من عدم تلامس السفن جانبياً\n-validate_no_side_touching :-\n-    find_all_ships(Ships),\n-    \\+ (\n-        member(Ship1, Ships),\n-        member(Ship2, Ships),\n-        Ship1 \\= Ship2,\n-        ships_side_touching(Ship1, Ship2)\n-    ).\n-\n-ships_side_touching(Ship1, Ship2) :-\n-    member((R1,C1), Ship1),\n-    member((R2,C2), Ship2),\n-    (\n-        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n-        (C1 =:= C2, abs(R1 - R2) =:= 1)\n-    ).\n-\n-% التحقق من عدم تلامس السفن قطرياً\n-validate_no_diagonal_touching :-\n-    find_all_ships(Ships),\n-    \\+ (\n-        member(Ship1, Ships),\n-        member(Ship2, Ships),\n-        Ship1 \\= Ship2,\n-        ships_diagonal_touching(Ship1, Ship2)\n-    ).\n-\n-ships_diagonal_touching(Ship1, Ship2) :-\n-    member((R1,C1), Ship1),\n-    member((R2,C2), Ship2),\n-    abs(R1 - R2) =:= 1,\n-    abs(C1 - C2) =:= 1.\n-\n-% التحقق من أشكال السفن\n-validate_ship_shapes :-\n-    find_all_ships(Ships),\n-    forall(member(Ship, Ships), (\n-        valid_ship_shape(Ship),\n-        valid_ship_shape_pattern(Ship)\n-    )).\n-\n-valid_ship_shape(Ship) :-\n-    maplist(arg(1), Ship, Rows),\n-    maplist(arg(2), Ship, Cols),\n-    ( all_equal(Rows) -> consecutive(Cols)\n-    ; all_equal(Cols) -> consecutive(Rows)\n-    ).\n-\n-all_equal([_]).\n-all_equal([X,Y|Rest]) :-\n-    X =:= Y,\n-    all_equal([Y|Rest]).\n-\n-consecutive(List) :-\n-    sort(List, Sorted),\n-    Sorted = [Min|_],\n-    last(Sorted, Max),\n-    length(Sorted, Len),\n-    Max - Min + 1 =:= Len.\n-\n-valid_ship_shape_pattern(Ship) :-\n-    length(Ship, Len),\n-    ( Len =:= 1 -> \n-        Ship = [(R,C)],\n-        cell(R,C,2,3,_)  % دائرة\n-    ; Len =:= 2 ->\n-        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n-    ; Len > 2 ->\n-        Ship = [(R1,C1)|Rest],\n-        last(Rest, (RLast, CLast)),\n-        cell(R1,C1,2,1,_),  % منحني للرأس\n-        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n-        forall(\n-            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n-            cell(R,C,2,2,_)  % مربع للوسط\n-        )\n-    ).\n-\n-% التحقق من أعداد السفن حسب الطول\n-validate_ship_counts :-\n-    find_all_ships(Ships),\n-    group_ships_by_length(Ships, Grouped),\n-    forall(ship(Len, Count), (\n-        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n-    )).\n-\n-group_ships_by_length(Ships, Grouped) :-\n-    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n-    sort(Lengths, Unique),\n-    findall(Len-Count, (\n-        member(Len, Unique),\n-        include(=(Len), Lengths, Matches),\n-        length(Matches, Count)\n-    ), Grouped).\n-\n-% ===============================================\n-% التحقق الشامل من صحة الحل\n-% ===============================================\n-\n-validate_complete_solution(Result) :-\n-    check_validation_rule_all(Errors),\n-    ( Errors == [] ->\n-        Result = valid(true, \"الحل صحيح\", [])\n-    ; Result = valid(false, \"الحل خاطئ\", Errors)\n-    ).\n-\n-check_validation_rule_all(Errors) :-\n-    findall(Error,\n-        (\n-          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n-          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n-          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n-          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n-          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n-          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n-        ),\n-        Errors).\n-\n-% الحصول على معلومات خلية\n-get_cell_info(R, C, Type, Shape, Direction) :-\n-    cell(R, C, Type, Shape, Direction).\n-\n-% الحصول على جميع السفن مع أطوالها\n-get_ships_with_lengths(ShipsWithLengths) :-\n-    find_all_ships(Ships),\n-    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n-\n-% التحقق من صحة موقع معين\n-is_valid_position(R, C) :-\n-    grid(Size),\n-    R >= 1, R =< Size,\n-    C >= 1, C =< Size.\n-:- set_prolog_flag(encoding, utf8).\n-:- encoding(utf8).\n-:- discontiguous grid_api/1.\n-:- discontiguous status_api/1.\n-:- dynamic cell/5.\n-:- dynamic grid/1.\n-:- dynamic row/2.\n-:- dynamic col/2.\n-:- dynamic ship/2.\n-\n-shape(0, unknown).\n-shape(1, curve).\n-shape(2, square).\n-shape(3, circle).\n-shape(4, sea).\n-\n-direction(0, dontCare).\n-direction(1, up).\n-direction(2, down).\n-direction(3, left).\n-direction(4, right).\n-\n-type(1, sea).\n-type(2, ship).\n-type(3, empty).\n-\n-% حجم الشبكة\n-grid(3).\n-\n-% متطلبات الصفوف (عدد خلايا السفن في كل صف)\n-row(1, 2).\n-row(2, 0).\n-row(3, 0).\n-\n-% متطلبات الأعمدة (عدد خلايا السفن في كل عمود)\n-col(1, 1).\n-col(2, 1).\n-col(3, 0).\n-\n-% متطلبات السفن (الطول، العدد)\n-ship(2, 1).\n-\n-% ===============================================\n-% حالة الشبكة الأولية\n-% ===============================================\n-\n-% cell(الصف, العمود, النوع, الشكل, الاتجاه)\n-cell(1, 1, 2, 1, 1).  % سفينة، منحني، أعلى\n-cell(1, 2, 2, 1, 1).  % سفينة، منحني، أعلى\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n cell(1, 3, 1, 4, 0).  % بحر\n cell(2, 1, 1, 4, 0).  % بحر\n cell(2, 2, 1, 4, 0).  % بحر\n cell(2, 3, 1, 4, 0).  % بحر\n@@ -612,325 +299,5 @@\n % التحقق من صحة موقع معين\n is_valid_position(R, C) :-\n     grid(Size),\n     R >= 1, R =< Size,\n-    C >= 1, C =< Size.\n-\n-\n-:- set_prolog_flag(encoding, utf8).\n-:- encoding(utf8).\n-:- discontiguous grid_api/1.\n-:- discontiguous status_api/1.\n-:- dynamic cell/5.\n-:- dynamic grid/1.\n-:- dynamic row/2.\n-:- dynamic col/2.\n-:- dynamic ship/2.\n-\n-% ===============================================\n-% تعريف الأشكال والاتجاهات والأنواع\n-% ===============================================\n-\n-shape(0, unknown).\n-shape(1, curve).\n-shape(2, square).\n-shape(3, circle).\n-shape(4, sea).\n-\n-direction(0, dontCare).\n-direction(1, up).\n-direction(2, down).\n-direction(3, left).\n-direction(4, right).\n-\n-type(1, sea).\n-type(2, ship).\n-type(3, empty).\n-\n-% ===============================================\n-% بيانات اللعبة الأساسية\n-% ===============================================\n-\n-% حجم الشبكة\n-grid(3).\n-\n-% متطلبات الصفوف (عدد خلايا السفن في كل صف)\n-row(1, 2).\n-row(2, 0).\n-row(3, 0).\n-\n-% متطلبات الأعمدة (عدد خلايا السفن في كل عمود)\n-col(1, 1).\n-col(2, 1).\n-col(3, 0).\n-\n-% متطلبات السفن (الطول، العدد)\n-ship(2, 1).\n-\n-% ===============================================\n-% حالة الشبكة الأولية\n-% ===============================================\n-\n-% cell(الصف, العمود, النوع, الشكل, الاتجاه)\n-cell(1, 1, 2, 1, 1).  % سفينة، منحني، أعلى\n-cell(1, 2, 2, 1, 1).  % سفينة، منحني، أعلى\n-cell(1, 3, 1, 4, 0).  % بحر\n-cell(2, 1, 1, 4, 0).  % بحر\n-cell(2, 2, 1, 4, 0).  % بحر\n-cell(2, 3, 1, 4, 0).  % بحر\n-cell(3, 1, 1, 4, 0).  % بحر\n-cell(3, 2, 1, 4, 0).  % بحر\n-cell(3, 3, 1, 4, 0).  % بحر\n-\n-% ===============================================\n-% خوارزميات البحث عن السفن\n-% ===============================================\n-\n-neighbor_offsets([\n-    (-1, 0), (1, 0), (0, -1), (0, 1)\n-]).\n-\n-% البحث عن جميع السفن في الشبكة\n-find_all_ships(Ships) :-\n-    grid(_),\n-    findall((R,C), cell(R,C,2,_,_), ShipCells),\n-    find_connected_ships(ShipCells, [], Ships).\n-\n-find_connected_ships([], _, []).\n-find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n-    \\+ member(Cell, Visited),\n-    build_connected_ship(Cell, [Cell], Ship),\n-    append(Visited, Ship, NewVisited),\n-    subtract(Rest, Ship, NewRest),\n-    find_connected_ships(NewRest, NewVisited, Ships).\n-find_connected_ships([Cell|Rest], Visited, Ships) :-\n-    member(Cell, Visited),\n-    find_connected_ships(Rest, Visited, Ships).\n-\n-% بناء السفينة المتصلة\n-build_connected_ship(Cell, Visited, Ship) :-\n-    find_all_neighbors(Cell, Neighbors),\n-    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n-\n-find_all_neighbors((R,C), Neighbors) :-\n-    neighbor_offsets(Offsets),\n-    findall((NR, NC),\n-        ( member((DR,DC), Offsets),\n-          NR is R + DR, NC is C + DC,\n-          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n-          cell(NR, NC, 2, _, _)\n-        ),\n-        Neighbors\n-    ).\n-\n-extend_ship_with_neighbors([], Ship, Ship).\n-extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n-    ( member(Neighbor, Visited) ->\n-        extend_ship_with_neighbors(Rest, Visited, Ship)\n-    ;   append(Visited, [Neighbor], NewVisited),\n-        build_connected_ship(Neighbor, NewVisited, TempShip),\n-        extend_ship_with_neighbors(Rest, TempShip, Ship)\n-    ).\n-\n-% ===============================================\n-% تحديث أشكال السفن\n-% ===============================================\n-\n-update_ship_shapes :-\n-    find_all_ships(Ships),\n-    forall(member(Ship, Ships), (\n-        length(Ship, Len),\n-        ( Len =:= 1 ->\n-            Ship = [(R,C)],\n-            cell(R,C,2,_,D),\n-            retract(cell(R,C,2,_,D)),\n-            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n-        ; \n-          Ship = [(R1,C1)|Rest],\n-          last(Rest, (RLast, CLast)),\n-          % تحديث الرأس\n-          cell(R1,C1,2,_,D1),\n-          retract(cell(R1,C1,2,_,D1)),\n-          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n-          % تحديث الذيل\n-          cell(RLast, CLast, 2, _, DLast),\n-          retract(cell(RLast, CLast, 2, _, DLast)),\n-          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n-          % تحديث الوسط\n-          forall(\n-            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n-            (\n-                cell(R,C,2,_,D),\n-                retract(cell(R,C,2,_,D)),\n-                assert(cell(R,C,2,2,D))  % مربع للوسط\n-            )\n-          )\n-        )\n-    )).\n-\n-% ===============================================\n-% قواعد التحقق من صحة الحل\n-% ===============================================\n-\n-% التحقق من أعداد السفن في الصفوف\n-validate_row_counts :-\n-    grid(MaxRows),\n-    forall(between(1, MaxRows, R), (\n-        row(R, Expected),\n-        count_ships_in_row(R, Count),\n-        Expected =:= Count\n-    )).\n-\n-% التحقق من أعداد السفن في الأعمدة\n-validate_col_counts :-\n-    grid(MaxCols),\n-    forall(between(1, MaxCols, C), (\n-        col(C, Expected),\n-        count_ships_in_col(C, Count),\n-        Expected =:= Count\n-    )).\n-\n-% عد السفن في صف معين\n-count_ships_in_row(R, Count) :-\n-    grid(MaxCols),\n-    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n-    length(L, Count).\n-\n-% عد السفن في عمود معين\n-count_ships_in_col(C, Count) :-\n-    grid(MaxRows),\n-    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n-    length(L, Count).\n-\n-% التحقق من عدم تلامس السفن جانبياً\n-validate_no_side_touching :-\n-    find_all_ships(Ships),\n-    \\+ (\n-        member(Ship1, Ships),\n-        member(Ship2, Ships),\n-        Ship1 \\= Ship2,\n-        ships_side_touching(Ship1, Ship2)\n-    ).\n-\n-ships_side_touching(Ship1, Ship2) :-\n-    member((R1,C1), Ship1),\n-    member((R2,C2), Ship2),\n-    (\n-        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n-        (C1 =:= C2, abs(R1 - R2) =:= 1)\n-    ).\n-\n-% التحقق من عدم تلامس السفن قطرياً\n-validate_no_diagonal_touching :-\n-    find_all_ships(Ships),\n-    \\+ (\n-        member(Ship1, Ships),\n-        member(Ship2, Ships),\n-        Ship1 \\= Ship2,\n-        ships_diagonal_touching(Ship1, Ship2)\n-    ).\n-\n-ships_diagonal_touching(Ship1, Ship2) :-\n-    member((R1,C1), Ship1),\n-    member((R2,C2), Ship2),\n-    abs(R1 - R2) =:= 1,\n-    abs(C1 - C2) =:= 1.\n-\n-% التحقق من أشكال السفن\n-validate_ship_shapes :-\n-    find_all_ships(Ships),\n-    forall(member(Ship, Ships), (\n-        valid_ship_shape(Ship),\n-        valid_ship_shape_pattern(Ship)\n-    )).\n-\n-valid_ship_shape(Ship) :-\n-    maplist(arg(1), Ship, Rows),\n-    maplist(arg(2), Ship, Cols),\n-    ( all_equal(Rows) -> consecutive(Cols)\n-    ; all_equal(Cols) -> consecutive(Rows)\n-    ).\n-\n-all_equal([_]).\n-all_equal([X,Y|Rest]) :-\n-    X =:= Y,\n-    all_equal([Y|Rest]).\n-\n-consecutive(List) :-\n-    sort(List, Sorted),\n-    Sorted = [Min|_],\n-    last(Sorted, Max),\n-    length(Sorted, Len),\n-    Max - Min + 1 =:= Len.\n-\n-valid_ship_shape_pattern(Ship) :-\n-    length(Ship, Len),\n-    ( Len =:= 1 -> \n-        Ship = [(R,C)],\n-        cell(R,C,2,3,_)  % دائرة\n-    ; Len =:= 2 ->\n-        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n-    ; Len > 2 ->\n-        Ship = [(R1,C1)|Rest],\n-        last(Rest, (RLast, CLast)),\n-        cell(R1,C1,2,1,_),  % منحني للرأس\n-        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n-        forall(\n-            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n-            cell(R,C,2,2,_)  % مربع للوسط\n-        )\n-    ).\n-\n-% التحقق من أعداد السفن حسب الطول\n-validate_ship_counts :-\n-    find_all_ships(Ships),\n-    group_ships_by_length(Ships, Grouped),\n-    forall(ship(Len, Count), (\n-        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n-    )).\n-\n-group_ships_by_length(Ships, Grouped) :-\n-    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n-    sort(Lengths, Unique),\n-    findall(Len-Count, (\n-        member(Len, Unique),\n-        include(=(Len), Lengths, Matches),\n-        length(Matches, Count)\n-    ), Grouped).\n-\n-% ===============================================\n-% التحقق الشامل من صحة الحل\n-% ===============================================\n-\n-validate_complete_solution(Result) :-\n-    check_validation_rule_all(Errors),\n-    ( Errors == [] ->\n-        Result = valid(true, \"الحل صحيح\", [])\n-    ; Result = valid(false, \"الحل خاطئ\", Errors)\n-    ).\n-\n-check_validation_rule_all(Errors) :-\n-    findall(Error,\n-        (\n-          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n-          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n-          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n-          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n-          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n-          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n-        ),\n-        Errors).\n-\n-% الحصول على معلومات خلية\n-get_cell_info(R, C, Type, Shape, Direction) :-\n-    cell(R, C, Type, Shape, Direction).\n-\n-% الحصول على جميع السفن مع أطوالها\n-get_ships_with_lengths(ShipsWithLengths) :-\n-    find_all_ships(Ships),\n-    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n-\n-% التحقق من صحة موقع معين\n-is_valid_position(R, C) :-\n-    grid(Size),\n-    R >= 1, R =< Size,\n     C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752656977732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,303 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  % بحر\n+cell(3, 3, 1, 4, 0).  % بحر\n+\n+% ===============================================\n+% خوارزميات البحث عن السفن\n+% ===============================================\n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+% البحث عن جميع السفن في الشبكة\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+% بناء السفينة المتصلة\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+% ===============================================\n+% تحديث أشكال السفن\n+% ===============================================\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          % تحديث الرأس\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n+          % تحديث الذيل\n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n+          % تحديث الوسط\n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  % مربع للوسط\n+            )\n+          )\n+        )\n+    )).\n+\n+% ===============================================\n+% قواعد التحقق من صحة الحل\n+% ===============================================\n+\n+% التحقق من أعداد السفن في الصفوف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+% التحقق من أعداد السفن في الأعمدة\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752656984291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,297 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+% البحث عن جميع السفن في الشبكة\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+% بناء السفينة المتصلة\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+% ===============================================\n+% تحديث أشكال السفن\n+% ===============================================\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          % تحديث الرأس\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n+          % تحديث الذيل\n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n+          % تحديث الوسط\n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  % مربع للوسط\n+            )\n+          )\n+        )\n+    )).\n+\n+% ===============================================\n+% قواعد التحقق من صحة الحل\n+% ===============================================\n+\n+% التحقق من أعداد السفن في الصفوف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+% التحقق من أعداد السفن في الأعمدة\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752656993520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,291 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          % تحديث الرأس\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n+          % تحديث الذيل\n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n+          % تحديث الوسط\n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  % مربع للوسط\n+            )\n+          )\n+        )\n+    )).\n+\n+% ===============================================\n+% قواعد التحقق من صحة الحل\n+% ===============================================\n+\n+% التحقق من أعداد السفن في الصفوف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+% التحقق من أعداد السفن في الأعمدة\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752656999859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,289 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n+          % تحديث الوسط\n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  % مربع للوسط\n+            )\n+          )\n+        )\n+    )).\n+\n+% ===============================================\n+% قواعد التحقق من صحة الحل\n+% ===============================================\n+\n+% التحقق من أعداد السفن في الصفوف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+% التحقق من أعداد السفن في الأعمدة\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752657005356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,288 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  \n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  \n+            )\n+          )\n+        )\n+    )).\n+\n+% ===============================================\n+% قواعد التحقق من صحة الحل\n+% ===============================================\n+\n+% التحقق من أعداد السفن في الصفوف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+% التحقق من أعداد السفن في الأعمدة\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752657010629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,283 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  \n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  \n+            )\n+          )\n+        )\n+    )).\n+\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+% عد السفن في صف معين\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% عد السفن في عمود معين\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+% التحقق من عدم تلامس السفن جانبياً\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+% التحقق من عدم تلامس السفن قطرياً\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752657016508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,279 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  \n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  \n+            )\n+          )\n+        )\n+    )).\n+\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% التحقق من أشكال السفن\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  % دائرة\n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752657022190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,278 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  \n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  \n+            )\n+          )\n+        )\n+    )).\n+\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  \n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_),  % منحني للرأس\n+        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  % مربع للوسط\n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752657028049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,278 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  \n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  \n+            )\n+          )\n+        )\n+    )).\n+\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  \n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_)) \n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_), \n+        cell(RLast, CLast, 2, 1, _),  \n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  \n+        )\n+    ).\n+\n+% التحقق من أعداد السفن حسب الطول\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+% ===============================================\n+% التحقق الشامل من صحة الحل\n+% ===============================================\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752657033336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,273 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  \n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  \n+            )\n+          )\n+        )\n+    )).\n+\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  \n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_)) \n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_), \n+        cell(RLast, CLast, 2, 1, _),  \n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  \n+        )\n+    ).\n+\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+% الحصول على معلومات خلية\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+% الحصول على جميع السفن مع أطوالها\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+% التحقق من صحة موقع معين\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752657038702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,270 @@\n+:- set_prolog_flag(encoding, utf8).\n+:- encoding(utf8).\n+:- discontiguous grid_api/1.\n+:- discontiguous status_api/1.\n+:- dynamic cell/5.\n+:- dynamic grid/1.\n+:- dynamic row/2.\n+:- dynamic col/2.\n+:- dynamic ship/2.\n+\n+shape(0, unknown).\n+shape(1, curve).\n+shape(2, square).\n+shape(3, circle).\n+shape(4, sea).\n+\n+direction(0, dontCare).\n+direction(1, up).\n+direction(2, down).\n+direction(3, left).\n+direction(4, right).\n+\n+type(1, sea).\n+type(2, ship).\n+type(3, empty).\n+\n+grid(3).\n+\n+row(1, 2).\n+row(2, 0).\n+row(3, 0).\n+\n+col(1, 1).\n+col(2, 1).\n+col(3, 0).\n+\n+ship(2, 1).\n+\n+cell(1, 1, 2, 1, 1). \n+cell(1, 2, 2, 1, 1). \n+cell(1, 3, 1, 4, 0).  \n+cell(2, 1, 1, 4, 0).  \n+cell(2, 2, 1, 4, 0).  \n+cell(2, 3, 1, 4, 0). \n+cell(3, 1, 1, 4, 0).  \n+cell(3, 2, 1, 4, 0).  \n+cell(3, 3, 1, 4, 0).  \n+\n+neighbor_offsets([\n+    (-1, 0), (1, 0), (0, -1), (0, 1)\n+]).\n+\n+find_all_ships(Ships) :-\n+    grid(_),\n+    findall((R,C), cell(R,C,2,_,_), ShipCells),\n+    find_connected_ships(ShipCells, [], Ships).\n+\n+find_connected_ships([], _, []).\n+find_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n+    \\+ member(Cell, Visited),\n+    build_connected_ship(Cell, [Cell], Ship),\n+    append(Visited, Ship, NewVisited),\n+    subtract(Rest, Ship, NewRest),\n+    find_connected_ships(NewRest, NewVisited, Ships).\n+find_connected_ships([Cell|Rest], Visited, Ships) :-\n+    member(Cell, Visited),\n+    find_connected_ships(Rest, Visited, Ships).\n+\n+build_connected_ship(Cell, Visited, Ship) :-\n+    find_all_neighbors(Cell, Neighbors),\n+    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n+\n+find_all_neighbors((R,C), Neighbors) :-\n+    neighbor_offsets(Offsets),\n+    findall((NR, NC),\n+        ( member((DR,DC), Offsets),\n+          NR is R + DR, NC is C + DC,\n+          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n+          cell(NR, NC, 2, _, _)\n+        ),\n+        Neighbors\n+    ).\n+\n+extend_ship_with_neighbors([], Ship, Ship).\n+extend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n+    ( member(Neighbor, Visited) ->\n+        extend_ship_with_neighbors(Rest, Visited, Ship)\n+    ;   append(Visited, [Neighbor], NewVisited),\n+        build_connected_ship(Neighbor, NewVisited, TempShip),\n+        extend_ship_with_neighbors(Rest, TempShip, Ship)\n+    ).\n+\n+update_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        length(Ship, Len),\n+        ( Len =:= 1 ->\n+            Ship = [(R,C)],\n+            cell(R,C,2,_,D),\n+            retract(cell(R,C,2,_,D)),\n+            assert(cell(R,C,2,3,D)) \n+        ; \n+          Ship = [(R1,C1)|Rest],\n+          last(Rest, (RLast, CLast)),\n+          cell(R1,C1,2,_,D1),\n+          retract(cell(R1,C1,2,_,D1)),\n+          assert(cell(R1,C1,2,1,D1)), \n+          cell(RLast, CLast, 2, _, DLast),\n+          retract(cell(RLast, CLast, 2, _, DLast)),\n+          assert(cell(RLast, CLast, 2, 1, DLast)),  \n+          forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            (\n+                cell(R,C,2,_,D),\n+                retract(cell(R,C,2,_,D)),\n+                assert(cell(R,C,2,2,D))  \n+            )\n+          )\n+        )\n+    )).\n+\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n+    length(L, Count).\n+\n+validate_no_side_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_side_touching(Ship1, Ship2)\n+    ).\n+\n+ships_side_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    (\n+        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n+        (C1 =:= C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+validate_no_diagonal_touching :-\n+    find_all_ships(Ships),\n+    \\+ (\n+        member(Ship1, Ships),\n+        member(Ship2, Ships),\n+        Ship1 \\= Ship2,\n+        ships_diagonal_touching(Ship1, Ship2)\n+    ).\n+\n+ships_diagonal_touching(Ship1, Ship2) :-\n+    member((R1,C1), Ship1),\n+    member((R2,C2), Ship2),\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+validate_ship_shapes :-\n+    find_all_ships(Ships),\n+    forall(member(Ship, Ships), (\n+        valid_ship_shape(Ship),\n+        valid_ship_shape_pattern(Ship)\n+    )).\n+\n+valid_ship_shape(Ship) :-\n+    maplist(arg(1), Ship, Rows),\n+    maplist(arg(2), Ship, Cols),\n+    ( all_equal(Rows) -> consecutive(Cols)\n+    ; all_equal(Cols) -> consecutive(Rows)\n+    ).\n+\n+all_equal([_]).\n+all_equal([X,Y|Rest]) :-\n+    X =:= Y,\n+    all_equal([Y|Rest]).\n+\n+consecutive(List) :-\n+    sort(List, Sorted),\n+    Sorted = [Min|_],\n+    last(Sorted, Max),\n+    length(Sorted, Len),\n+    Max - Min + 1 =:= Len.\n+\n+valid_ship_shape_pattern(Ship) :-\n+    length(Ship, Len),\n+    ( Len =:= 1 -> \n+        Ship = [(R,C)],\n+        cell(R,C,2,3,_)  \n+    ; Len =:= 2 ->\n+        forall(member((R,C), Ship), cell(R,C,2,1,_)) \n+    ; Len > 2 ->\n+        Ship = [(R1,C1)|Rest],\n+        last(Rest, (RLast, CLast)),\n+        cell(R1,C1,2,1,_), \n+        cell(RLast, CLast, 2, 1, _),  \n+        forall(\n+            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n+            cell(R,C,2,2,_)  \n+        )\n+    ).\n+\n+validate_ship_counts :-\n+    find_all_ships(Ships),\n+    group_ships_by_length(Ships, Grouped),\n+    forall(ship(Len, Count), (\n+        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n+    )).\n+\n+group_ships_by_length(Ships, Grouped) :-\n+    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n+    sort(Lengths, Unique),\n+    findall(Len-Count, (\n+        member(Len, Unique),\n+        include(=(Len), Lengths, Matches),\n+        length(Matches, Count)\n+    ), Grouped).\n+\n+validate_complete_solution(Result) :-\n+    check_validation_rule_all(Errors),\n+    ( Errors == [] ->\n+        Result = valid(true, \"الحل صحيح\", [])\n+    ; Result = valid(false, \"الحل خاطئ\", Errors)\n+    ).\n+\n+check_validation_rule_all(Errors) :-\n+    findall(Error,\n+        (\n+          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n+          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n+          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n+          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n+          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n+          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n+        ),\n+        Errors).\n+\n+get_cell_info(R, C, Type, Shape, Direction) :-\n+    cell(R, C, Type, Shape, Direction).\n+\n+get_ships_with_lengths(ShipsWithLengths) :-\n+    find_all_ships(Ships),\n+    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n+\n+is_valid_position(R, C) :-\n+    grid(Size),\n+    R >= 1, R =< Size,\n+    C >= 1, C =< Size.\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752656952702,
            "name": "Commit-0",
            "content": "\n\n:- set_prolog_flag(encoding, utf8).\n:- encoding(utf8).\n:- discontiguous grid_api/1.\n:- discontiguous status_api/1.\n:- dynamic cell/5.\n:- dynamic grid/1.\n:- dynamic row/2.\n:- dynamic col/2.\n:- dynamic ship/2.\n\n% ===============================================\n% تعريف الأشكال والاتجاهات والأنواع\n% ===============================================\n\nshape(0, unknown).\nshape(1, curve).\nshape(2, square).\nshape(3, circle).\nshape(4, sea).\n\ndirection(0, dontCare).\ndirection(1, up).\ndirection(2, down).\ndirection(3, left).\ndirection(4, right).\n\ntype(1, sea).\ntype(2, ship).\ntype(3, empty).\n\n% ===============================================\n% بيانات اللعبة الأساسية\n% ===============================================\n\n% حجم الشبكة\ngrid(3).\n\n% متطلبات الصفوف (عدد خلايا السفن في كل صف)\nrow(1, 2).\nrow(2, 0).\nrow(3, 0).\n\n% متطلبات الأعمدة (عدد خلايا السفن في كل عمود)\ncol(1, 1).\ncol(2, 1).\ncol(3, 0).\n\n% متطلبات السفن (الطول، العدد)\nship(2, 1).\n\n% ===============================================\n% حالة الشبكة الأولية\n% ===============================================\n\n% cell(الصف, العمود, النوع, الشكل, الاتجاه)\ncell(1, 1, 2, 1, 1).  % سفينة، منحني، أعلى\ncell(1, 2, 2, 1, 1).  % سفينة، منحني، أعلى\ncell(1, 3, 1, 4, 0).  % بحر\ncell(2, 1, 1, 4, 0).  % بحر\ncell(2, 2, 1, 4, 0).  % بحر\ncell(2, 3, 1, 4, 0).  % بحر\ncell(3, 1, 1, 4, 0).  % بحر\ncell(3, 2, 1, 4, 0).  % بحر\ncell(3, 3, 1, 4, 0).  % بحر\n\n% ===============================================\n% خوارزميات البحث عن السفن\n% ===============================================\n\nneighbor_offsets([\n    (-1, 0), (1, 0), (0, -1), (0, 1)\n]).\n\n% البحث عن جميع السفن في الشبكة\nfind_all_ships(Ships) :-\n    grid(_),\n    findall((R,C), cell(R,C,2,_,_), ShipCells),\n    find_connected_ships(ShipCells, [], Ships).\n\nfind_connected_ships([], _, []).\nfind_connected_ships([Cell|Rest], Visited, [Ship|Ships]) :-\n    \\+ member(Cell, Visited),\n    build_connected_ship(Cell, [Cell], Ship),\n    append(Visited, Ship, NewVisited),\n    subtract(Rest, Ship, NewRest),\n    find_connected_ships(NewRest, NewVisited, Ships).\nfind_connected_ships([Cell|Rest], Visited, Ships) :-\n    member(Cell, Visited),\n    find_connected_ships(Rest, Visited, Ships).\n\n% بناء السفينة المتصلة\nbuild_connected_ship(Cell, Visited, Ship) :-\n    find_all_neighbors(Cell, Neighbors),\n    extend_ship_with_neighbors(Neighbors, Visited, Ship).\n\nfind_all_neighbors((R,C), Neighbors) :-\n    neighbor_offsets(Offsets),\n    findall((NR, NC),\n        ( member((DR,DC), Offsets),\n          NR is R + DR, NC is C + DC,\n          grid(Size), NR >= 1, NR =< Size, NC >= 1, NC =< Size,\n          cell(NR, NC, 2, _, _)\n        ),\n        Neighbors\n    ).\n\nextend_ship_with_neighbors([], Ship, Ship).\nextend_ship_with_neighbors([Neighbor|Rest], Visited, Ship) :-\n    ( member(Neighbor, Visited) ->\n        extend_ship_with_neighbors(Rest, Visited, Ship)\n    ;   append(Visited, [Neighbor], NewVisited),\n        build_connected_ship(Neighbor, NewVisited, TempShip),\n        extend_ship_with_neighbors(Rest, TempShip, Ship)\n    ).\n\n% ===============================================\n% تحديث أشكال السفن\n% ===============================================\n\nupdate_ship_shapes :-\n    find_all_ships(Ships),\n    forall(member(Ship, Ships), (\n        length(Ship, Len),\n        ( Len =:= 1 ->\n            Ship = [(R,C)],\n            cell(R,C,2,_,D),\n            retract(cell(R,C,2,_,D)),\n            assert(cell(R,C,2,3,D))  % دائرة للسفينة الواحدة\n        ; \n          Ship = [(R1,C1)|Rest],\n          last(Rest, (RLast, CLast)),\n          % تحديث الرأس\n          cell(R1,C1,2,_,D1),\n          retract(cell(R1,C1,2,_,D1)),\n          assert(cell(R1,C1,2,1,D1)),  % منحني للرأس\n          % تحديث الذيل\n          cell(RLast, CLast, 2, _, DLast),\n          retract(cell(RLast, CLast, 2, _, DLast)),\n          assert(cell(RLast, CLast, 2, 1, DLast)),  % منحني للذيل\n          % تحديث الوسط\n          forall(\n            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n            (\n                cell(R,C,2,_,D),\n                retract(cell(R,C,2,_,D)),\n                assert(cell(R,C,2,2,D))  % مربع للوسط\n            )\n          )\n        )\n    )).\n\n% ===============================================\n% قواعد التحقق من صحة الحل\n% ===============================================\n\n% التحقق من أعداد السفن في الصفوف\nvalidate_row_counts :-\n    grid(MaxRows),\n    forall(between(1, MaxRows, R), (\n        row(R, Expected),\n        count_ships_in_row(R, Count),\n        Expected =:= Count\n    )).\n\n% التحقق من أعداد السفن في الأعمدة\nvalidate_col_counts :-\n    grid(MaxCols),\n    forall(between(1, MaxCols, C), (\n        col(C, Expected),\n        count_ships_in_col(C, Count),\n        Expected =:= Count\n    )).\n\n% عد السفن في صف معين\ncount_ships_in_row(R, Count) :-\n    grid(MaxCols),\n    findall(1, (between(1, MaxCols, C), cell(R, C, 2, _, _)), L),\n    length(L, Count).\n\n% عد السفن في عمود معين\ncount_ships_in_col(C, Count) :-\n    grid(MaxRows),\n    findall(1, (between(1, MaxRows, R), cell(R, C, 2, _, _)), L),\n    length(L, Count).\n\n% التحقق من عدم تلامس السفن جانبياً\nvalidate_no_side_touching :-\n    find_all_ships(Ships),\n    \\+ (\n        member(Ship1, Ships),\n        member(Ship2, Ships),\n        Ship1 \\= Ship2,\n        ships_side_touching(Ship1, Ship2)\n    ).\n\nships_side_touching(Ship1, Ship2) :-\n    member((R1,C1), Ship1),\n    member((R2,C2), Ship2),\n    (\n        (R1 =:= R2, abs(C1 - C2) =:= 1) ;\n        (C1 =:= C2, abs(R1 - R2) =:= 1)\n    ).\n\n% التحقق من عدم تلامس السفن قطرياً\nvalidate_no_diagonal_touching :-\n    find_all_ships(Ships),\n    \\+ (\n        member(Ship1, Ships),\n        member(Ship2, Ships),\n        Ship1 \\= Ship2,\n        ships_diagonal_touching(Ship1, Ship2)\n    ).\n\nships_diagonal_touching(Ship1, Ship2) :-\n    member((R1,C1), Ship1),\n    member((R2,C2), Ship2),\n    abs(R1 - R2) =:= 1,\n    abs(C1 - C2) =:= 1.\n\n% التحقق من أشكال السفن\nvalidate_ship_shapes :-\n    find_all_ships(Ships),\n    forall(member(Ship, Ships), (\n        valid_ship_shape(Ship),\n        valid_ship_shape_pattern(Ship)\n    )).\n\nvalid_ship_shape(Ship) :-\n    maplist(arg(1), Ship, Rows),\n    maplist(arg(2), Ship, Cols),\n    ( all_equal(Rows) -> consecutive(Cols)\n    ; all_equal(Cols) -> consecutive(Rows)\n    ).\n\nall_equal([_]).\nall_equal([X,Y|Rest]) :-\n    X =:= Y,\n    all_equal([Y|Rest]).\n\nconsecutive(List) :-\n    sort(List, Sorted),\n    Sorted = [Min|_],\n    last(Sorted, Max),\n    length(Sorted, Len),\n    Max - Min + 1 =:= Len.\n\nvalid_ship_shape_pattern(Ship) :-\n    length(Ship, Len),\n    ( Len =:= 1 -> \n        Ship = [(R,C)],\n        cell(R,C,2,3,_)  % دائرة\n    ; Len =:= 2 ->\n        forall(member((R,C), Ship), cell(R,C,2,1,_))  % منحني\n    ; Len > 2 ->\n        Ship = [(R1,C1)|Rest],\n        last(Rest, (RLast, CLast)),\n        cell(R1,C1,2,1,_),  % منحني للرأس\n        cell(RLast, CLast, 2, 1, _),  % منحني للذيل\n        forall(\n            (member((R,C), Rest), (R,C) \\= (RLast, CLast)),\n            cell(R,C,2,2,_)  % مربع للوسط\n        )\n    ).\n\n% التحقق من أعداد السفن حسب الطول\nvalidate_ship_counts :-\n    find_all_ships(Ships),\n    group_ships_by_length(Ships, Grouped),\n    forall(ship(Len, Count), (\n        ( member(Len-Actual, Grouped) -> Actual =:= Count ; Count =:= 0 )\n    )).\n\ngroup_ships_by_length(Ships, Grouped) :-\n    findall(Len, (member(S, Ships), length(S, Len)), Lengths),\n    sort(Lengths, Unique),\n    findall(Len-Count, (\n        member(Len, Unique),\n        include(=(Len), Lengths, Matches),\n        length(Matches, Count)\n    ), Grouped).\n\n% ===============================================\n% التحقق الشامل من صحة الحل\n% ===============================================\n\nvalidate_complete_solution(Result) :-\n    check_validation_rule_all(Errors),\n    ( Errors == [] ->\n        Result = valid(true, \"الحل صحيح\", [])\n    ; Result = valid(false, \"الحل خاطئ\", Errors)\n    ).\n\ncheck_validation_rule_all(Errors) :-\n    findall(Error,\n        (\n          ( \\+ validate_row_counts -> Error = \"أعداد السفن في الصفوف غير صحيحة\" ; fail );\n          ( \\+ validate_col_counts -> Error = \"أعداد السفن في الأعمدة غير صحيحة\" ; fail );\n          ( \\+ validate_no_side_touching -> Error = \"ممنوع تلامس السفن جانبياً\" ; fail );\n          ( \\+ validate_no_diagonal_touching -> Error = \"ممنوع تلامس السفن قطرياً\" ; fail );\n          ( \\+ validate_ship_shapes -> Error = \"شكل السفن غير صحيح\" ; fail );\n          ( \\+ validate_ship_counts -> Error = \"أعداد السفن حسب الطول غير صحيحة\" ; fail )\n        ),\n        Errors).\n\n% الحصول على معلومات خلية\nget_cell_info(R, C, Type, Shape, Direction) :-\n    cell(R, C, Type, Shape, Direction).\n\n% الحصول على جميع السفن مع أطوالها\nget_ships_with_lengths(ShipsWithLengths) :-\n    find_all_ships(Ships),\n    findall(Ship-Length, (member(Ship, Ships), length(Ship, Length)), ShipsWithLengths).\n\n% التحقق من صحة موقع معين\nis_valid_position(R, C) :-\n    grid(Size),\n    R >= 1, R =< Size,\n    C >= 1, C =< Size."
        }
    ]
}