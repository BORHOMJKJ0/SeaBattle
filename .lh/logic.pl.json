{
    "sourceFile": "logic.pl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752577142669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752577148178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+:- consult('facts.pl').\n+\n+validate_grid(Grid) :-\n+    update_grid_from_json(Grid),\n+    validate_all_rules.\n+\n+update_grid_from_json(GridData) :-\n+    retractall(cell(_, _, _, _, _)),\n+    assert_grid_from_json(GridData, 1).\n+\n+assert_grid_from_json([], _).\n+assert_grid_from_json([Row|Rest], R) :-\n+    assert_row_from_json(Row, R, 1),\n+    R1 is R + 1,\n+    assert_grid_from_json(Rest, R1).\n+\n+assert_row_from_json([], _, _).\n+assert_row_from_json([Cell|Rest], R, C) :-\n+    (   Cell == 2 -> Type = ship ; Type = sea ),\n+    assert(cell(R, C, Type, nil, nil)),\n+    C1 is C + 1,\n+    assert_row_from_json(Rest, R, C1).\n+\n+validate_all_rules :-\n+    validate_row_counts,\n+    validate_col_counts.\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, ship, _, _)), L),\n+    length(L, Count).\n+\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, ship, _, _)), L),\n+    length(L, Count).\n+\n+get_complete_grid_data(json([grid=Matrix])) :-\n+    grid(Size),\n+    findall(Row,\n+        (between(1, Size, R),\n+         findall(Cell,\n+            (between(1, Size, C),\n+             (cell(R, C, ship, _, _) -> Cell = 2 ; Cell = 1)\n+            ), Row)\n+        ), Matrix).\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752578808558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,77 +50,27 @@\n     grid(MaxRows),\n     findall(1, (between(1, MaxRows, R), cell(R, C, ship, _, _)), L),\n     length(L, Count).\n \n-get_complete_grid_data(json([grid=Matrix])) :-\n+% نسخة كاملة تعيد بيانات الشبكة بالكامل مع متطلبات الصفوف والأعمدة والسفن:\n+get_complete_grid_data(json([\n+    size=Size,\n+    grid=Matrix,\n+    row_requirements=RowReqs,\n+    col_requirements=ColReqs,\n+    ships=Ships\n+])) :-\n     grid(Size),\n+    % بناء مصفوفة الشبكة (كل خلية إما 2 للسفينة أو 1 للبحر)\n     findall(Row,\n         (between(1, Size, R),\n          findall(Cell,\n             (between(1, Size, C),\n              (cell(R, C, ship, _, _) -> Cell = 2 ; Cell = 1)\n             ), Row)\n-        ), Matrix).\n-% logic.pl\n-\n-:- consult('facts.pl').\n-\n-validate_grid(Grid) :-\n-    update_grid_from_json(Grid),\n-    validate_all_rules.\n-\n-update_grid_from_json(GridData) :-\n-    retractall(cell(_, _, _, _, _)),\n-    assert_grid_from_json(GridData, 1).\n-\n-assert_grid_from_json([], _).\n-assert_grid_from_json([Row|Rest], R) :-\n-    assert_row_from_json(Row, R, 1),\n-    R1 is R + 1,\n-    assert_grid_from_json(Rest, R1).\n-\n-assert_row_from_json([], _, _).\n-assert_row_from_json([Cell|Rest], R, C) :-\n-    (   Cell == 2 -> Type = ship ; Type = sea ),\n-    assert(cell(R, C, Type, nil, nil)),\n-    C1 is C + 1,\n-    assert_row_from_json(Rest, R, C1).\n-\n-validate_all_rules :-\n-    validate_row_counts,\n-    validate_col_counts.\n-\n-validate_row_counts :-\n-    grid(MaxRows),\n-    forall(between(1, MaxRows, R), (\n-        row(R, Expected),\n-        count_ships_in_row(R, Count),\n-        Expected =:= Count\n-    )).\n-\n-validate_col_counts :-\n-    grid(MaxCols),\n-    forall(between(1, MaxCols, C), (\n-        col(C, Expected),\n-        count_ships_in_col(C, Count),\n-        Expected =:= Count\n-    )).\n-\n-count_ships_in_row(R, Count) :-\n-    grid(MaxCols),\n-    findall(1, (between(1, MaxCols, C), cell(R, C, ship, _, _)), L),\n-    length(L, Count).\n-\n-count_ships_in_col(C, Count) :-\n-    grid(MaxRows),\n-    findall(1, (between(1, MaxRows, R), cell(R, C, ship, _, _)), L),\n-    length(L, Count).\n-\n\\ No newline at end of file\n-get_complete_grid_data(json([grid=Matrix])) :-\n-    grid(Size),\n-    findall(Row,\n-        (between(1, Size, R),\n-         findall(Cell,\n-            (between(1, Size, C),\n-             (cell(R, C, ship, _, _) -> Cell = 2 ; Cell = 1)\n-            ), Row)\n-        ), Matrix).\n+        ), Matrix),\n+    % متطلبات كل صف (عدد خلايا السفن المطلوبة)\n+    findall(json([required=Count]), (between(1, Size, R), row(R, Count)), RowReqs),\n+    % متطلبات كل عمود (عدد خلايا السفن المطلوبة)\n+    findall(json([required=Count]), (between(1, Size, C), col(C, Count)), ColReqs),\n+    % بيانات السفن (الطول والعدد المطلوب)\n+    findall(json([length=Length, count=Count]), ship(Length, Count), Ships).\n"
                },
                {
                    "date": 1752578808719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,6 @@\n              (cell(R, C, ship, _, _) -> Cell = 2 ; Cell = 1)\n             ), Row)\n         ), Matrix),\n     findall(json([required=Count]), (between(1, Size, R), row(R, Count)), RowReqs),\n-    % متطلبات كل عمود (عدد خلايا السفن المطلوبة)\n     findall(json([required=Count]), (between(1, Size, C), col(C, Count)), ColReqs),\n-    % بيانات السفن (الطول والعدد المطلوب)\n     findall(json([length=Length, count=Count]), ship(Length, Count), Ships).\n"
                },
                {
                    "date": 1752578852922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+:- consult('facts.pl').\n+\n+validate_grid(Grid) :-\n+    update_grid_from_json(Grid),\n+    validate_all_rules.\n+\n+update_grid_from_json(GridData) :-\n+    retractall(cell(_, _, _, _, _)),\n+    assert_grid_from_json(GridData, 1).\n+\n+assert_grid_from_json([], _).\n+assert_grid_from_json([Row|Rest], R) :-\n+    assert_row_from_json(Row, R, 1),\n+    R1 is R + 1,\n+    assert_grid_from_json(Rest, R1).\n+\n+assert_row_from_json([], _, _).\n+assert_row_from_json([Cell|Rest], R, C) :-\n+    (   Cell == 2 -> Type = ship ; Type = sea ),\n+    assert(cell(R, C, Type, nil, nil)),\n+    C1 is C + 1,\n+    assert_row_from_json(Rest, R, C1).\n+\n+validate_all_rules :-\n+    validate_row_counts,\n+    validate_col_counts.\n+\n+validate_row_counts :-\n+    grid(MaxRows),\n+    forall(between(1, MaxRows, R), (\n+        row(R, Expected),\n+        count_ships_in_row(R, Count),\n+        Expected =:= Count\n+    )).\n+\n+validate_col_counts :-\n+    grid(MaxCols),\n+    forall(between(1, MaxCols, C), (\n+        col(C, Expected),\n+        count_ships_in_col(C, Count),\n+        Expected =:= Count\n+    )).\n+\n+count_ships_in_row(R, Count) :-\n+    grid(MaxCols),\n+    findall(1, (between(1, MaxCols, C), cell(R, C, ship, _, _)), L),\n+    length(L, Count).\n+\n+count_ships_in_col(C, Count) :-\n+    grid(MaxRows),\n+    findall(1, (between(1, MaxRows, R), cell(R, C, ship, _, _)), L),\n+    length(L, Count).\n+\n+get_complete_grid_data(json([\n+    size=Size,\n+    grid=Matrix,\n+    row_requirements=RowReqs,\n+    col_requirements=ColReqs,\n+    ships=Ships\n+])) :-\n+    grid(Size),\n+    findall(Row,\n+        (between(1, Size, R),\n+         findall(Cell,\n+            (between(1, Size, C),\n+             (cell(R, C, ship, _, _) -> Cell = 2 ; Cell = 1)\n+            ), Row)\n+        ), Matrix),\n+    findall(json([required=Count]), (between(1, Size, R), row(R, Count)), RowReqs),\n+    findall(json([required=Count]), (between(1, Size, C), col(C, Count)), ColReqs),\n+    findall(json([length=Length, count=Count]), ship(Length, Count), Ships).\n"
                }
            ],
            "date": 1752577142669,
            "name": "Commit-0",
            "content": "% logic.pl\n\n:- consult('facts.pl').\n\nvalidate_grid(Grid) :-\n    update_grid_from_json(Grid),\n    validate_all_rules.\n\nupdate_grid_from_json(GridData) :-\n    retractall(cell(_, _, _, _, _)),\n    assert_grid_from_json(GridData, 1).\n\nassert_grid_from_json([], _).\nassert_grid_from_json([Row|Rest], R) :-\n    assert_row_from_json(Row, R, 1),\n    R1 is R + 1,\n    assert_grid_from_json(Rest, R1).\n\nassert_row_from_json([], _, _).\nassert_row_from_json([Cell|Rest], R, C) :-\n    (   Cell == 2 -> Type = ship ; Type = sea ),\n    assert(cell(R, C, Type, nil, nil)),\n    C1 is C + 1,\n    assert_row_from_json(Rest, R, C1).\n\nvalidate_all_rules :-\n    validate_row_counts,\n    validate_col_counts.\n\nvalidate_row_counts :-\n    grid(MaxRows),\n    forall(between(1, MaxRows, R), (\n        row(R, Expected),\n        count_ships_in_row(R, Count),\n        Expected =:= Count\n    )).\n\nvalidate_col_counts :-\n    grid(MaxCols),\n    forall(between(1, MaxCols, C), (\n        col(C, Expected),\n        count_ships_in_col(C, Count),\n        Expected =:= Count\n    )).\n\ncount_ships_in_row(R, Count) :-\n    grid(MaxCols),\n    findall(1, (between(1, MaxCols, C), cell(R, C, ship, _, _)), L),\n    length(L, Count).\n\ncount_ships_in_col(C, Count) :-\n    grid(MaxRows),\n    findall(1, (between(1, MaxRows, R), cell(R, C, ship, _, _)), L),\n    length(L, Count).\n\nget_complete_grid_data(json([grid=Matrix])) :-\n    grid(Size),\n    findall(Row,\n        (between(1, Size, R),\n         findall(Cell,\n            (between(1, Size, C),\n             (cell(R, C, ship, _, _) -> Cell = 2 ; Cell = 1)\n            ), Row)\n        ), Matrix)."
        }
    ]
}