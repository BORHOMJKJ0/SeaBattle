{
    "sourceFile": "script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752567773226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752568143963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     consoleEl.textContent += '\\n' + text;\n     consoleEl.scrollTop = consoleEl.scrollHeight;\n }\n \n-// أحداث الأزرار\n+\n document.getElementById('load-btn').addEventListener('click', async () => {\n     if (!(await checkServerStatus())) {\n         alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n         return;\n"
                },
                {
                    "date": 1752568149495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,261 @@\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+// تحديث حالة الاتصال بالخادم\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+// تحميل الشبكة من الخادم وعرضها\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            // بناء مصفوفة الخلايا\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+// عرض الشبكة كاملة مع أرقام الصفوف يمينها\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        // شبكة خلايا الصف - grid داخل flex\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        // رقم متطلب الصف يمين الشبكة\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+// إعادة تعيين الشبكة (كلها بحر)\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+// التحقق من الحل عبر الباكند فقط\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        // تحويل الشبكة لقيم رقمية (بحر=1، سفينة=2)\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            // تمييز الخلايا الخاطئة إذا متوفرة\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+// تمييز الخلايا الخاطئة (تتلقى مصفوفة من إحداثيات [row,col])\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        // نبحث عن الصف\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        // في الصف، أول عنصر هو grid الخلايا\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+document.getElementById('load-btn').addEventListener('click', async () => {\n+    if (!(await checkServerStatus())) {\n+        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+        return;\n+    }\n+    await loadGridFromServer();\n+});\n+\n+document.getElementById('reset-btn').addEventListener('click', () => {\n+    resetGrid();\n+});\n+\n+document.getElementById('check-btn').addEventListener('click', async () => {\n+    await checkSolution();\n+});\n+\n+\n+window.addEventListener('load', async () => {\n+    if (await checkServerStatus()) {\n+        await loadGridFromServer();\n+    }\n+});\n"
                },
                {
                    "date": 1752568154953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+// تحديث حالة الاتصال بالخادم\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+// تحميل الشبكة من الخادم وعرضها\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            // بناء مصفوفة الخلايا\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+// عرض الشبكة كاملة مع أرقام الصفوف يمينها\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        // شبكة خلايا الصف - grid داخل flex\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        // رقم متطلب الصف يمين الشبكة\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+// إعادة تعيين الشبكة (كلها بحر)\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+// التحقق من الحل عبر الباكند فقط\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        // تحويل الشبكة لقيم رقمية (بحر=1، سفينة=2)\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+document.getElementById('load-btn').addEventListener('click', async () => {\n+    if (!(await checkServerStatus())) {\n+        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+        return;\n+    }\n+    await loadGridFromServer();\n+});\n+\n+document.getElementById('reset-btn').addEventListener('click', () => {\n+    resetGrid();\n+});\n+\n+document.getElementById('check-btn').addEventListener('click', async () => {\n+    await checkSolution();\n+});\n+\n+\n+window.addEventListener('load', async () => {\n+    if (await checkServerStatus()) {\n+        await loadGridFromServer();\n+    }\n+});\n"
                },
                {
                    "date": 1752568161090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,253 @@\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+// تحديث حالة الاتصال بالخادم\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+// تحميل الشبكة من الخادم وعرضها\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            // بناء مصفوفة الخلايا\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+// عرض الشبكة كاملة مع أرقام الصفوف يمينها\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        // شبكة خلايا الصف - grid داخل flex\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+document.getElementById('load-btn').addEventListener('click', async () => {\n+    if (!(await checkServerStatus())) {\n+        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+        return;\n+    }\n+    await loadGridFromServer();\n+});\n+\n+document.getElementById('reset-btn').addEventListener('click', () => {\n+    resetGrid();\n+});\n+\n+document.getElementById('check-btn').addEventListener('click', async () => {\n+    await checkSolution();\n+});\n+\n+\n+window.addEventListener('load', async () => {\n+    if (await checkServerStatus()) {\n+        await loadGridFromServer();\n+    }\n+});\n"
                },
                {
                    "date": 1752568168199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+// تحديث حالة الاتصال بالخادم\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+// تحميل الشبكة من الخادم وعرضها\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+document.getElementById('load-btn').addEventListener('click', async () => {\n+    if (!(await checkServerStatus())) {\n+        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+        return;\n+    }\n+    await loadGridFromServer();\n+});\n+\n+document.getElementById('reset-btn').addEventListener('click', () => {\n+    resetGrid();\n+});\n+\n+document.getElementById('check-btn').addEventListener('click', async () => {\n+    await checkSolution();\n+});\n+\n+\n+window.addEventListener('load', async () => {\n+    if (await checkServerStatus()) {\n+        await loadGridFromServer();\n+    }\n+});\n"
                },
                {
                    "date": 1752568174431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+document.getElementById('load-btn').addEventListener('click', async () => {\n+    if (!(await checkServerStatus())) {\n+        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+        return;\n+    }\n+    await loadGridFromServer();\n+});\n+\n+document.getElementById('reset-btn').addEventListener('click', () => {\n+    resetGrid();\n+});\n+\n+document.getElementById('check-btn').addEventListener('click', async () => {\n+    await checkSolution();\n+});\n+\n+\n+window.addEventListener('load', async () => {\n+    if (await checkServerStatus()) {\n+        await loadGridFromServer();\n+    }\n+});\n"
                },
                {
                    "date": 1752568183532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-\n-const SERVER_URL = 'http://localhost:8080';\n+//scriptjs// const SERVER_URL = 'http://localhost:8080';\n const API_ENDPOINTS = {\n     validate: `${SERVER_URL}/api/validate`,\n     grid: `${SERVER_URL}/api/grid`,\n     status: `${SERVER_URL}/api/status`\n@@ -245,1288 +244,4 @@\n     if (await checkServerStatus()) {\n         await loadGridFromServer();\n     }\n });\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-// تحديث حالة الاتصال بالخادم\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-// تحميل الشبكة من الخادم وعرضها\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-document.getElementById('load-btn').addEventListener('click', async () => {\n-    if (!(await checkServerStatus())) {\n-        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-        return;\n-    }\n-    await loadGridFromServer();\n-});\n-\n-document.getElementById('reset-btn').addEventListener('click', () => {\n-    resetGrid();\n-});\n-\n-document.getElementById('check-btn').addEventListener('click', async () => {\n-    await checkSolution();\n-});\n-\n-\n-window.addEventListener('load', async () => {\n-    if (await checkServerStatus()) {\n-        await loadGridFromServer();\n-    }\n-});\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-// تحديث حالة الاتصال بالخادم\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-// تحميل الشبكة من الخادم وعرضها\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            // بناء مصفوفة الخلايا\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-// عرض الشبكة كاملة مع أرقام الصفوف يمينها\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        // شبكة خلايا الصف - grid داخل flex\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-document.getElementById('load-btn').addEventListener('click', async () => {\n-    if (!(await checkServerStatus())) {\n-        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-        return;\n-    }\n-    await loadGridFromServer();\n-});\n-\n-document.getElementById('reset-btn').addEventListener('click', () => {\n-    resetGrid();\n-});\n-\n-document.getElementById('check-btn').addEventListener('click', async () => {\n-    await checkSolution();\n-});\n-\n-\n-window.addEventListener('load', async () => {\n-    if (await checkServerStatus()) {\n-        await loadGridFromServer();\n-    }\n-});\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-// تحديث حالة الاتصال بالخادم\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-// تحميل الشبكة من الخادم وعرضها\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            // بناء مصفوفة الخلايا\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-// عرض الشبكة كاملة مع أرقام الصفوف يمينها\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        // شبكة خلايا الصف - grid داخل flex\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        // رقم متطلب الصف يمين الشبكة\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-// إعادة تعيين الشبكة (كلها بحر)\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-// التحقق من الحل عبر الباكند فقط\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        // تحويل الشبكة لقيم رقمية (بحر=1، سفينة=2)\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-document.getElementById('load-btn').addEventListener('click', async () => {\n-    if (!(await checkServerStatus())) {\n-        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-        return;\n-    }\n-    await loadGridFromServer();\n-});\n-\n-document.getElementById('reset-btn').addEventListener('click', () => {\n-    resetGrid();\n-});\n-\n-document.getElementById('check-btn').addEventListener('click', async () => {\n-    await checkSolution();\n-});\n-\n-\n-window.addEventListener('load', async () => {\n-    if (await checkServerStatus()) {\n-        await loadGridFromServer();\n-    }\n-});\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-// تحديث حالة الاتصال بالخادم\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-// تحميل الشبكة من الخادم وعرضها\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            // بناء مصفوفة الخلايا\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-// عرض الشبكة كاملة مع أرقام الصفوف يمينها\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        // شبكة خلايا الصف - grid داخل flex\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        // رقم متطلب الصف يمين الشبكة\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-// إعادة تعيين الشبكة (كلها بحر)\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-// التحقق من الحل عبر الباكند فقط\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        // تحويل الشبكة لقيم رقمية (بحر=1، سفينة=2)\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            // تمييز الخلايا الخاطئة إذا متوفرة\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-// تمييز الخلايا الخاطئة (تتلقى مصفوفة من إحداثيات [row,col])\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        // نبحث عن الصف\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        // في الصف، أول عنصر هو grid الخلايا\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-document.getElementById('load-btn').addEventListener('click', async () => {\n-    if (!(await checkServerStatus())) {\n-        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-        return;\n-    }\n-    await loadGridFromServer();\n-});\n-\n-document.getElementById('reset-btn').addEventListener('click', () => {\n-    resetGrid();\n-});\n-\n-document.getElementById('check-btn').addEventListener('click', async () => {\n-    await checkSolution();\n-});\n-\n-\n-window.addEventListener('load', async () => {\n-    if (await checkServerStatus()) {\n-        await loadGridFromServer();\n-    }\n-});\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-// تحديث حالة الاتصال بالخادم\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-// تحميل الشبكة من الخادم وعرضها\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            // بناء مصفوفة الخلايا\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-// عرض الشبكة كاملة مع أرقام الصفوف يمينها\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        // شبكة خلايا الصف - grid داخل flex\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        // رقم متطلب الصف يمين الشبكة\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-// إعادة تعيين الشبكة (كلها بحر)\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-// التحقق من الحل عبر الباكند فقط\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        // تحويل الشبكة لقيم رقمية (بحر=1، سفينة=2)\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            // تمييز الخلايا الخاطئة إذا متوفرة\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-// تمييز الخلايا الخاطئة (تتلقى مصفوفة من إحداثيات [row,col])\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        // نبحث عن الصف\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        // في الصف، أول عنصر هو grid الخلايا\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-// مسح تمييز الأخطاء\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-// تفريغ نتائج التحقق\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-// كتابة نص في الكونسول الداخلي\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-document.getElementById('load-btn').addEventListener('click', async () => {\n-    if (!(await checkServerStatus())) {\n-        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-        return;\n-    }\n-    await loadGridFromServer();\n-});\n-\n-document.getElementById('reset-btn').addEventListener('click', () => {\n-    resetGrid();\n-});\n-\n-document.getElementById('check-btn').addEventListener('click', async () => {\n-    await checkSolution();\n-});\n-\n-// تحميل تلقائي عند فتح الصفحة\n-window.addEventListener('load', async () => {\n-    if (await checkServerStatus()) {\n-        await loadGridFromServer();\n-    }\n-});\n"
                },
                {
                    "date": 1752568191691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n //script.js\n- const SERVER_URL = 'http://localhost:8080';\n+const SERVER_URL = 'http://localhost:8080';\n const API_ENDPOINTS = {\n     validate: `${SERVER_URL}/api/validate`,\n     grid: `${SERVER_URL}/api/grid`,\n     status: `${SERVER_URL}/api/status`\n"
                }
            ],
            "date": 1752567773226,
            "name": "Commit-0",
            "content": "const SERVER_URL = 'http://localhost:8080';\nconst API_ENDPOINTS = {\n    validate: `${SERVER_URL}/api/validate`,\n    grid: `${SERVER_URL}/api/grid`,\n    status: `${SERVER_URL}/api/status`\n};\n\nlet currentGrid = {\n    size: 0,\n    cells: [],\n    rowRequirements: [],\n    colRequirements: [],\n    ships: []\n};\n\n// تحديث حالة الاتصال بالخادم\nasync function checkServerStatus() {\n    const statusElement = document.getElementById('server-status');\n    try {\n        const res = await fetch(API_ENDPOINTS.status);\n        const data = await res.json();\n        if (data.status === 'online') {\n            statusElement.className = 'server-status online';\n            statusElement.textContent = '🟢 متصل بالخادم';\n            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n            return true;\n        } else {\n            throw new Error('Server not ready');\n        }\n    } catch (e) {\n        statusElement.className = 'server-status offline';\n        statusElement.textContent = '🔴 غير متصل بالخادم';\n        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n        return false;\n    }\n}\n\n// تحميل الشبكة من الخادم وعرضها\nasync function loadGridFromServer() {\n    const loadBtn = document.getElementById('load-btn');\n    loadBtn.disabled = true;\n    clearResults();\n    try {\n        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n        const res = await fetch(API_ENDPOINTS.grid);\n        const data = await res.json();\n\n        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n            currentGrid.size = data.size;\n            currentGrid.cells = [];\n            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n            currentGrid.ships = data.ships || [];\n\n            // بناء مصفوفة الخلايا\n            for (let r = 0; r < currentGrid.size; r++) {\n                currentGrid.cells[r] = [];\n                for (let c = 0; c < currentGrid.size; c++) {\n                    currentGrid.cells[r][c] = data.grid[r][c].type; // 'ship' أو 'sea'\n                }\n            }\n\n            renderGrid();\n            updateColumnRequirements();\n            logToConsole('✅ تم تحميل البيانات بنجاح');\n        } else {\n            throw new Error('Invalid data format');\n        }\n    } catch (e) {\n        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n        alert('خطأ في تحميل البيانات من الخادم');\n    } finally {\n        loadBtn.disabled = false;\n    }\n}\n\n// عرض أرقام الأعمدة فوق الشبكة (ديناميكي)\nfunction updateColumnRequirements() {\n    const container = document.getElementById('requirements-top');\n    container.innerHTML = '';\n\n    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n\n    for (let i = 0; i < currentGrid.size; i++) {\n        const div = document.createElement('div');\n        div.className = 'req-cell';\n        div.textContent = currentGrid.colRequirements[i];\n        container.appendChild(div);\n    }\n}\n\n// عرض الشبكة كاملة مع أرقام الصفوف يمينها\nfunction renderGrid() {\n    const boardRows = document.getElementById('board-rows');\n    boardRows.innerHTML = '';\n\n    for (let r = 0; r < currentGrid.size; r++) {\n        const rowDiv = document.createElement('div');\n        rowDiv.className = 'board-row';\n\n        // شبكة خلايا الصف - grid داخل flex\n        const gridDiv = document.createElement('div');\n        gridDiv.className = 'grid';\n        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n\n        for (let c = 0; c < currentGrid.size; c++) {\n            const cell = document.createElement('div');\n            cell.className = 'cell';\n            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n            gridDiv.appendChild(cell);\n        }\n\n        rowDiv.appendChild(gridDiv);\n\n        // رقم متطلب الصف يمين الشبكة\n        const rowReqDiv = document.createElement('div');\n        rowReqDiv.className = 'row-req';\n        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n        rowDiv.appendChild(rowReqDiv);\n\n        boardRows.appendChild(rowDiv);\n    }\n}\n\n// إعادة تعيين الشبكة (كلها بحر)\nfunction resetGrid() {\n    if (currentGrid.size === 0) return;\n\n    for (let r = 0; r < currentGrid.size; r++) {\n        for (let c = 0; c < currentGrid.size; c++) {\n            currentGrid.cells[r][c] = 'sea';\n        }\n    }\n\n    renderGrid();\n    clearResults();\n    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n}\n\n// التحقق من الحل عبر الباكند فقط\nasync function checkSolution() {\n    if (currentGrid.size === 0) {\n        alert('يرجى تحميل الشبكة أولاً');\n        return;\n    }\n\n    const loading = document.getElementById('loading');\n    const results = document.getElementById('results');\n    const log = document.getElementById('log');\n    const checkBtn = document.getElementById('check-btn');\n\n    results.style.display = 'none';\n    loading.style.display = 'block';\n    checkBtn.disabled = true;\n    clearInvalidHighlights();\n\n    try {\n        logToConsole('🔍 بدء التحقق من الحل...');\n\n        // تحويل الشبكة لقيم رقمية (بحر=1، سفينة=2)\n        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n\n        const requestData = { grid: gridData };\n\n        const response = await fetch(API_ENDPOINTS.validate, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(requestData)\n        });\n\n        const validationResult = await response.json();\n\n        loading.style.display = 'none';\n        results.style.display = 'block';\n        log.innerHTML = '';\n\n        if (validationResult.valid) {\n            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n        } else {\n            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n\n            // تمييز الخلايا الخاطئة إذا متوفرة\n            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n                highlightInvalidCells(validationResult.invalid_cells);\n            }\n        }\n\n    } catch (error) {\n        loading.style.display = 'none';\n        results.style.display = 'block';\n        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n    } finally {\n        checkBtn.disabled = false;\n    }\n}\n\n// تمييز الخلايا الخاطئة (تتلقى مصفوفة من إحداثيات [row,col])\nfunction highlightInvalidCells(invalidCells) {\n    const boardRows = document.getElementById('board-rows');\n    invalidCells.forEach(([r, c]) => {\n        // نبحث عن الصف\n        const rowDiv = boardRows.children[r];\n        if (!rowDiv) return;\n\n        // في الصف، أول عنصر هو grid الخلايا\n        const gridDiv = rowDiv.querySelector('.grid');\n        if (!gridDiv) return;\n\n        const cell = gridDiv.children[c];\n        if (!cell) return;\n\n        cell.classList.add('invalid');\n    });\n}\n\n// مسح تمييز الأخطاء\nfunction clearInvalidHighlights() {\n    const cells = document.querySelectorAll('.cell.invalid');\n    cells.forEach(cell => cell.classList.remove('invalid'));\n}\n\n// تفريغ نتائج التحقق\nfunction clearResults() {\n    const results = document.getElementById('results');\n    const log = document.getElementById('log');\n    results.style.display = 'none';\n    log.innerHTML = '';\n    clearInvalidHighlights();\n}\n\n// كتابة نص في الكونسول الداخلي\nfunction logToConsole(text) {\n    const consoleEl = document.getElementById('console');\n    consoleEl.textContent += '\\n' + text;\n    consoleEl.scrollTop = consoleEl.scrollHeight;\n}\n\n// أحداث الأزرار\ndocument.getElementById('load-btn').addEventListener('click', async () => {\n    if (!(await checkServerStatus())) {\n        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n        return;\n    }\n    await loadGridFromServer();\n});\n\ndocument.getElementById('reset-btn').addEventListener('click', () => {\n    resetGrid();\n});\n\ndocument.getElementById('check-btn').addEventListener('click', async () => {\n    await checkSolution();\n});\n\n// تحميل تلقائي عند فتح الصفحة\nwindow.addEventListener('load', async () => {\n    if (await checkServerStatus()) {\n        await loadGridFromServer();\n    }\n});\n"
        }
    ]
}