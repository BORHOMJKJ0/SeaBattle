{
    "sourceFile": "static/script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1752570813615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752571351635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-//script.js\n+//sscript.js\n const SERVER_URL = 'http://localhost:8080';\n const API_ENDPOINTS = {\n     validate: `${SERVER_URL}/api/validate`,\n     grid: `${SERVER_URL}/api/grid`,\n"
                },
                {
                    "date": 1752571359505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,247 @@\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type; \n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+document.getElementById('load-btn').addEventListener('click', async () => {\n+    if (!(await checkServerStatus())) {\n+        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+        return;\n+    }\n+    await loadGridFromServer();\n+});\n+\n+document.getElementById('reset-btn').addEventListener('click', () => {\n+    resetGrid();\n+});\n+\n+document.getElementById('check-btn').addEventListener('click', async () => {\n+    await checkSolution();\n+});\n+\n+\n+window.addEventListener('load', async () => {\n+    if (await checkServerStatus()) {\n+        await loadGridFromServer();\n+    }\n+});\n"
                },
                {
                    "date": 1752574666531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,26 +222,27 @@\n     consoleEl.scrollTop = consoleEl.scrollHeight;\n }\n \n \n-document.getElementById('load-btn').addEventListener('click', async () => {\n-    if (!(await checkServerStatus())) {\n-        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-        return;\n-    }\n-    await loadGridFromServer();\n-});\n+window.addEventListener('DOMContentLoaded', () => {\n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n \n-document.getElementById('reset-btn').addEventListener('click', () => {\n-    resetGrid();\n-});\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n \n-document.getElementById('check-btn').addEventListener('click', async () => {\n-    await checkSolution();\n-});\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n \n-\n-window.addEventListener('load', async () => {\n-    if (await checkServerStatus()) {\n-        await loadGridFromServer();\n-    }\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n });\n"
                },
                {
                    "date": 1752574864292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+console.log('script.js loaded');\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type; \n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n"
                },
                {
                    "date": 1752575105967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,253 +1,9 @@\n console.log('script.js loaded');\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n+console.log('load-btn:', document.getElementById('load-btn'));\n+console.log('reset-btn:', document.getElementById('reset-btn'));\n+console.log('check-btn:', document.getElementById('check-btn'));\n \n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; \n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n const SERVER_URL = 'http://localhost:8080';\n const API_ENDPOINTS = {\n     validate: `${SERVER_URL}/api/validate`,\n     grid: `${SERVER_URL}/api/grid`,\n@@ -494,252 +250,4 @@\n             await loadGridFromServer();\n         }\n     })();\n });\n-//sscript.js\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; \n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-document.getElementById('load-btn').addEventListener('click', async () => {\n-    if (!(await checkServerStatus())) {\n-        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-        return;\n-    }\n-    await loadGridFromServer();\n-});\n-\n-document.getElementById('reset-btn').addEventListener('click', () => {\n-    resetGrid();\n-});\n-\n-document.getElementById('check-btn').addEventListener('click', async () => {\n-    await checkSolution();\n-});\n-\n-\n-window.addEventListener('load', async () => {\n-    if (await checkServerStatus()) {\n-        await loadGridFromServer();\n-    }\n-});\n"
                },
                {
                    "date": 1752575242301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n console.log('script.js loaded');\n+console.log('document.readyState:', document.readyState);\n console.log('load-btn:', document.getElementById('load-btn'));\n console.log('reset-btn:', document.getElementById('reset-btn'));\n console.log('check-btn:', document.getElementById('check-btn'));\n \n"
                },
                {
                    "date": 1752575372731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,5 @@\n console.log('script.js loaded');\n-console.log('document.readyState:', document.readyState);\n-console.log('load-btn:', document.getElementById('load-btn'));\n-console.log('reset-btn:', document.getElementById('reset-btn'));\n-console.log('check-btn:', document.getElementById('check-btn'));\n \n const SERVER_URL = 'http://localhost:8080';\n const API_ENDPOINTS = {\n     validate: `${SERVER_URL}/api/validate`,\n@@ -58,9 +54,9 @@\n \n             for (let r = 0; r < currentGrid.size; r++) {\n                 currentGrid.cells[r] = [];\n                 for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type; \n+                    currentGrid.cells[r][c] = data.grid[r][c].type;\n                 }\n             }\n \n             renderGrid();\n@@ -229,8 +225,15 @@\n }\n \n \n window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    console.log('document.readyState:', document.readyState);\n+    console.log('load-btn:', document.getElementById('load-btn'));\n+    console.log('reset-btn:', document.getElementById('reset-btn'));\n+    console.log('check-btn:', document.getElementById('check-btn'));\n+\n     document.getElementById('load-btn').addEventListener('click', async () => {\n         if (!(await checkServerStatus())) {\n             alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n             return;\n"
                },
                {
                    "date": 1752575693180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,250 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type;\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n"
                },
                {
                    "date": 1752575709641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-console.log('script.js loaded');\n-\n const SERVER_URL = 'http://localhost:8080';\n const API_ENDPOINTS = {\n     validate: `${SERVER_URL}/api/validate`,\n     grid: `${SERVER_URL}/api/grid`,\n@@ -247,261 +245,4 @@\n             await loadGridFromServer();\n         }\n     })();\n });\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type;\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    console.log('document.readyState:', document.readyState);\n-    console.log('load-btn:', document.getElementById('load-btn'));\n-    console.log('reset-btn:', document.getElementById('reset-btn'));\n-    console.log('check-btn:', document.getElementById('check-btn'));\n-\n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n"
                },
                {
                    "date": 1752575727341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status);\n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        const res = await fetch(API_ENDPOINTS.grid);\n+        const data = await res.json();\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    currentGrid.cells[r][c] = data.grid[r][c].type;\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم');\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+\n+        const requestData = { grid: gridData };\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { 'Content-Type': 'application/json' },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await response.json();\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    console.log('document.readyState:', document.readyState);\n+    console.log('load-btn:', document.getElementById('load-btn'));\n+    console.log('reset-btn:', document.getElementById('reset-btn'));\n+    console.log('check-btn:', document.getElementById('check-btn'));\n+\n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n"
                },
                {
                    "date": 1752580950659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,19 @@\n \n async function checkServerStatus() {\n     const statusElement = document.getElementById('server-status');\n     try {\n-        const res = await fetch(API_ENDPOINTS.status);\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n         const data = await res.json();\n         if (data.status === 'online') {\n             statusElement.className = 'server-status online';\n             statusElement.textContent = '🟢 متصل بالخادم';\n@@ -39,36 +49,52 @@\n async function loadGridFromServer() {\n     const loadBtn = document.getElementById('load-btn');\n     loadBtn.disabled = true;\n     clearResults();\n+    \n     try {\n         logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n         const data = await res.json();\n+        console.log('Server response:', data);\n \n         if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n             currentGrid.size = data.size;\n             currentGrid.cells = [];\n             currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n             currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n             currentGrid.ships = data.ships || [];\n \n+            // Initialize grid based on server data\n             for (let r = 0; r < currentGrid.size; r++) {\n                 currentGrid.cells[r] = [];\n                 for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type;\n+                    // Handle the cell data format from server\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n                 }\n             }\n \n             renderGrid();\n             updateColumnRequirements();\n             logToConsole('✅ تم تحميل البيانات بنجاح');\n         } else {\n-            throw new Error('Invalid data format');\n+            throw new Error('Invalid data format from server');\n         }\n     } catch (e) {\n         logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n     } finally {\n         loadBtn.disabled = false;\n     }\n }\n@@ -103,8 +129,20 @@\n             const cell = document.createElement('div');\n             cell.className = 'cell';\n             cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n             cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            // Add click handler to toggle cell state\n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n             gridDiv.appendChild(cell);\n         }\n \n         rowDiv.appendChild(gridDiv);\n@@ -150,19 +188,29 @@\n \n     try {\n         logToConsole('🔍 بدء التحقق من الحل...');\n \n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n \n         const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n \n         const response = await fetch(API_ENDPOINTS.validate, {\n             method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n+            headers: { \n+                'Content-Type': 'application/json'\n+            },\n             body: JSON.stringify(requestData)\n         });\n \n+        if (!response.ok) {\n+            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n+        }\n+\n         const validationResult = await response.json();\n+        console.log('Validation response:', validationResult);\n \n         loading.style.display = 'none';\n         results.style.display = 'block';\n         log.innerHTML = '';\n@@ -223,17 +271,11 @@\n     consoleEl.textContent += '\\n' + text;\n     consoleEl.scrollTop = consoleEl.scrollHeight;\n }\n \n-\n window.addEventListener('DOMContentLoaded', () => {\n     console.log('DOMContentLoaded fired');\n     \n-    console.log('document.readyState:', document.readyState);\n-    console.log('load-btn:', document.getElementById('load-btn'));\n-    console.log('reset-btn:', document.getElementById('reset-btn'));\n-    console.log('check-btn:', document.getElementById('check-btn'));\n-\n     document.getElementById('load-btn').addEventListener('click', async () => {\n         if (!(await checkServerStatus())) {\n             alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n             return;\n@@ -248,10 +290,11 @@\n     document.getElementById('check-btn').addEventListener('click', async () => {\n         await checkSolution();\n     });\n \n+    // Auto-load on startup\n     (async () => {\n         if (await checkServerStatus()) {\n             await loadGridFromServer();\n         }\n     })();\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752580960322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,298 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n+        const data = await res.json();\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            // Initialize grid based on server data\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    // Handle the cell data format from server\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        if (!response.ok) {\n+            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n+        }\n+\n+        const validationResult = await response.json();\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752581444874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,310 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n+        const data = await res.json();\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        if (!response.ok) {\n+            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n+        }\n+\n+        // تأكد من أن الاستجابة تحتوي على UTF-8\n+        const text = await response.text();\n+        console.log('Raw response:', text);\n+        \n+        let validationResult;\n+        try {\n+            validationResult = JSON.parse(text);\n+        } catch (parseError) {\n+            console.error('JSON parsing error:', parseError);\n+            throw new Error('خطأ في تحليل الاستجابة من الخادم');\n+        }\n+\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752581559099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,8 @@\n         if (!response.ok) {\n             throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n         }\n \n-        // تأكد من أن الاستجابة تحتوي على UTF-8\n         const text = await response.text();\n         console.log('Raw response:', text);\n         \n         let validationResult;\n@@ -306,851 +305,5 @@\n         if (await checkServerStatus()) {\n             await loadGridFromServer();\n         }\n     })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json'\n-            }\n-        });\n-        \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n-        \n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json'\n-            }\n-        });\n-        \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n-        \n-        const data = await res.json();\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            // Initialize grid based on server data\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    // Handle the cell data format from server\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        if (!response.ok) {\n-            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n-        }\n-\n-        const validationResult = await response.json();\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json'\n-            }\n-        });\n-        \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n-        \n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json'\n-            }\n-        });\n-        \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n-        \n-        const data = await res.json();\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            // Initialize grid based on server data\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    // Handle the cell data format from server\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            // Add click handler to toggle cell state\n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        if (!response.ok) {\n-            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n-        }\n-\n-        const validationResult = await response.json();\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    // Auto-load on startup\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status);\n-        const data = await res.json();\n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        const res = await fetch(API_ENDPOINTS.grid);\n-        const data = await res.json();\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    currentGrid.cells[r][c] = data.grid[r][c].type;\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم');\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n-\n-        const requestData = { grid: gridData };\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { 'Content-Type': 'application/json' },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await response.json();\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752581705761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,23 +14,68 @@\n     colRequirements: [],\n     ships: []\n };\n \n+// Improved error handling for server responses\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        // Try to get more detailed error information\n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            // If we can't parse the error response, just use the status\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    // Check if response is actually JSON\n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const text = await response.text();\n+    console.log('Raw response:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n async function checkServerStatus() {\n     const statusElement = document.getElementById('server-status');\n     try {\n         const res = await fetch(API_ENDPOINTS.status, {\n             method: 'GET',\n             headers: {\n-                'Content-Type': 'application/json; charset=UTF-8'\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n             }\n         });\n         \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n+        const data = await handleServerResponse(res);\n         \n-        const data = await res.json();\n         if (data.status === 'online') {\n             statusElement.className = 'server-status online';\n             statusElement.textContent = '🟢 متصل بالخادم';\n             logToConsole('✅ تم الاتصال بالخادم بنجاح');\n@@ -56,17 +101,14 @@\n         \n         const res = await fetch(API_ENDPOINTS.grid, {\n             method: 'GET',\n             headers: {\n-                'Content-Type': 'application/json; charset=UTF-8'\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n             }\n         });\n         \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n-        \n-        const data = await res.json();\n+        const data = await handleServerResponse(res);\n         console.log('Server response:', data);\n \n         if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n             currentGrid.size = data.size;\n@@ -201,23 +243,9 @@\n             },\n             body: JSON.stringify(requestData)\n         });\n \n-        if (!response.ok) {\n-            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n-        }\n-\n-        const text = await response.text();\n-        console.log('Raw response:', text);\n-        \n-        let validationResult;\n-        try {\n-            validationResult = JSON.parse(text);\n-        } catch (parseError) {\n-            console.error('JSON parsing error:', parseError);\n-            throw new Error('خطأ في تحليل الاستجابة من الخادم');\n-        }\n-\n+        const validationResult = await handleServerResponse(response);\n         console.log('Validation response:', validationResult);\n \n         loading.style.display = 'none';\n         results.style.display = 'block';\n"
                },
                {
                    "date": 1752581809339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,48 +18,81 @@\n // Improved error handling for server responses\n async function handleServerResponse(response) {\n     const contentType = response.headers.get('content-type');\n     \n+    // Get the raw response text first\n+    const text = await response.text();\n+    console.log('Raw response:', text.substring(0, 500) + (text.length > 500 ? '...' : ''));\n+    console.log('Response status:', response.status);\n+    console.log('Content-Type:', contentType);\n+    \n     if (!response.ok) {\n         let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n         \n-        // Try to get more detailed error information\n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n+        // Try to extract useful error information from the response\n+        if (text) {\n+            // If it looks like HTML, try to extract the error\n+            if (text.includes('<html>') || text.includes('<!DOCTYPE')) {\n+                const titleMatch = text.match(/<title>(.*?)<\\/title>/i);\n+                const bodyMatch = text.match(/<body[^>]*>(.*?)<\\/body>/is);\n+                \n+                if (titleMatch) {\n+                    errorMessage += ` - ${titleMatch[1]}`;\n+                } else if (bodyMatch) {\n+                    // Extract plain text from HTML\n+                    const plainText = bodyMatch[1].replace(/<[^>]*>/g, '').trim();\n+                    errorMessage += ` - ${plainText.substring(0, 200)}`;\n                 }\n             } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                // Try to parse as JSON for structured error\n+                try {\n+                    const errorData = JSON.parse(text);\n+                    if (errorData.message) {\n+                        errorMessage += ` - ${errorData.message}`;\n+                    } else if (errorData.error) {\n+                        errorMessage += ` - ${errorData.error}`;\n+                    }\n+                } catch (e) {\n+                    // Not JSON, just include raw text\n+                    errorMessage += ` - ${text.substring(0, 200)}`;\n                 }\n             }\n-        } catch (e) {\n-            // If we can't parse the error response, just use the status\n-            console.warn('Could not parse error response:', e);\n         }\n         \n         throw new Error(errorMessage);\n     }\n     \n-    // Check if response is actually JSON\n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    // Check if the response looks like JSON\n+    const trimmedText = text.trim();\n+    if (!trimmedText.startsWith('{') && !trimmedText.startsWith('[')) {\n+        console.error('Response does not look like JSON:', trimmedText.substring(0, 200));\n+        \n+        // If it contains HTML, it's likely an error page\n+        if (trimmedText.includes('<html>') || trimmedText.includes('<!DOCTYPE')) {\n+            throw new Error('الخادم أرجع صفحة HTML بدلاً من JSON - يبدو أن هناك خطأ في الخادم');\n+        }\n+        \n+        // If it starts with \"Content-Type\" or other headers, it's malformed HTTP\n+        if (trimmedText.startsWith('Content-Type') || trimmedText.startsWith('HTTP/')) {\n+            throw new Error('الخادم أرجع رؤوس HTTP بدلاً من JSON - خطأ في إعداد الخادم');\n+        }\n+        \n+        throw new Error('الخادم لم يرجع JSON صحيح. المحتوى: ' + trimmedText.substring(0, 100));\n     }\n     \n-    const text = await response.text();\n-    console.log('Raw response:', text);\n-    \n+    // Try to parse as JSON\n     try {\n-        return JSON.parse(text);\n+        return JSON.parse(trimmedText);\n     } catch (parseError) {\n         console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+        console.error('Failed to parse:', trimmedText.substring(0, 200));\n+        \n+        // Provide more specific error messages\n+        if (trimmedText.includes('Content-Type')) {\n+            throw new Error('الخادم أرجع رؤوس HTTP في الاستجابة. تحقق من إعدادات الخادم.');\n+        }\n+        \n+        throw new Error('خطأ في تحليل JSON من الخادم: ' + parseError.message);\n     }\n }\n \n async function checkServerStatus() {\n@@ -303,14 +336,56 @@\n     log.innerHTML = '';\n     clearInvalidHighlights();\n }\n \n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n+// Test function to debug server responses\n+async function debugServer() {\n+    console.log('=== مصحح الخادم ===');\n+    \n+    for (const [endpoint, url] of Object.entries(API_ENDPOINTS)) {\n+        console.log(`\\n--- اختبار ${endpoint}: ${url} ---`);\n+        \n+        try {\n+            const response = await fetch(url, {\n+                method: endpoint === 'validate' ? 'POST' : 'GET',\n+                headers: {\n+                    'Content-Type': 'application/json; charset=UTF-8',\n+                    'Accept': 'application/json; charset=UTF-8'\n+                },\n+                body: endpoint === 'validate' ? JSON.stringify({grid: [[1, 2], [2, 1]]}) : undefined\n+            });\n+            \n+            console.log(`Status: ${response.status} ${response.statusText}`);\n+            console.log(`Content-Type: ${response.headers.get('content-type')}`);\n+            \n+            const text = await response.text();\n+            console.log(`Response length: ${text.length}`);\n+            console.log(`Response preview: ${text.substring(0, 200)}${text.length > 200 ? '...' : ''}`);\n+            \n+        } catch (error) {\n+            console.error(`خطأ في ${endpoint}:`, error.message);\n+        }\n+    }\n }\n \n+// Add this function to your DOMContentLoaded event\n+function addDebugButton() {\n+    const debugBtn = document.createElement('button');\n+    debugBtn.textContent = 'اختبار الخادم 🔍';\n+    debugBtn.style.margin = '10px';\n+    debugBtn.style.padding = '10px';\n+    debugBtn.style.backgroundColor = '#007bff';\n+    debugBtn.style.color = 'white';\n+    debugBtn.style.border = 'none';\n+    debugBtn.style.borderRadius = '5px';\n+    debugBtn.style.cursor = 'pointer';\n+    \n+    debugBtn.addEventListener('click', debugServer);\n+    \n+    const container = document.querySelector('.controls') || document.body;\n+    container.appendChild(debugBtn);\n+}\n+\n window.addEventListener('DOMContentLoaded', () => {\n     console.log('DOMContentLoaded fired');\n     \n     document.getElementById('load-btn').addEventListener('click', async () => {\n"
                },
                {
                    "date": 1752581953260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,81 +18,48 @@\n // Improved error handling for server responses\n async function handleServerResponse(response) {\n     const contentType = response.headers.get('content-type');\n     \n-    // Get the raw response text first\n-    const text = await response.text();\n-    console.log('Raw response:', text.substring(0, 500) + (text.length > 500 ? '...' : ''));\n-    console.log('Response status:', response.status);\n-    console.log('Content-Type:', contentType);\n-    \n     if (!response.ok) {\n         let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n         \n-        // Try to extract useful error information from the response\n-        if (text) {\n-            // If it looks like HTML, try to extract the error\n-            if (text.includes('<html>') || text.includes('<!DOCTYPE')) {\n-                const titleMatch = text.match(/<title>(.*?)<\\/title>/i);\n-                const bodyMatch = text.match(/<body[^>]*>(.*?)<\\/body>/is);\n-                \n-                if (titleMatch) {\n-                    errorMessage += ` - ${titleMatch[1]}`;\n-                } else if (bodyMatch) {\n-                    // Extract plain text from HTML\n-                    const plainText = bodyMatch[1].replace(/<[^>]*>/g, '').trim();\n-                    errorMessage += ` - ${plainText.substring(0, 200)}`;\n+        // Try to get more detailed error information\n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n                 }\n             } else {\n-                // Try to parse as JSON for structured error\n-                try {\n-                    const errorData = JSON.parse(text);\n-                    if (errorData.message) {\n-                        errorMessage += ` - ${errorData.message}`;\n-                    } else if (errorData.error) {\n-                        errorMessage += ` - ${errorData.error}`;\n-                    }\n-                } catch (e) {\n-                    // Not JSON, just include raw text\n-                    errorMessage += ` - ${text.substring(0, 200)}`;\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n                 }\n             }\n+        } catch (e) {\n+            // If we can't parse the error response, just use the status\n+            console.warn('Could not parse error response:', e);\n         }\n         \n         throw new Error(errorMessage);\n     }\n     \n-    // Check if the response looks like JSON\n-    const trimmedText = text.trim();\n-    if (!trimmedText.startsWith('{') && !trimmedText.startsWith('[')) {\n-        console.error('Response does not look like JSON:', trimmedText.substring(0, 200));\n-        \n-        // If it contains HTML, it's likely an error page\n-        if (trimmedText.includes('<html>') || trimmedText.includes('<!DOCTYPE')) {\n-            throw new Error('الخادم أرجع صفحة HTML بدلاً من JSON - يبدو أن هناك خطأ في الخادم');\n-        }\n-        \n-        // If it starts with \"Content-Type\" or other headers, it's malformed HTTP\n-        if (trimmedText.startsWith('Content-Type') || trimmedText.startsWith('HTTP/')) {\n-            throw new Error('الخادم أرجع رؤوس HTTP بدلاً من JSON - خطأ في إعداد الخادم');\n-        }\n-        \n-        throw new Error('الخادم لم يرجع JSON صحيح. المحتوى: ' + trimmedText.substring(0, 100));\n+    // Check if response is actually JSON\n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n     }\n     \n-    // Try to parse as JSON\n+    const text = await response.text();\n+    console.log('Raw response:', text);\n+    \n     try {\n-        return JSON.parse(trimmedText);\n+        return JSON.parse(text);\n     } catch (parseError) {\n         console.error('JSON parsing error:', parseError);\n-        console.error('Failed to parse:', trimmedText.substring(0, 200));\n-        \n-        // Provide more specific error messages\n-        if (trimmedText.includes('Content-Type')) {\n-            throw new Error('الخادم أرجع رؤوس HTTP في الاستجابة. تحقق من إعدادات الخادم.');\n-        }\n-        \n-        throw new Error('خطأ في تحليل JSON من الخادم: ' + parseError.message);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n     }\n }\n \n async function checkServerStatus() {\n@@ -336,56 +303,14 @@\n     log.innerHTML = '';\n     clearInvalidHighlights();\n }\n \n-// Test function to debug server responses\n-async function debugServer() {\n-    console.log('=== مصحح الخادم ===');\n-    \n-    for (const [endpoint, url] of Object.entries(API_ENDPOINTS)) {\n-        console.log(`\\n--- اختبار ${endpoint}: ${url} ---`);\n-        \n-        try {\n-            const response = await fetch(url, {\n-                method: endpoint === 'validate' ? 'POST' : 'GET',\n-                headers: {\n-                    'Content-Type': 'application/json; charset=UTF-8',\n-                    'Accept': 'application/json; charset=UTF-8'\n-                },\n-                body: endpoint === 'validate' ? JSON.stringify({grid: [[1, 2], [2, 1]]}) : undefined\n-            });\n-            \n-            console.log(`Status: ${response.status} ${response.statusText}`);\n-            console.log(`Content-Type: ${response.headers.get('content-type')}`);\n-            \n-            const text = await response.text();\n-            console.log(`Response length: ${text.length}`);\n-            console.log(`Response preview: ${text.substring(0, 200)}${text.length > 200 ? '...' : ''}`);\n-            \n-        } catch (error) {\n-            console.error(`خطأ في ${endpoint}:`, error.message);\n-        }\n-    }\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n }\n \n-// Add this function to your DOMContentLoaded event\n-function addDebugButton() {\n-    const debugBtn = document.createElement('button');\n-    debugBtn.textContent = 'اختبار الخادم 🔍';\n-    debugBtn.style.margin = '10px';\n-    debugBtn.style.padding = '10px';\n-    debugBtn.style.backgroundColor = '#007bff';\n-    debugBtn.style.color = 'white';\n-    debugBtn.style.border = 'none';\n-    debugBtn.style.borderRadius = '5px';\n-    debugBtn.style.cursor = 'pointer';\n-    \n-    debugBtn.addEventListener('click', debugServer);\n-    \n-    const container = document.querySelector('.controls') || document.body;\n-    container.appendChild(debugBtn);\n-}\n-\n window.addEventListener('DOMContentLoaded', () => {\n     console.log('DOMContentLoaded fired');\n     \n     document.getElementById('load-btn').addEventListener('click', async () => {\n"
                },
                {
                    "date": 1752582477174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+// Improved error handling for server responses\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    // هنا نقرأ الاستجابة كـ ArrayBuffer ثم نفك التشفير بـ UTF-8\n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752582625419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,309 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n+        const data = await res.json();\n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        if (!res.ok) {\n+            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n+        }\n+        \n+        const data = await res.json();\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        if (!response.ok) {\n+            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n+        }\n+\n+        const text = await response.text();\n+        console.log('Raw response:', text);\n+        \n+        let validationResult;\n+        try {\n+            validationResult = JSON.parse(text);\n+        } catch (parseError) {\n+            console.error('JSON parsing error:', parseError);\n+            throw new Error('خطأ في تحليل الاستجابة من الخادم');\n+        }\n+\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752582638892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n     \n     if (!response.ok) {\n         let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n         \n-        // Try to get more detailed error information\n         try {\n             if (contentType && contentType.includes('application/json')) {\n                 const errorData = await response.json();\n                 if (errorData.message) {\n@@ -35,24 +34,25 @@\n                     errorMessage += ` - ${errorText.substring(0, 200)}`;\n                 }\n             }\n         } catch (e) {\n-            // If we can't parse the error response, just use the status\n             console.warn('Could not parse error response:', e);\n         }\n         \n         throw new Error(errorMessage);\n     }\n     \n-    // Check if response is actually JSON\n     if (!contentType || !contentType.includes('application/json')) {\n         const text = await response.text();\n         console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n         throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n     }\n     \n-    const text = await response.text();\n-    console.log('Raw response:', text);\n+    // هنا نقرأ الاستجابة كـ ArrayBuffer ثم نفك التشفير بـ UTF-8\n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n     \n     try {\n         return JSON.parse(text);\n     } catch (parseError) {\n@@ -61,8 +61,9 @@\n         throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n     }\n }\n \n+\n async function checkServerStatus() {\n     const statusElement = document.getElementById('server-status');\n     try {\n         const res = await fetch(API_ENDPOINTS.status, {\n"
                },
                {
                    "date": 1752582680000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    // هنا نقرأ الاستجابة كـ ArrayBuffer ثم نفك التشفير بـ UTF-8\n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752584965314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,55 +14,28 @@\n     colRequirements: [],\n     ships: []\n };\n \n+// ✅ تم تبسيط التعامل مع الرد\n async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n     if (!response.ok) {\n         let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n         try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n+            const errorData = await response.json();\n+            if (errorData.message) {\n+                errorMessage += ` - ${errorData.message}`;\n             }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n+        } catch (e) {}\n         throw new Error(errorMessage);\n     }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    // هنا نقرأ الاستجابة كـ ArrayBuffer ثم نفك التشفير بـ UTF-8\n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n+\n     try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+        return await response.json();\n+    } catch (error) {\n+        throw new Error('خطأ في تحليل استجابة الخادم');\n     }\n }\n \n-\n async function checkServerStatus() {\n     const statusElement = document.getElementById('server-status');\n     try {\n         const res = await fetch(API_ENDPOINTS.status, {\n@@ -71,310 +44,17 @@\n                 'Content-Type': 'application/json; charset=UTF-8',\n                 'Accept': 'application/json; charset=UTF-8'\n             }\n         });\n-        \n         const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n \n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n-        \n-        const data = await res.json();\n         if (data.status === 'online') {\n             statusElement.className = 'server-status online';\n             statusElement.textContent = '🟢 متصل بالخادم';\n             logToConsole('✅ تم الاتصال بالخادم بنجاح');\n             return true;\n         } else {\n-            throw new Error('Server not ready');\n+            throw new Error('الخادم غير جاهز');\n         }\n     } catch (e) {\n         statusElement.className = 'server-status offline';\n         statusElement.textContent = '🔴 غير متصل بالخادم';\n@@ -386,377 +66,19 @@\n async function loadGridFromServer() {\n     const loadBtn = document.getElementById('load-btn');\n     loadBtn.disabled = true;\n     clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        if (!res.ok) {\n-            throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n-        }\n-        \n-        const data = await res.json();\n-        console.log('Server response:', data);\n \n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n     try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        if (!response.ok) {\n-            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n-        }\n-\n-        const text = await response.text();\n-        console.log('Raw response:', text);\n-        \n-        let validationResult;\n-        try {\n-            validationResult = JSON.parse(text);\n-        } catch (parseError) {\n-            console.error('JSON parsing error:', parseError);\n-            throw new Error('خطأ في تحليل الاستجابة من الخادم');\n-        }\n-\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-// Improved error handling for server responses\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    // هنا نقرأ الاستجابة كـ ArrayBuffer ثم نفك التشفير بـ UTF-8\n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n         logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n         const res = await fetch(API_ENDPOINTS.grid, {\n             method: 'GET',\n             headers: {\n                 'Content-Type': 'application/json; charset=UTF-8',\n                 'Accept': 'application/json; charset=UTF-8'\n             }\n         });\n-        \n         const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n \n         if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n             currentGrid.size = data.size;\n             currentGrid.cells = [];\n@@ -775,9 +97,9 @@\n             renderGrid();\n             updateColumnRequirements();\n             logToConsole('✅ تم تحميل البيانات بنجاح');\n         } else {\n-            throw new Error('Invalid data format from server');\n+            throw new Error('تنسيق البيانات من الخادم غير صالح');\n         }\n     } catch (e) {\n         logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n         alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n@@ -788,11 +110,9 @@\n \n function updateColumnRequirements() {\n     const container = document.getElementById('requirements-top');\n     container.innerHTML = '';\n-\n     container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n     for (let i = 0; i < currentGrid.size; i++) {\n         const div = document.createElement('div');\n         div.className = 'req-cell';\n         div.textContent = currentGrid.colRequirements[i];\n@@ -802,13 +122,11 @@\n \n function renderGrid() {\n     const boardRows = document.getElementById('board-rows');\n     boardRows.innerHTML = '';\n-\n     for (let r = 0; r < currentGrid.size; r++) {\n         const rowDiv = document.createElement('div');\n         rowDiv.className = 'board-row';\n-\n         const gridDiv = document.createElement('div');\n         gridDiv.className = 'grid';\n         gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n \n@@ -816,42 +134,32 @@\n             const cell = document.createElement('div');\n             cell.className = 'cell';\n             cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n             cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n             cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n+                currentGrid.cells[r][c] = (currentGrid.cells[r][c] === 'ship') ? 'sea' : 'ship';\n                 renderGrid();\n                 clearResults();\n             });\n-            \n             gridDiv.appendChild(cell);\n         }\n \n         rowDiv.appendChild(gridDiv);\n-\n         const rowReqDiv = document.createElement('div');\n         rowReqDiv.className = 'row-req';\n         rowReqDiv.textContent = currentGrid.rowRequirements[r];\n         rowDiv.appendChild(rowReqDiv);\n-\n         boardRows.appendChild(rowDiv);\n     }\n }\n \n function resetGrid() {\n     if (currentGrid.size === 0) return;\n-\n     for (let r = 0; r < currentGrid.size; r++) {\n         for (let c = 0; c < currentGrid.size; c++) {\n             currentGrid.cells[r][c] = 'sea';\n         }\n     }\n-\n     renderGrid();\n     clearResults();\n     logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n }\n@@ -873,46 +181,36 @@\n     clearInvalidHighlights();\n \n     try {\n         logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n+        const gridData = currentGrid.cells.map(row =>\n             row.map(cell => cell === 'ship' ? 2 : 1)\n         );\n-\n         const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n         const response = await fetch(API_ENDPOINTS.validate, {\n             method: 'POST',\n-            headers: { \n+            headers: {\n                 'Content-Type': 'application/json; charset=UTF-8',\n                 'Accept': 'application/json; charset=UTF-8'\n             },\n             body: JSON.stringify(requestData)\n         });\n-\n         const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n \n         loading.style.display = 'none';\n         results.style.display = 'block';\n         log.innerHTML = '';\n \n         if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            log.innerHTML = `<div class=\"log-entry success\">${validationResult.message || '✅ الحل صحيح'}</div>`;\n             logToConsole('✅ التحقق مكتمل: الحل صحيح');\n         } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+            log.innerHTML = `<div class=\"log-entry error\">${validationResult.message || '❌ الحل خاطئ'}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل خاطئ');\n+            if (Array.isArray(validationResult.invalid_cells)) {\n                 highlightInvalidCells(validationResult.invalid_cells);\n             }\n         }\n-\n     } catch (error) {\n         loading.style.display = 'none';\n         results.style.display = 'block';\n         log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n@@ -926,29 +224,23 @@\n     const boardRows = document.getElementById('board-rows');\n     invalidCells.forEach(([r, c]) => {\n         const rowDiv = boardRows.children[r];\n         if (!rowDiv) return;\n-\n         const gridDiv = rowDiv.querySelector('.grid');\n         if (!gridDiv) return;\n-\n         const cell = gridDiv.children[c];\n         if (!cell) return;\n-\n         cell.classList.add('invalid');\n     });\n }\n \n function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n+    document.querySelectorAll('.cell.invalid').forEach(cell => cell.classList.remove('invalid'));\n }\n \n function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n+    document.getElementById('results').style.display = 'none';\n+    document.getElementById('log').innerHTML = '';\n     clearInvalidHighlights();\n }\n \n function logToConsole(text) {\n@@ -957,366 +249,19 @@\n     consoleEl.scrollTop = consoleEl.scrollHeight;\n }\n \n window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n     document.getElementById('load-btn').addEventListener('click', async () => {\n         if (!(await checkServerStatus())) {\n             alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n             return;\n         }\n         await loadGridFromServer();\n     });\n \n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n+    document.getElementById('reset-btn').addEventListener('click', () => resetGrid());\n+    document.getElementById('check-btn').addEventListener('click', async () => await checkSolution());\n \n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n     (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n+        if (await checkServerStatus()) await loadGridFromServer();\n     })();\n });\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-// Improved error handling for server responses\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    // هنا نقرأ الاستجابة كـ ArrayBuffer ثم نفك التشفير بـ UTF-8\n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n\\ No newline at end of file\n-        }\n-    })();\n-});\n"
                },
                {
                    "date": 1752584991607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,28 +14,54 @@\n     colRequirements: [],\n     ships: []\n };\n \n-// ✅ تم تبسيط التعامل مع الرد\n async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n     if (!response.ok) {\n         let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n         try {\n-            const errorData = await response.json();\n-            if (errorData.message) {\n-                errorMessage += ` - ${errorData.message}`;\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n             }\n-        } catch (e) {}\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n         throw new Error(errorMessage);\n     }\n-\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n     try {\n-        return await response.json();\n-    } catch (error) {\n-        throw new Error('خطأ في تحليل استجابة الخادم');\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n     }\n }\n \n+\n async function checkServerStatus() {\n     const statusElement = document.getElementById('server-status');\n     try {\n         const res = await fetch(API_ENDPOINTS.status, {\n@@ -44,17 +70,18 @@\n                 'Content-Type': 'application/json; charset=UTF-8',\n                 'Accept': 'application/json; charset=UTF-8'\n             }\n         });\n+        \n         const data = await handleServerResponse(res);\n-\n+        \n         if (data.status === 'online') {\n             statusElement.className = 'server-status online';\n             statusElement.textContent = '🟢 متصل بالخادم';\n             logToConsole('✅ تم الاتصال بالخادم بنجاح');\n             return true;\n         } else {\n-            throw new Error('الخادم غير جاهز');\n+            throw new Error('Server not ready');\n         }\n     } catch (e) {\n         statusElement.className = 'server-status offline';\n         statusElement.textContent = '🔴 غير متصل بالخادم';\n@@ -66,19 +93,22 @@\n async function loadGridFromServer() {\n     const loadBtn = document.getElementById('load-btn');\n     loadBtn.disabled = true;\n     clearResults();\n-\n+    \n     try {\n         logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n         const res = await fetch(API_ENDPOINTS.grid, {\n             method: 'GET',\n             headers: {\n                 'Content-Type': 'application/json; charset=UTF-8',\n                 'Accept': 'application/json; charset=UTF-8'\n             }\n         });\n+        \n         const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n \n         if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n             currentGrid.size = data.size;\n             currentGrid.cells = [];\n@@ -97,9 +127,9 @@\n             renderGrid();\n             updateColumnRequirements();\n             logToConsole('✅ تم تحميل البيانات بنجاح');\n         } else {\n-            throw new Error('تنسيق البيانات من الخادم غير صالح');\n+            throw new Error('Invalid data format from server');\n         }\n     } catch (e) {\n         logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n         alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n@@ -110,9 +140,11 @@\n \n function updateColumnRequirements() {\n     const container = document.getElementById('requirements-top');\n     container.innerHTML = '';\n+\n     container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n     for (let i = 0; i < currentGrid.size; i++) {\n         const div = document.createElement('div');\n         div.className = 'req-cell';\n         div.textContent = currentGrid.colRequirements[i];\n@@ -122,11 +154,13 @@\n \n function renderGrid() {\n     const boardRows = document.getElementById('board-rows');\n     boardRows.innerHTML = '';\n+\n     for (let r = 0; r < currentGrid.size; r++) {\n         const rowDiv = document.createElement('div');\n         rowDiv.className = 'board-row';\n+\n         const gridDiv = document.createElement('div');\n         gridDiv.className = 'grid';\n         gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n \n@@ -134,32 +168,42 @@\n             const cell = document.createElement('div');\n             cell.className = 'cell';\n             cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n             cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n             cell.addEventListener('click', () => {\n-                currentGrid.cells[r][c] = (currentGrid.cells[r][c] === 'ship') ? 'sea' : 'ship';\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n                 renderGrid();\n                 clearResults();\n             });\n+            \n             gridDiv.appendChild(cell);\n         }\n \n         rowDiv.appendChild(gridDiv);\n+\n         const rowReqDiv = document.createElement('div');\n         rowReqDiv.className = 'row-req';\n         rowReqDiv.textContent = currentGrid.rowRequirements[r];\n         rowDiv.appendChild(rowReqDiv);\n+\n         boardRows.appendChild(rowDiv);\n     }\n }\n \n function resetGrid() {\n     if (currentGrid.size === 0) return;\n+\n     for (let r = 0; r < currentGrid.size; r++) {\n         for (let c = 0; c < currentGrid.size; c++) {\n             currentGrid.cells[r][c] = 'sea';\n         }\n     }\n+\n     renderGrid();\n     clearResults();\n     logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n }\n@@ -181,36 +225,46 @@\n     clearInvalidHighlights();\n \n     try {\n         logToConsole('🔍 بدء التحقق من الحل...');\n-        const gridData = currentGrid.cells.map(row =>\n+\n+        const gridData = currentGrid.cells.map(row => \n             row.map(cell => cell === 'ship' ? 2 : 1)\n         );\n+\n         const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n         const response = await fetch(API_ENDPOINTS.validate, {\n             method: 'POST',\n-            headers: {\n+            headers: { \n                 'Content-Type': 'application/json; charset=UTF-8',\n                 'Accept': 'application/json; charset=UTF-8'\n             },\n             body: JSON.stringify(requestData)\n         });\n+\n         const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n \n         loading.style.display = 'none';\n         results.style.display = 'block';\n         log.innerHTML = '';\n \n         if (validationResult.valid) {\n-            log.innerHTML = `<div class=\"log-entry success\">${validationResult.message || '✅ الحل صحيح'}</div>`;\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n             logToConsole('✅ التحقق مكتمل: الحل صحيح');\n         } else {\n-            log.innerHTML = `<div class=\"log-entry error\">${validationResult.message || '❌ الحل خاطئ'}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل خاطئ');\n-            if (Array.isArray(validationResult.invalid_cells)) {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n                 highlightInvalidCells(validationResult.invalid_cells);\n             }\n         }\n+\n     } catch (error) {\n         loading.style.display = 'none';\n         results.style.display = 'block';\n         log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n@@ -224,23 +278,29 @@\n     const boardRows = document.getElementById('board-rows');\n     invalidCells.forEach(([r, c]) => {\n         const rowDiv = boardRows.children[r];\n         if (!rowDiv) return;\n+\n         const gridDiv = rowDiv.querySelector('.grid');\n         if (!gridDiv) return;\n+\n         const cell = gridDiv.children[c];\n         if (!cell) return;\n+\n         cell.classList.add('invalid');\n     });\n }\n \n function clearInvalidHighlights() {\n-    document.querySelectorAll('.cell.invalid').forEach(cell => cell.classList.remove('invalid'));\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n }\n \n function clearResults() {\n-    document.getElementById('results').style.display = 'none';\n-    document.getElementById('log').innerHTML = '';\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n     clearInvalidHighlights();\n }\n \n function logToConsole(text) {\n@@ -249,19 +309,28 @@\n     consoleEl.scrollTop = consoleEl.scrollHeight;\n }\n \n window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n     document.getElementById('load-btn').addEventListener('click', async () => {\n         if (!(await checkServerStatus())) {\n             alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n             return;\n         }\n         await loadGridFromServer();\n     });\n \n-    document.getElementById('reset-btn').addEventListener('click', () => resetGrid());\n-    document.getElementById('check-btn').addEventListener('click', async () => await checkSolution());\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n \n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n     (async () => {\n-        if (await checkServerStatus()) await loadGridFromServer();\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n     })();\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585055455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,12 +45,9 @@\n         console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n         throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n     }\n     \n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n+    return await response.json();\n     \n     try {\n         return JSON.parse(text);\n     } catch (parseError) {\n"
                },
                {
                    "date": 1752585061092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,331 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585075907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,336 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585082988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,332 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+\n+    try {\n+        return await response.json();    } \n+        catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585114921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,336 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585149678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        try {\n+            const errorData = await response.json();\n+            if (errorData.message) {\n+                errorMessage += ` - ${errorData.message}`;\n+            }\n+        } catch (e) {}\n+        throw new Error(errorMessage);\n+    }\n+\n+    return await response.json();\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585179294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,314 +15,8 @@\n     ships: []\n };\n \n async function handleServerResponse(response) {\n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        try {\n-            const errorData = await response.json();\n-            if (errorData.message) {\n-                errorMessage += ` - ${errorData.message}`;\n-            }\n-        } catch (e) {}\n-        throw new Error(errorMessage);\n-    }\n-\n-    return await response.json();\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n     const contentType = response.headers.get('content-type');\n     \n     if (!response.ok) {\n         let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n@@ -638,1337 +332,5 @@\n         if (await checkServerStatus()) {\n             await loadGridFromServer();\n         }\n     })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-\n-    try {\n-        return await response.json();    } \n-        catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    return await response.json();\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585230539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,53 +15,28 @@\n     ships: []\n };\n \n async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n     if (!response.ok) {\n         let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n         try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n+            const errorData = await response.json();\n+            if (errorData.message) {\n+                errorMessage += ` - ${errorData.message}`;\n             }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n+        } catch (e) {}\n         throw new Error(errorMessage);\n     }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n+\n     try {\n-        return JSON.parse(text);\n+        return await response.json();\n     } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+        throw new Error('خطأ في تحليل استجابة الخادم: ' + parseError.message);\n     }\n }\n \n \n+\n async function checkServerStatus() {\n     const statusElement = document.getElementById('server-status');\n     try {\n         const res = await fetch(API_ENDPOINTS.status, {\n"
                },
                {
                    "date": 1752585255382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,336 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585321559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,311 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        try {\n+            const errorData = await response.json();\n+            if (errorData.message) {\n+                errorMessage += ` - ${errorData.message}`;\n+            }\n+        } catch (_) {}\n+        throw new Error(errorMessage);\n+    }\n+\n+    try {\n+        return await response.json();\n+    } catch (parseError) {\n+        throw new Error('خطأ في قراءة استجابة JSON من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752585389668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,336 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            \n+            cell.addEventListener('click', () => {\n+                if (currentGrid.cells[r][c] === 'ship') {\n+                    currentGrid.cells[r][c] = 'sea';\n+                } else {\n+                    currentGrid.cells[r][c] = 'ship';\n+                }\n+                renderGrid();\n+                clearResults();\n+            });\n+            \n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752586429376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,330 +168,20 @@\n             const cell = document.createElement('div');\n             cell.className = 'cell';\n             cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n             cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n \n-        rowDiv.appendChild(gridDiv);\n+            // **احذف أو عطل حدث النقر لتمنع التعديل**\n+            // cell.addEventListener('click', () => {\n+            //     if (currentGrid.cells[r][c] === 'ship') {\n+            //         currentGrid.cells[r][c] = 'sea';\n+            //     } else {\n+            //         currentGrid.cells[r][c] = 'ship';\n+            //     }\n+            //     renderGrid();\n+            //     clearResults();\n+            // });\n \n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        try {\n-            const errorData = await response.json();\n-            if (errorData.message) {\n-                errorMessage += ` - ${errorData.message}`;\n-            }\n-        } catch (_) {}\n-        throw new Error(errorMessage);\n-    }\n-\n-    try {\n-        return await response.json();\n-    } catch (parseError) {\n-        throw new Error('خطأ في قراءة استجابة JSON من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n             gridDiv.appendChild(cell);\n         }\n \n         rowDiv.appendChild(gridDiv);\n@@ -643,652 +333,5 @@\n         if (await checkServerStatus()) {\n             await loadGridFromServer();\n         }\n     })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        try {\n-            const errorData = await response.json();\n-            if (errorData.message) {\n-                errorMessage += ` - ${errorData.message}`;\n-            }\n-        } catch (e) {}\n-        throw new Error(errorMessage);\n-    }\n-\n-    try {\n-        return await response.json();\n-    } catch (parseError) {\n-        throw new Error('خطأ في تحليل استجابة الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            \n-            cell.addEventListener('click', () => {\n-                if (currentGrid.cells[r][c] === 'ship') {\n-                    currentGrid.cells[r][c] = 'sea';\n-                } else {\n-                    currentGrid.cells[r][c] = 'ship';\n-                }\n-                renderGrid();\n-                clearResults();\n-            });\n-            \n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752586618608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,19 +169,8 @@\n             cell.className = 'cell';\n             cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n             cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n \n-            // **احذف أو عطل حدث النقر لتمنع التعديل**\n-            // cell.addEventListener('click', () => {\n-            //     if (currentGrid.cells[r][c] === 'ship') {\n-            //         currentGrid.cells[r][c] = 'sea';\n-            //     } else {\n-            //         currentGrid.cells[r][c] = 'ship';\n-            //     }\n-            //     renderGrid();\n-            //     clearResults();\n-            // });\n-\n             gridDiv.appendChild(cell);\n         }\n \n         rowDiv.appendChild(gridDiv);\n"
                },
                {
                    "date": 1752587693415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,16 +207,18 @@\n     const results = document.getElementById('results');\n     const log = document.getElementById('log');\n     const checkBtn = document.getElementById('check-btn');\n \n+    // إخفاء النتائج السابقة وإظهار حالة التحميل\n     results.style.display = 'none';\n     loading.style.display = 'block';\n     checkBtn.disabled = true;\n     clearInvalidHighlights();\n \n     try {\n         logToConsole('🔍 بدء التحقق من الحل...');\n \n+        // تحويل شبكة الحالة (ship=2, sea=1)\n         const gridData = currentGrid.cells.map(row => \n             row.map(cell => cell === 'ship' ? 2 : 1)\n         );\n \n@@ -232,23 +234,27 @@\n             body: JSON.stringify(requestData)\n         });\n \n         const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n+        console.log('Received validation result:', validationResult);\n \n+        // إخفاء حالة التحميل، إظهار النتائج\n         loading.style.display = 'none';\n         results.style.display = 'block';\n         log.innerHTML = '';\n \n-        if (validationResult.valid) {\n+        if (validationResult.valid === true) {\n+            // الحالة صحيحة\n             const successMessage = validationResult.message || 'الحل صحيح ✅';\n             log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n             logToConsole('✅ التحقق مكتمل: الحل صحيح');\n         } else {\n+            // الحالة خاطئة أو غير صالحة\n             const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n             log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n             logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n \n+            // تمييز الخلايا الخاطئة إن وجدت\n             if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n                 highlightInvalidCells(validationResult.invalid_cells);\n             }\n         }\n@@ -262,8 +268,9 @@\n         checkBtn.disabled = false;\n     }\n }\n \n+\n function highlightInvalidCells(invalidCells) {\n     const boardRows = document.getElementById('board-rows');\n     invalidCells.forEach(([r, c]) => {\n         const rowDiv = boardRows.children[r];\n"
                },
                {
                    "date": 1752587721424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+\n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752587943177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,326 @@\n+console.log('script.js loaded');\n+\n+const SERVER_URL = 'http://localhost:8080';\n+const API_ENDPOINTS = {\n+    validate: `${SERVER_URL}/api/validate`,\n+    grid: `${SERVER_URL}/api/grid`,\n+    status: `${SERVER_URL}/api/status`\n+};\n+\n+let currentGrid = {\n+    size: 0,\n+    cells: [],\n+    rowRequirements: [],\n+    colRequirements: [],\n+    ships: []\n+};\n+\n+async function handleServerResponse(response) {\n+    const contentType = response.headers.get('content-type');\n+    \n+    if (!response.ok) {\n+        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n+        \n+        try {\n+            if (contentType && contentType.includes('application/json')) {\n+                const errorData = await response.json();\n+                if (errorData.message) {\n+                    errorMessage += ` - ${errorData.message}`;\n+                }\n+            } else {\n+                const errorText = await response.text();\n+                if (errorText) {\n+                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n+                }\n+            }\n+        } catch (e) {\n+            console.warn('Could not parse error response:', e);\n+        }\n+        \n+        throw new Error(errorMessage);\n+    }\n+    \n+    if (!contentType || !contentType.includes('application/json')) {\n+        const text = await response.text();\n+        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n+        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n+    }\n+    \n+    const buffer = await response.arrayBuffer();\n+    const decoder = new TextDecoder('utf-8');\n+    const text = decoder.decode(buffer);\n+    console.log('Raw response decoded:', text);\n+    \n+    try {\n+        return JSON.parse(text);\n+    } catch (parseError) {\n+        console.error('JSON parsing error:', parseError);\n+        console.error('Response text:', text);\n+        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n+    }\n+}\n+\n+\n+async function checkServerStatus() {\n+    const statusElement = document.getElementById('server-status');\n+    try {\n+        const res = await fetch(API_ENDPOINTS.status, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        \n+        if (data.status === 'online') {\n+            statusElement.className = 'server-status online';\n+            statusElement.textContent = '🟢 متصل بالخادم';\n+            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n+            return true;\n+        } else {\n+            throw new Error('Server not ready');\n+        }\n+    } catch (e) {\n+        statusElement.className = 'server-status offline';\n+        statusElement.textContent = '🔴 غير متصل بالخادم';\n+        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n+        return false;\n+    }\n+}\n+\n+async function loadGridFromServer() {\n+    const loadBtn = document.getElementById('load-btn');\n+    loadBtn.disabled = true;\n+    clearResults();\n+    \n+    try {\n+        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n+        \n+        const res = await fetch(API_ENDPOINTS.grid, {\n+            method: 'GET',\n+            headers: {\n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            }\n+        });\n+        \n+        const data = await handleServerResponse(res);\n+        console.log('Server response:', data);\n+\n+        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n+            currentGrid.size = data.size;\n+            currentGrid.cells = [];\n+            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n+            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n+            currentGrid.ships = data.ships || [];\n+\n+            for (let r = 0; r < currentGrid.size; r++) {\n+                currentGrid.cells[r] = [];\n+                for (let c = 0; c < currentGrid.size; c++) {\n+                    const cellData = data.grid[r][c];\n+                    currentGrid.cells[r][c] = cellData.type || 'sea';\n+                }\n+            }\n+\n+            renderGrid();\n+            updateColumnRequirements();\n+            logToConsole('✅ تم تحميل البيانات بنجاح');\n+        } else {\n+            throw new Error('Invalid data format from server');\n+        }\n+    } catch (e) {\n+        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n+        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n+    } finally {\n+        loadBtn.disabled = false;\n+    }\n+}\n+\n+function updateColumnRequirements() {\n+    const container = document.getElementById('requirements-top');\n+    container.innerHTML = '';\n+\n+    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+    for (let i = 0; i < currentGrid.size; i++) {\n+        const div = document.createElement('div');\n+        div.className = 'req-cell';\n+        div.textContent = currentGrid.colRequirements[i];\n+        container.appendChild(div);\n+    }\n+}\n+\n+function renderGrid() {\n+    const boardRows = document.getElementById('board-rows');\n+    boardRows.innerHTML = '';\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        const rowDiv = document.createElement('div');\n+        rowDiv.className = 'board-row';\n+\n+        const gridDiv = document.createElement('div');\n+        gridDiv.className = 'grid';\n+        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n+\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            const cell = document.createElement('div');\n+            cell.className = 'cell';\n+            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n+            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n+\n+            gridDiv.appendChild(cell);\n+        }\n+\n+        rowDiv.appendChild(gridDiv);\n+\n+        const rowReqDiv = document.createElement('div');\n+        rowReqDiv.className = 'row-req';\n+        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n+        rowDiv.appendChild(rowReqDiv);\n+\n+        boardRows.appendChild(rowDiv);\n+    }\n+}\n+\n+function resetGrid() {\n+    if (currentGrid.size === 0) return;\n+\n+    for (let r = 0; r < currentGrid.size; r++) {\n+        for (let c = 0; c < currentGrid.size; c++) {\n+            currentGrid.cells[r][c] = 'sea';\n+        }\n+    }\n+\n+    renderGrid();\n+    clearResults();\n+    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n+}\n+\n+async function checkSolution() {\n+    if (currentGrid.size === 0) {\n+        alert('يرجى تحميل الشبكة أولاً');\n+        return;\n+    }\n+\n+    const loading = document.getElementById('loading');\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    const checkBtn = document.getElementById('check-btn');\n+\n+    results.style.display = 'none';\n+    loading.style.display = 'block';\n+    checkBtn.disabled = true;\n+    clearInvalidHighlights();\n+\n+    try {\n+        logToConsole('🔍 بدء التحقق من الحل...');\n+\n+        const gridData = currentGrid.cells.map(row => \n+            row.map(cell => cell === 'ship' ? 2 : 1)\n+        );\n+\n+        const requestData = { grid: gridData };\n+        console.log('Sending validation request:', requestData);\n+\n+        const response = await fetch(API_ENDPOINTS.validate, {\n+            method: 'POST',\n+            headers: { \n+                'Content-Type': 'application/json; charset=UTF-8',\n+                'Accept': 'application/json; charset=UTF-8'\n+            },\n+            body: JSON.stringify(requestData)\n+        });\n+\n+        const validationResult = await handleServerResponse(response);\n+        console.log('Validation response:', validationResult);\n+\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = '';\n+\n+        if (validationResult.valid === true) {\n+            const successMessage = validationResult.message || 'الحل صحيح ✅';\n+            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n+            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n+        } else {\n+            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n+            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n+            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n+        \n+            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n+                highlightInvalidCells(validationResult.invalid_cells);\n+            }\n+        }\n+\n+    } catch (error) {\n+        loading.style.display = 'none';\n+        results.style.display = 'block';\n+        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n+        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n+    } finally {\n+        checkBtn.disabled = false;\n+    }\n+}\n+\n+function highlightInvalidCells(invalidCells) {\n+    const boardRows = document.getElementById('board-rows');\n+    invalidCells.forEach(([r, c]) => {\n+        const rowDiv = boardRows.children[r];\n+        if (!rowDiv) return;\n+\n+        const gridDiv = rowDiv.querySelector('.grid');\n+        if (!gridDiv) return;\n+\n+        const cell = gridDiv.children[c];\n+        if (!cell) return;\n+\n+        cell.classList.add('invalid');\n+    });\n+}\n+\n+function clearInvalidHighlights() {\n+    const cells = document.querySelectorAll('.cell.invalid');\n+    cells.forEach(cell => cell.classList.remove('invalid'));\n+}\n+\n+function clearResults() {\n+    const results = document.getElementById('results');\n+    const log = document.getElementById('log');\n+    results.style.display = 'none';\n+    log.innerHTML = '';\n+    clearInvalidHighlights();\n+}\n+\n+function logToConsole(text) {\n+    const consoleEl = document.getElementById('console');\n+    consoleEl.textContent += '\\n' + text;\n+    consoleEl.scrollTop = consoleEl.scrollHeight;\n+}\n+\n+window.addEventListener('DOMContentLoaded', () => {\n+    console.log('DOMContentLoaded fired');\n+    \n+    document.getElementById('load-btn').addEventListener('click', async () => {\n+        if (!(await checkServerStatus())) {\n+            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n+            return;\n+        }\n+        await loadGridFromServer();\n+    });\n+\n+    document.getElementById('reset-btn').addEventListener('click', () => {\n+        resetGrid();\n+    });\n+\n+    document.getElementById('check-btn').addEventListener('click', async () => {\n+        await checkSolution();\n+    });\n+\n+    (async () => {\n+        if (await checkServerStatus()) {\n+            await loadGridFromServer();\n+        }\n+    })();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752588041303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,333 +239,8 @@\n         loading.style.display = 'none';\n         results.style.display = 'block';\n         log.innerHTML = '';\n \n-        if (validationResult.valid === true) {\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-        \n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Validation response:', validationResult);\n-\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n         if (validationResult.valid) {\n             const successMessage = validationResult.message || 'الحل صحيح ✅';\n             log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n             logToConsole('✅ التحقق مكتمل: الحل صحيح');\n@@ -647,338 +322,5 @@\n         if (await checkServerStatus()) {\n             await loadGridFromServer();\n         }\n     })();\n-});\n-console.log('script.js loaded');\n-\n-const SERVER_URL = 'http://localhost:8080';\n-const API_ENDPOINTS = {\n-    validate: `${SERVER_URL}/api/validate`,\n-    grid: `${SERVER_URL}/api/grid`,\n-    status: `${SERVER_URL}/api/status`\n-};\n-\n-let currentGrid = {\n-    size: 0,\n-    cells: [],\n-    rowRequirements: [],\n-    colRequirements: [],\n-    ships: []\n-};\n-\n-async function handleServerResponse(response) {\n-    const contentType = response.headers.get('content-type');\n-    \n-    if (!response.ok) {\n-        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n-        \n-        try {\n-            if (contentType && contentType.includes('application/json')) {\n-                const errorData = await response.json();\n-                if (errorData.message) {\n-                    errorMessage += ` - ${errorData.message}`;\n-                }\n-            } else {\n-                const errorText = await response.text();\n-                if (errorText) {\n-                    errorMessage += ` - ${errorText.substring(0, 200)}`;\n-                }\n-            }\n-        } catch (e) {\n-            console.warn('Could not parse error response:', e);\n-        }\n-        \n-        throw new Error(errorMessage);\n-    }\n-    \n-    if (!contentType || !contentType.includes('application/json')) {\n-        const text = await response.text();\n-        console.error('Expected JSON but got:', contentType, 'Content:', text.substring(0, 200));\n-        throw new Error('الخادم لم يرجع JSON صحيح. نوع المحتوى: ' + (contentType || 'غير محدد'));\n-    }\n-    \n-    const buffer = await response.arrayBuffer();\n-    const decoder = new TextDecoder('utf-8');\n-    const text = decoder.decode(buffer);\n-    console.log('Raw response decoded:', text);\n-    \n-    try {\n-        return JSON.parse(text);\n-    } catch (parseError) {\n-        console.error('JSON parsing error:', parseError);\n-        console.error('Response text:', text);\n-        throw new Error('خطأ في تحليل الاستجابة من الخادم: ' + parseError.message);\n-    }\n-}\n-\n-\n-async function checkServerStatus() {\n-    const statusElement = document.getElementById('server-status');\n-    try {\n-        const res = await fetch(API_ENDPOINTS.status, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        \n-        if (data.status === 'online') {\n-            statusElement.className = 'server-status online';\n-            statusElement.textContent = '🟢 متصل بالخادم';\n-            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n-            return true;\n-        } else {\n-            throw new Error('Server not ready');\n-        }\n-    } catch (e) {\n-        statusElement.className = 'server-status offline';\n-        statusElement.textContent = '🔴 غير متصل بالخادم';\n-        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n-        return false;\n-    }\n-}\n-\n-async function loadGridFromServer() {\n-    const loadBtn = document.getElementById('load-btn');\n-    loadBtn.disabled = true;\n-    clearResults();\n-    \n-    try {\n-        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n-        \n-        const res = await fetch(API_ENDPOINTS.grid, {\n-            method: 'GET',\n-            headers: {\n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            }\n-        });\n-        \n-        const data = await handleServerResponse(res);\n-        console.log('Server response:', data);\n-\n-        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n-            currentGrid.size = data.size;\n-            currentGrid.cells = [];\n-            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n-            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n-            currentGrid.ships = data.ships || [];\n-\n-            for (let r = 0; r < currentGrid.size; r++) {\n-                currentGrid.cells[r] = [];\n-                for (let c = 0; c < currentGrid.size; c++) {\n-                    const cellData = data.grid[r][c];\n-                    currentGrid.cells[r][c] = cellData.type || 'sea';\n-                }\n-            }\n-\n-            renderGrid();\n-            updateColumnRequirements();\n-            logToConsole('✅ تم تحميل البيانات بنجاح');\n-        } else {\n-            throw new Error('Invalid data format from server');\n-        }\n-    } catch (e) {\n-        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n-        alert('خطأ في تحميل البيانات من الخادم: ' + e.message);\n-    } finally {\n-        loadBtn.disabled = false;\n-    }\n-}\n-\n-function updateColumnRequirements() {\n-    const container = document.getElementById('requirements-top');\n-    container.innerHTML = '';\n-\n-    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-    for (let i = 0; i < currentGrid.size; i++) {\n-        const div = document.createElement('div');\n-        div.className = 'req-cell';\n-        div.textContent = currentGrid.colRequirements[i];\n-        container.appendChild(div);\n-    }\n-}\n-\n-function renderGrid() {\n-    const boardRows = document.getElementById('board-rows');\n-    boardRows.innerHTML = '';\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        const rowDiv = document.createElement('div');\n-        rowDiv.className = 'board-row';\n-\n-        const gridDiv = document.createElement('div');\n-        gridDiv.className = 'grid';\n-        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n-\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            const cell = document.createElement('div');\n-            cell.className = 'cell';\n-            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n-            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n-\n-            gridDiv.appendChild(cell);\n-        }\n-\n-        rowDiv.appendChild(gridDiv);\n-\n-        const rowReqDiv = document.createElement('div');\n-        rowReqDiv.className = 'row-req';\n-        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n-        rowDiv.appendChild(rowReqDiv);\n-\n-        boardRows.appendChild(rowDiv);\n-    }\n-}\n-\n-function resetGrid() {\n-    if (currentGrid.size === 0) return;\n-\n-    for (let r = 0; r < currentGrid.size; r++) {\n-        for (let c = 0; c < currentGrid.size; c++) {\n-            currentGrid.cells[r][c] = 'sea';\n-        }\n-    }\n-\n-    renderGrid();\n-    clearResults();\n-    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n-}\n-\n-async function checkSolution() {\n-    if (currentGrid.size === 0) {\n-        alert('يرجى تحميل الشبكة أولاً');\n-        return;\n-    }\n-\n-    const loading = document.getElementById('loading');\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    const checkBtn = document.getElementById('check-btn');\n-\n-    // إخفاء النتائج السابقة وإظهار حالة التحميل\n-    results.style.display = 'none';\n-    loading.style.display = 'block';\n-    checkBtn.disabled = true;\n-    clearInvalidHighlights();\n-\n-    try {\n-        logToConsole('🔍 بدء التحقق من الحل...');\n-\n-        // تحويل شبكة الحالة (ship=2, sea=1)\n-        const gridData = currentGrid.cells.map(row => \n-            row.map(cell => cell === 'ship' ? 2 : 1)\n-        );\n-\n-        const requestData = { grid: gridData };\n-        console.log('Sending validation request:', requestData);\n-\n-        const response = await fetch(API_ENDPOINTS.validate, {\n-            method: 'POST',\n-            headers: { \n-                'Content-Type': 'application/json; charset=UTF-8',\n-                'Accept': 'application/json; charset=UTF-8'\n-            },\n-            body: JSON.stringify(requestData)\n-        });\n-\n-        const validationResult = await handleServerResponse(response);\n-        console.log('Received validation result:', validationResult);\n-\n-        // إخفاء حالة التحميل، إظهار النتائج\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = '';\n-\n-        if (validationResult.valid === true) {\n-            // الحالة صحيحة\n-            const successMessage = validationResult.message || 'الحل صحيح ✅';\n-            log.innerHTML = `<div class=\"log-entry success\">${successMessage}</div>`;\n-            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n-        } else {\n-            // الحالة خاطئة أو غير صالحة\n-            const errorMessage = validationResult.message || 'الحل خاطئ ❌';\n-            log.innerHTML = `<div class=\"log-entry error\">${errorMessage}</div>`;\n-            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n-\n-            // تمييز الخلايا الخاطئة إن وجدت\n-            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n-                highlightInvalidCells(validationResult.invalid_cells);\n-            }\n-        }\n-\n-    } catch (error) {\n-        loading.style.display = 'none';\n-        results.style.display = 'block';\n-        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n-        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n-    } finally {\n-        checkBtn.disabled = false;\n-    }\n-}\n-\n-\n-function highlightInvalidCells(invalidCells) {\n-    const boardRows = document.getElementById('board-rows');\n-    invalidCells.forEach(([r, c]) => {\n-        const rowDiv = boardRows.children[r];\n-        if (!rowDiv) return;\n-\n-        const gridDiv = rowDiv.querySelector('.grid');\n-        if (!gridDiv) return;\n-\n-        const cell = gridDiv.children[c];\n-        if (!cell) return;\n-\n-        cell.classList.add('invalid');\n-    });\n-}\n-\n-function clearInvalidHighlights() {\n-    const cells = document.querySelectorAll('.cell.invalid');\n-    cells.forEach(cell => cell.classList.remove('invalid'));\n-}\n-\n-function clearResults() {\n-    const results = document.getElementById('results');\n-    const log = document.getElementById('log');\n-    results.style.display = 'none';\n-    log.innerHTML = '';\n-    clearInvalidHighlights();\n-}\n-\n-function logToConsole(text) {\n-    const consoleEl = document.getElementById('console');\n-    consoleEl.textContent += '\\n' + text;\n-    consoleEl.scrollTop = consoleEl.scrollHeight;\n-}\n-\n-window.addEventListener('DOMContentLoaded', () => {\n-    console.log('DOMContentLoaded fired');\n-    \n-    document.getElementById('load-btn').addEventListener('click', async () => {\n-        if (!(await checkServerStatus())) {\n-            alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n-            return;\n-        }\n-        await loadGridFromServer();\n-    });\n-\n-    document.getElementById('reset-btn').addEventListener('click', () => {\n-        resetGrid();\n-    });\n-\n-    document.getElementById('check-btn').addEventListener('click', async () => {\n-        await checkSolution();\n-    });\n-\n-    (async () => {\n-        if (await checkServerStatus()) {\n-            await loadGridFromServer();\n-        }\n-    })();\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752588224732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n             cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n             cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n \n \n+\n             gridDiv.appendChild(cell);\n         }\n \n         rowDiv.appendChild(gridDiv);\n"
                }
            ],
            "date": 1752570813615,
            "name": "Commit-0",
            "content": "//script.js\nconst SERVER_URL = 'http://localhost:8080';\nconst API_ENDPOINTS = {\n    validate: `${SERVER_URL}/api/validate`,\n    grid: `${SERVER_URL}/api/grid`,\n    status: `${SERVER_URL}/api/status`\n};\n\nlet currentGrid = {\n    size: 0,\n    cells: [],\n    rowRequirements: [],\n    colRequirements: [],\n    ships: []\n};\n\nasync function checkServerStatus() {\n    const statusElement = document.getElementById('server-status');\n    try {\n        const res = await fetch(API_ENDPOINTS.status);\n        const data = await res.json();\n        if (data.status === 'online') {\n            statusElement.className = 'server-status online';\n            statusElement.textContent = '🟢 متصل بالخادم';\n            logToConsole('✅ تم الاتصال بالخادم بنجاح');\n            return true;\n        } else {\n            throw new Error('Server not ready');\n        }\n    } catch (e) {\n        statusElement.className = 'server-status offline';\n        statusElement.textContent = '🔴 غير متصل بالخادم';\n        logToConsole('❌ فشل الاتصال بالخادم: ' + e.message);\n        return false;\n    }\n}\n\nasync function loadGridFromServer() {\n    const loadBtn = document.getElementById('load-btn');\n    loadBtn.disabled = true;\n    clearResults();\n    try {\n        logToConsole('📥 جاري تحميل البيانات من الخادم...');\n        const res = await fetch(API_ENDPOINTS.grid);\n        const data = await res.json();\n\n        if (data.size && data.grid && data.row_requirements && data.col_requirements) {\n            currentGrid.size = data.size;\n            currentGrid.cells = [];\n            currentGrid.rowRequirements = data.row_requirements.map(r => r.required);\n            currentGrid.colRequirements = data.col_requirements.map(c => c.required);\n            currentGrid.ships = data.ships || [];\n\n            for (let r = 0; r < currentGrid.size; r++) {\n                currentGrid.cells[r] = [];\n                for (let c = 0; c < currentGrid.size; c++) {\n                    currentGrid.cells[r][c] = data.grid[r][c].type; \n                }\n            }\n\n            renderGrid();\n            updateColumnRequirements();\n            logToConsole('✅ تم تحميل البيانات بنجاح');\n        } else {\n            throw new Error('Invalid data format');\n        }\n    } catch (e) {\n        logToConsole('❌ خطأ في تحميل البيانات: ' + e.message);\n        alert('خطأ في تحميل البيانات من الخادم');\n    } finally {\n        loadBtn.disabled = false;\n    }\n}\n\nfunction updateColumnRequirements() {\n    const container = document.getElementById('requirements-top');\n    container.innerHTML = '';\n\n    container.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n\n    for (let i = 0; i < currentGrid.size; i++) {\n        const div = document.createElement('div');\n        div.className = 'req-cell';\n        div.textContent = currentGrid.colRequirements[i];\n        container.appendChild(div);\n    }\n}\n\nfunction renderGrid() {\n    const boardRows = document.getElementById('board-rows');\n    boardRows.innerHTML = '';\n\n    for (let r = 0; r < currentGrid.size; r++) {\n        const rowDiv = document.createElement('div');\n        rowDiv.className = 'board-row';\n\n        const gridDiv = document.createElement('div');\n        gridDiv.className = 'grid';\n        gridDiv.style.gridTemplateColumns = `repeat(${currentGrid.size}, 60px)`;\n\n        for (let c = 0; c < currentGrid.size; c++) {\n            const cell = document.createElement('div');\n            cell.className = 'cell';\n            cell.textContent = currentGrid.cells[r][c] === 'ship' ? '🚢' : '🌊';\n            cell.classList.add(currentGrid.cells[r][c] === 'ship' ? 'ship' : 'sea');\n            gridDiv.appendChild(cell);\n        }\n\n        rowDiv.appendChild(gridDiv);\n\n        const rowReqDiv = document.createElement('div');\n        rowReqDiv.className = 'row-req';\n        rowReqDiv.textContent = currentGrid.rowRequirements[r];\n        rowDiv.appendChild(rowReqDiv);\n\n        boardRows.appendChild(rowDiv);\n    }\n}\n\nfunction resetGrid() {\n    if (currentGrid.size === 0) return;\n\n    for (let r = 0; r < currentGrid.size; r++) {\n        for (let c = 0; c < currentGrid.size; c++) {\n            currentGrid.cells[r][c] = 'sea';\n        }\n    }\n\n    renderGrid();\n    clearResults();\n    logToConsole('✅ تم إعادة تعيين الشبكة إلى الحالة الافتراضية (كلها بحر)');\n}\n\nasync function checkSolution() {\n    if (currentGrid.size === 0) {\n        alert('يرجى تحميل الشبكة أولاً');\n        return;\n    }\n\n    const loading = document.getElementById('loading');\n    const results = document.getElementById('results');\n    const log = document.getElementById('log');\n    const checkBtn = document.getElementById('check-btn');\n\n    results.style.display = 'none';\n    loading.style.display = 'block';\n    checkBtn.disabled = true;\n    clearInvalidHighlights();\n\n    try {\n        logToConsole('🔍 بدء التحقق من الحل...');\n\n        const gridData = currentGrid.cells.map(row => row.map(cell => cell === 'ship' ? 2 : 1));\n\n        const requestData = { grid: gridData };\n\n        const response = await fetch(API_ENDPOINTS.validate, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(requestData)\n        });\n\n        const validationResult = await response.json();\n\n        loading.style.display = 'none';\n        results.style.display = 'block';\n        log.innerHTML = '';\n\n        if (validationResult.valid) {\n            log.innerHTML = '<div class=\"log-entry success\">✅ الحل صحيح! جميع القواعد محققة.</div>';\n            logToConsole('✅ التحقق مكتمل: الحل صحيح');\n        } else {\n            log.innerHTML = `<div class=\"log-entry error\">❌ الحل غير صحيح:<br>${validationResult.message || 'خطأ في التكوين'}</div>`;\n            logToConsole('❌ التحقق مكتمل: الحل غير صحيح');\n\n            if (validationResult.invalid_cells && Array.isArray(validationResult.invalid_cells)) {\n                highlightInvalidCells(validationResult.invalid_cells);\n            }\n        }\n\n    } catch (error) {\n        loading.style.display = 'none';\n        results.style.display = 'block';\n        log.innerHTML = `<div class=\"log-entry error\">❌ خطأ أثناء التحقق: ${error.message}</div>`;\n        logToConsole('❌ خطأ أثناء التحقق: ' + error.message);\n    } finally {\n        checkBtn.disabled = false;\n    }\n}\n\nfunction highlightInvalidCells(invalidCells) {\n    const boardRows = document.getElementById('board-rows');\n    invalidCells.forEach(([r, c]) => {\n        const rowDiv = boardRows.children[r];\n        if (!rowDiv) return;\n\n        const gridDiv = rowDiv.querySelector('.grid');\n        if (!gridDiv) return;\n\n        const cell = gridDiv.children[c];\n        if (!cell) return;\n\n        cell.classList.add('invalid');\n    });\n}\n\nfunction clearInvalidHighlights() {\n    const cells = document.querySelectorAll('.cell.invalid');\n    cells.forEach(cell => cell.classList.remove('invalid'));\n}\n\nfunction clearResults() {\n    const results = document.getElementById('results');\n    const log = document.getElementById('log');\n    results.style.display = 'none';\n    log.innerHTML = '';\n    clearInvalidHighlights();\n}\n\nfunction logToConsole(text) {\n    const consoleEl = document.getElementById('console');\n    consoleEl.textContent += '\\n' + text;\n    consoleEl.scrollTop = consoleEl.scrollHeight;\n}\n\n\ndocument.getElementById('load-btn').addEventListener('click', async () => {\n    if (!(await checkServerStatus())) {\n        alert('لا يمكن الاتصال بالخادم. تحقق من تشغيل الخادم.');\n        return;\n    }\n    await loadGridFromServer();\n});\n\ndocument.getElementById('reset-btn').addEventListener('click', () => {\n    resetGrid();\n});\n\ndocument.getElementById('check-btn').addEventListener('click', async () => {\n    await checkSolution();\n});\n\n\nwindow.addEventListener('load', async () => {\n    if (await checkServerStatus()) {\n        await loadGridFromServer();\n    }\n});\n"
        }
    ]
}