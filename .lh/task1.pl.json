{
    "sourceFile": "task1.pl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752567991434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752568026804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,560 @@\n+% Sea Battle HTTP Server - Pure Prolog Solution\n+% ربط خادم HTTP مع البرولوغ مباشرة\n+\n+:- consult('facts.pl').\n+:- use_module(library(http/thread_httpd)).\n+:- use_module(library(http/http_dispatch)).\n+:- use_module(library(http/http_json)).\n+:- use_module(library(http/http_cors)).\n+:- use_module(library(http/http_parameters)).\n+:- use_module(library(http/http_files)).\n+\n+% تعريف المسارات\n+:- http_handler(root(.), serve_index, []).\n+:- http_handler(root(api/validate), validate_api, [method(post)]).\n+:- http_handler(root(api/grid), grid_api, [method(get)]).\n+:- http_handler(root(api/status), status_api, [method(get)]).\n+:- http_handler(root(static), serve_static, [prefix]).\n+\n+% بدء الخادم\n+start_server(Port) :-\n+    http_server(http_dispatch, [port(Port)]),\n+    format('🚢 Sea Battle Server started on http://localhost:~w~n', [Port]).\n+\n+% تشغيل الخادم على المنفذ 8080\n+start :- start_server(8080).\n+\n+% تقديم الصفحة الرئيسية\n+serve_index(_Request) :-\n+    reply_html_page(\n+        title('Sea Battle Validator'),\n+        [\n+            h1('🚢 Sea Battle Validator'),\n+            div(id='app', [\n+                div(class='grid-container', [\n+                    div(id='grid', []),\n+                    div(class='controls', [\n+                        button([onclick='checkSolution()', id='check-btn'], 'تحقق من الحل'),\n+                        div(id='loading', [style='display:none'], 'جاري التحقق...'),\n+                        div(id='results', [])\n+                    ])\n+                ])\n+            ]),\n+            script(src='/static/app.js')\n+        ]\n+    ).\n+\n+% تقديم الملفات الثابتة\n+serve_static(Request) :-\n+    member(path_info(Path), Request),\n+    atom_concat('/static', Path, FullPath),\n+    http_reply_file(FullPath, [], Request).\n+\n+% API للتحقق من صحة الحل\n+validate_api(Request) :-\n+    cors_enable_all(Request),\n+    method(Request, post),\n+    http_read_json(Request, JsonIn),\n+    process_validation_request(JsonIn, JsonOut),\n+    reply_json(JsonOut).\n+\n+% معالجة طلب التحقق\n+process_validation_request(json(Data), Result) :-\n+    (   get_dict(grid, Data, GridData)\n+    ->  update_grid_from_json(GridData),\n+        validate_solution_complete(Result)\n+    ;   Result = json([\n+            valid=false,\n+            error='Invalid request format',\n+            timestamp=Timestamp\n+        ])\n+    ),\n+    get_time(Timestamp).\n+\n+% تحديث الشبكة من البيانات المرسلة\n+update_grid_from_json(GridData) :-\n+    % تحديث بيانات الخلايا بناءً على البيانات المرسلة\n+    retractall(cell(_, _, _, _, _)),\n+    assert_grid_from_json(GridData, 1).\n+\n+assert_grid_from_json([], _).\n+assert_grid_from_json([Row|Rest], R) :-\n+    assert_row_from_json(Row, R, 1),\n+    R1 is R + 1,\n+    assert_grid_from_json(Rest, R1).\n+\n+assert_row_from_json([], _, _).\n+assert_row_from_json([Cell|Rest], R, C) :-\n+    (   Cell == 2\n+    ->  Type = ship\n+    ;   Type = sea\n+    ),\n+    assert(cell(R, C, Type, nil, nil)),\n+    C1 is C + 1,\n+    assert_row_from_json(Rest, R, C1).\n+\n+% API للحصول على بيانات الشبكة\n+grid_api(Request) :-\n+    cors_enable_all(Request),\n+    get_complete_grid_data(Result),\n+    reply_json(Result).\n+\n+% API للحصول على حالة الخادم\n+status_api(Request) :-\n+    cors_enable_all(Request),\n+    get_time(Timestamp),\n+    reply_json(json([\n+        status=online,\n+        timestamp=Timestamp,\n+        version='1.0'\n+    ])).\n+\n+% تمكين CORS لجميع الطلبات\n+cors_enable_all(Request) :-\n+    cors_enable(Request, [\n+        methods([get, post, options]),\n+        headers(['Content-Type', 'Authorization'])\n+    ]).\n+\n+% التحقق الكامل من الحل\n+validate_solution_complete(Result) :-\n+    get_time(Timestamp),\n+    (   validate_all_rules\n+    ->  Result = json([\n+            valid=true,\n+            message='الحل صحيح! جميع القواعد محققة.',\n+            details=Details,\n+            timestamp=Timestamp\n+        ])\n+    ;   collect_detailed_errors(Errors),\n+        Result = json([\n+            valid=false,\n+            message='الحل غير صحيح. يرجى مراجعة الأخطاء.',\n+            errors=Errors,\n+            timestamp=Timestamp\n+        ])\n+    ),\n+    get_validation_details(Details).\n+\n+% جمع الأخطاء التفصيلية\n+collect_detailed_errors(Errors) :-\n+    findall(Error, find_validation_error(Error), ErrorList),\n+    convert_errors_to_json(ErrorList, Errors).\n+\n+% تحويل الأخطاء إلى JSON\n+convert_errors_to_json([], []).\n+convert_errors_to_json([Error|Rest], [JsonError|JsonRest]) :-\n+    error_to_json(Error, JsonError),\n+    convert_errors_to_json(Rest, JsonRest).\n+\n+% تحويل خطأ واحد إلى JSON\n+error_to_json(error(row_count, Row, Expected, Actual), \n+              json([\n+                  type=row_count,\n+                  row=Row,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=high\n+              ])) :-\n+    format(atom(Message), 'الصف ~w: متوقع ~w خلايا سفن، موجود ~w', [Row, Expected, Actual]).\n+\n+error_to_json(error(col_count, Col, Expected, Actual), \n+              json([\n+                  type=col_count,\n+                  col=Col,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=high\n+              ])) :-\n+    format(atom(Message), 'العمود ~w: متوقع ~w خلايا سفن، موجود ~w', [Col, Expected, Actual]).\n+\n+error_to_json(error(ship_count, Length, Expected, Actual), \n+              json([\n+                  type=ship_count,\n+                  length=Length,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=critical\n+              ])) :-\n+    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n+\n+error_to_json(error(ship_isolation, R1, C1, R2, C2), \n+              json([\n+                  type=ship_isolation,\n+                  row1=R1,\n+                  col1=C1,\n+                  row2=R2,\n+                  col2=C2,\n+                  message=Message,\n+                  severity=medium\n+              ])) :-\n+    format(atom(Message), 'السفن تتلامس قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n+\n+% الحصول على بيانات الشبكة الكاملة\n+get_complete_grid_data(Result) :-\n+    grid(Size),\n+    get_grid_matrix(GridMatrix),\n+    get_requirements_data(RowReqs, ColReqs),\n+    get_ships_data(ShipsData),\n+    get_current_statistics(Stats),\n+    Result = json([\n+        size=Size,\n+        grid=GridMatrix,\n+        row_requirements=RowReqs,\n+        col_requirements=ColReqs,\n+        ships=ShipsData,\n+        statistics=Stats\n+    ]).\n+\n+% إنشاء مصفوفة الشبكة\n+get_grid_matrix(GridMatrix) :-\n+    grid(Size),\n+    build_grid_matrix(1, Size, GridMatrix).\n+\n+build_grid_matrix(R, MaxRows, []) :-\n+    R > MaxRows, !.\n+build_grid_matrix(R, MaxRows, [Row|Rest]) :-\n+    R =< MaxRows,\n+    build_row_matrix(R, 1, Row),\n+    R1 is R + 1,\n+    build_grid_matrix(R1, MaxRows, Rest).\n+\n+build_row_matrix(R, C, []) :-\n+    grid(MaxCols),\n+    C > MaxCols, !.\n+build_row_matrix(R, C, [json([type=Type, row=R, col=C])|Rest]) :-\n+    grid(MaxCols),\n+    C =< MaxCols,\n+    cell(R, C, Type, _, _),\n+    C1 is C + 1,\n+    build_row_matrix(R, C1, Rest).\n+\n+% الحصول على بيانات المتطلبات\n+get_requirements_data(RowReqs, ColReqs) :-\n+    grid(Size),\n+    build_requirements_list(row, 1, Size, RowReqs),\n+    build_requirements_list(col, 1, Size, ColReqs).\n+\n+build_requirements_list(Type, Index, MaxIndex, []) :-\n+    Index > MaxIndex, !.\n+build_requirements_list(Type, Index, MaxIndex, [Req|Rest]) :-\n+    Index =< MaxIndex,\n+    (   Type = row\n+    ->  row(Index, Count)\n+    ;   col(Index, Count)\n+    ),\n+    Req = json([index=Index, required=Count]),\n+    Index1 is Index + 1,\n+    build_requirements_list(Type, Index1, MaxIndex, Rest).\n+\n+% الحصول على بيانات السفن\n+get_ships_data(ShipsData) :-\n+    findall(json([length=Length, count=Count]), ship(Length, Count), ShipsData).\n+\n+% الحصول على الإحصائيات الحالية\n+get_current_statistics(Stats) :-\n+    count_total_ship_cells(TotalShips),\n+    count_total_sea_cells(TotalSea),\n+    grid(Size),\n+    TotalCells is Size * Size,\n+    Stats = json([\n+        total_cells=TotalCells,\n+        ship_cells=TotalShips,\n+        sea_cells=TotalSea,\n+        completion_percentage=Percentage\n+    ]),\n+    Percentage is (TotalShips + TotalSea) / TotalCells * 100.\n+\n+count_total_ship_cells(Count) :-\n+    findall(1, cell(_, _, ship, _, _), Ships),\n+    length(Ships, Count).\n+\n+count_total_sea_cells(Count) :-\n+    findall(1, cell(_, _, sea, _, _), Seas),\n+    length(Seas, Count).\n+\n+% الحصول على تفاصيل التحقق\n+get_validation_details(Details) :-\n+    validate_row_counts_details(RowDetails),\n+    validate_col_counts_details(ColDetails),\n+    validate_ship_counts_details(ShipDetails),\n+    Details = json([\n+        rows=RowDetails,\n+        columns=ColDetails,\n+        ships=ShipDetails\n+    ]).\n+\n+validate_row_counts_details(Details) :-\n+    findall(json([row=R, expected=Expected, actual=Actual, valid=Valid]), \n+           (row(R, Expected), count_ships_in_row(R, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+validate_col_counts_details(Details) :-\n+    findall(json([col=C, expected=Expected, actual=Actual, valid=Valid]), \n+           (col(C, Expected), count_ships_in_col(C, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+validate_ship_counts_details(Details) :-\n+    findall(json([length=Length, expected=Expected, actual=Actual, valid=Valid]), \n+           (ship(Length, Expected), count_ships_of_length(Length, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+% === القواعد الأساسية للتحقق (من الملف الأصلي) ===\n+\n+% التحقق من جميع القواعد\n+validate_all_rules :-\n+    validate_row_counts,\n+    validate_col_counts,\n+    validate_ship_counts,\n+    validate_ship_connectivity,\n+    validate_ship_isolation.\n+\n+% التحقق من عدد خلايا السفن في كل صف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    validate_all_rows(1, MaxRows).\n+\n+validate_all_rows(R, MaxRows) :-\n+    R > MaxRows, !.\n+validate_all_rows(R, MaxRows) :-\n+    R =< MaxRows,\n+    row(R, ExpectedCount),\n+    count_ships_in_row(R, ActualCount),\n+    ExpectedCount = ActualCount,\n+    R1 is R + 1,\n+    validate_all_rows(R1, MaxRows).\n+\n+% عد السفن في صف محدد\n+count_ships_in_row(Row, Count) :-\n+    count_ships_in_row_helper(Row, 1, 0, Count).\n+\n+count_ships_in_row_helper(Row, Col, Acc, Count) :-\n+    grid(MaxCols),\n+    Col > MaxCols, !,\n+    Count = Acc.\n+count_ships_in_row_helper(Row, Col, Acc, Count) :-\n+    Col =< MaxCols,\n+    (   cell(Row, Col, ship, _, _)\n+    ->  NewAcc is Acc + 1\n+    ;   NewAcc = Acc\n+    ),\n+    Col1 is Col + 1,\n+    count_ships_in_row_helper(Row, Col1, NewAcc, Count).\n+\n+% التحقق من عدد خلايا السفن في كل عمود\n+validate_col_counts :-\n+    grid(MaxCols),\n+    validate_all_cols(1, MaxCols).\n+\n+validate_all_cols(C, MaxCols) :-\n+    C > MaxCols, !.\n+validate_all_cols(C, MaxCols) :-\n+    C =< MaxCols,\n+    col(C, ExpectedCount),\n+    count_ships_in_col(C, ActualCount),\n+    ExpectedCount = ActualCount,\n+    C1 is C + 1,\n+    validate_all_cols(C1, MaxCols).\n+\n+% عد السفن في عمود محدد\n+count_ships_in_col(Col, Count) :-\n+    grid(MaxRows),\n+    count_ships_in_col_helper(1, Col, MaxRows, 0, Count).\n+\n+count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n+    Row > MaxRows, !,\n+    Count = Acc.\n+count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n+    Row =< MaxRows,\n+    (   cell(Row, Col, ship, _, _)\n+    ->  NewAcc is Acc + 1\n+    ;   NewAcc = Acc\n+    ),\n+    Row1 is Row + 1,\n+    count_ships_in_col_helper(Row1, Col, MaxRows, NewAcc, Count).\n+\n+% التحقق من عدد السفن بكل طول\n+validate_ship_counts :-\n+    forall(ship(Length, ExpectedCount), \n+           (count_ships_of_length(Length, ActualCount), \n+            ActualCount = ExpectedCount)).\n+\n+% عد السفن بطول محدد\n+count_ships_of_length(Length, Count) :-\n+    findall(Ship, find_ship_of_length(Length, Ship), Ships),\n+    length(Ships, Count).\n+\n+find_ship_of_length(Length, ship(R, C, Length)) :-\n+    cell(R, C, ship, _, _),\n+    \\+ has_ship_neighbor_left(R, C),\n+    \\+ has_ship_neighbor_up(R, C),\n+    get_ship_length_from_cell(R, C, Length).\n+\n+has_ship_neighbor_left(R, C) :-\n+    C > 1,\n+    C1 is C - 1,\n+    cell(R, C1, ship, _, _).\n+\n+has_ship_neighbor_up(R, C) :-\n+    R > 1,\n+    R1 is R - 1,\n+    cell(R1, C, ship, _, _).\n+\n+% الحصول على طول السفينة من خلية\n+get_ship_length_from_cell(R, C, Length) :-\n+    (   check_horizontal_ship_length(R, C, Length)\n+    ;   check_vertical_ship_length(R, C, Length)\n+    ).\n+\n+check_horizontal_ship_length(R, C, Length) :-\n+    count_horizontal_ship_cells(R, C, Length).\n+\n+count_horizontal_ship_cells(R, C, Length) :-\n+    count_horizontal_ship_cells_helper(R, C, 0, Length).\n+\n+count_horizontal_ship_cells_helper(R, C, Acc, Length) :-\n+    cell(R, C, ship, _, _), !,\n+    NewAcc is Acc + 1,\n+    C1 is C + 1,\n+    count_horizontal_ship_cells_helper(R, C1, NewAcc, Length).\n+count_horizontal_ship_cells_helper(_, _, Length, Length).\n+\n+check_vertical_ship_length(R, C, Length) :-\n+    count_vertical_ship_cells(R, C, Length).\n+\n+count_vertical_ship_cells(R, C, Length) :-\n+    count_vertical_ship_cells_helper(R, C, 0, Length).\n+\n+count_vertical_ship_cells_helper(R, C, Acc, Length) :-\n+    cell(R, C, ship, _, _), !,\n+    NewAcc is Acc + 1,\n+    R1 is R + 1,\n+    count_vertical_ship_cells_helper(R1, C, NewAcc, Length).\n+count_vertical_ship_cells_helper(_, _, Length, Length).\n+\n+% التحقق من اتصال السفن\n+validate_ship_connectivity :-\n+    forall(find_ship_start(R, C), validate_ship_shape(R, C)).\n+\n+find_ship_start(R, C) :-\n+    cell(R, C, ship, _, _),\n+    \\+ has_ship_neighbor_left(R, C),\n+    \\+ has_ship_neighbor_up(R, C).\n+\n+validate_ship_shape(R, C) :-\n+    get_ship_length_from_cell(R, C, Length),\n+    (   Length = 1\n+    ->  true\n+    ;   validate_ship_linearity(R, C, Length)\n+    ).\n+\n+validate_ship_linearity(R, C, Length) :-\n+    (   check_horizontal_ship_continuity(R, C, Length)\n+    ;   check_vertical_ship_continuity(R, C, Length)\n+    ).\n+\n+check_horizontal_ship_continuity(R, C, Length) :-\n+    check_horizontal_continuity_helper(R, C, Length).\n+\n+check_horizontal_continuity_helper(R, C, 0) :- !.\n+check_horizontal_continuity_helper(R, C, Length) :-\n+    Length > 0,\n+    cell(R, C, ship, _, _),\n+    Length1 is Length - 1,\n+    C1 is C + 1,\n+    check_horizontal_continuity_helper(R, C1, Length1).\n+\n+check_vertical_ship_continuity(R, C, Length) :-\n+    check_vertical_continuity_helper(R, C, Length).\n+\n+check_vertical_continuity_helper(R, C, 0) :- !.\n+check_vertical_continuity_helper(R, C, Length) :-\n+    Length > 0,\n+    cell(R, C, ship, _, _),\n+    Length1 is Length - 1,\n+    R1 is R + 1,\n+    check_vertical_continuity_helper(R1, C, Length1).\n+\n+% التحقق من عزل السفن\n+validate_ship_isolation :-\n+    \\+ ships_touching_diagonally.\n+\n+ships_touching_diagonally :-\n+    cell(R1, C1, ship, _, _),\n+    cell(R2, C2, ship, _, _),\n+    \\+ same_ship(R1, C1, R2, C2),\n+    adjacent_diagonal(R1, C1, R2, C2).\n+\n+same_ship(R1, C1, R2, C2) :-\n+    connected_ship_cells(R1, C1, R2, C2).\n+\n+connected_ship_cells(R, C, R, C) :- !.\n+connected_ship_cells(R1, C1, R2, C2) :-\n+    adjacent_orthogonal(R1, C1, NR, NC),\n+    cell(NR, NC, ship, _, _),\n+    connected_ship_cells(NR, NC, R2, C2).\n+\n+adjacent_orthogonal(R1, C1, R2, C2) :-\n+    (   (R1 = R2, abs(C1 - C2) =:= 1)\n+    ;   (C1 = C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+adjacent_diagonal(R1, C1, R2, C2) :-\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% البحث عن الأخطاء\n+find_validation_error(error(row_count, R, Expected, Actual)) :-\n+    row(R, Expected),\n+    count_ships_in_row(R, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(col_count, C, Expected, Actual)) :-\n+    col(C, Expected),\n+    count_ships_in_col(C, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(ship_count, Length, Expected, Actual)) :-\n+    ship(Length, Expected),\n+    count_ships_of_length(Length, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(ship_isolation, R1, C1, R2, C2)) :-\n+    cell(R1, C1, ship, _, _),\n+    cell(R2, C2, ship, _, _),\n+    \\+ same_ship(R1, C1, R2, C2),\n+    adjacent_diagonal(R1, C1, R2, C2).\n+\n+% === أوامر التشغيل ===\n+\n+% تشغيل التحقق المباشر\n+check_solution :-\n+    format('=== Sea Battle Solution Validator ===~n~n'),\n+    (   validate_all_rules\n+    ->  format('✓ الحل صحيح!~n')\n+    ;   format('✗ الحل غير صحيح!~n'),\n+        forall(find_validation_error(Error), \n+               (error_to_message(Error, Message), \n+                format('  - ~w~n', [Message])))\n+    ).\n+\n+error_to_message(error(row_count, R, Expected, Actual), Message) :-\n+    format(atom(Message), 'الصف ~w: متوقع ~w، موجود ~w', [R, Expected, Actual]).\n+\n+error_to_message(error(col_count, C, Expected, Actual), Message) :-\n+    format(atom(Message), 'العمود ~w: متوقع ~w، موجود ~w', [C, Expected, Actual]).\n+\n+error_to_message(error(ship_count, Length, Expected, Actual), Message) :-\n+    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n+\n+error_to_message(error(ship_isolation, R1, C1, R2, C2), Message) :-\n+    format(atom(Message), 'سفن متلامسة قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n+\n+% بدء الخادم تلقائياً\n+:- initialization(start).\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752568105642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,560 @@\n+% Sea Battle HTTP Server - Pure Prolog Solution\n+% ربط خادم HTTP مع البرولوغ مباشرة\n+\n+:- consult('facts.pl').\n+:- use_module(library(http/thread_httpd)).\n+:- use_module(library(http/http_dispatch)).\n+:- use_module(library(http/http_json)).\n+:- use_module(library(http/http_cors)).\n+:- use_module(library(http/http_parameters)).\n+:- use_module(library(http/http_files)).\n+\n+% تعريف المسارات\n+:- http_handler(root(.), serve_index, []).\n+:- http_handler(root(api/validate), validate_api, [method(post)]).\n+:- http_handler(root(api/grid), grid_api, [method(get)]).\n+:- http_handler(root(api/status), status_api, [method(get)]).\n+:- http_handler(root(static), serve_static, [prefix]).\n+\n+% بدء الخادم\n+start_server(Port) :-\n+    http_server(http_dispatch, [port(Port)]),\n+    format('🚢 Sea Battle Server started on http://localhost:~w~n', [Port]).\n+\n+% تشغيل الخادم على المنفذ 8080\n+start :- start_server(8080).\n+\n+% تقديم الصفحة الرئيسية\n+serve_index(_Request) :-\n+    reply_html_page(\n+        title('Sea Battle Validator'),\n+        [\n+            h1('🚢 Sea Battle Validator'),\n+            div(id='app', [\n+                div(class='grid-container', [\n+                    div(id='grid', []),\n+                    div(class='controls', [\n+                        button([onclick='checkSolution()', id='check-btn'], 'تحقق من الحل'),\n+                        div(id='loading', [style='display:none'], 'جاري التحقق...'),\n+                        div(id='results', [])\n+                    ])\n+                ])\n+            ]),\n+            script(src='./s')\n+        ]\n+    ).\n+\n+% تقديم الملفات الثابتة\n+serve_static(Request) :-\n+    member(path_info(Path), Request),\n+    atom_concat('/static', Path, FullPath),\n+    http_reply_file(FullPath, [], Request).\n+\n+% API للتحقق من صحة الحل\n+validate_api(Request) :-\n+    cors_enable_all(Request),\n+    method(Request, post),\n+    http_read_json(Request, JsonIn),\n+    process_validation_request(JsonIn, JsonOut),\n+    reply_json(JsonOut).\n+\n+% معالجة طلب التحقق\n+process_validation_request(json(Data), Result) :-\n+    (   get_dict(grid, Data, GridData)\n+    ->  update_grid_from_json(GridData),\n+        validate_solution_complete(Result)\n+    ;   Result = json([\n+            valid=false,\n+            error='Invalid request format',\n+            timestamp=Timestamp\n+        ])\n+    ),\n+    get_time(Timestamp).\n+\n+% تحديث الشبكة من البيانات المرسلة\n+update_grid_from_json(GridData) :-\n+    % تحديث بيانات الخلايا بناءً على البيانات المرسلة\n+    retractall(cell(_, _, _, _, _)),\n+    assert_grid_from_json(GridData, 1).\n+\n+assert_grid_from_json([], _).\n+assert_grid_from_json([Row|Rest], R) :-\n+    assert_row_from_json(Row, R, 1),\n+    R1 is R + 1,\n+    assert_grid_from_json(Rest, R1).\n+\n+assert_row_from_json([], _, _).\n+assert_row_from_json([Cell|Rest], R, C) :-\n+    (   Cell == 2\n+    ->  Type = ship\n+    ;   Type = sea\n+    ),\n+    assert(cell(R, C, Type, nil, nil)),\n+    C1 is C + 1,\n+    assert_row_from_json(Rest, R, C1).\n+\n+% API للحصول على بيانات الشبكة\n+grid_api(Request) :-\n+    cors_enable_all(Request),\n+    get_complete_grid_data(Result),\n+    reply_json(Result).\n+\n+% API للحصول على حالة الخادم\n+status_api(Request) :-\n+    cors_enable_all(Request),\n+    get_time(Timestamp),\n+    reply_json(json([\n+        status=online,\n+        timestamp=Timestamp,\n+        version='1.0'\n+    ])).\n+\n+% تمكين CORS لجميع الطلبات\n+cors_enable_all(Request) :-\n+    cors_enable(Request, [\n+        methods([get, post, options]),\n+        headers(['Content-Type', 'Authorization'])\n+    ]).\n+\n+% التحقق الكامل من الحل\n+validate_solution_complete(Result) :-\n+    get_time(Timestamp),\n+    (   validate_all_rules\n+    ->  Result = json([\n+            valid=true,\n+            message='الحل صحيح! جميع القواعد محققة.',\n+            details=Details,\n+            timestamp=Timestamp\n+        ])\n+    ;   collect_detailed_errors(Errors),\n+        Result = json([\n+            valid=false,\n+            message='الحل غير صحيح. يرجى مراجعة الأخطاء.',\n+            errors=Errors,\n+            timestamp=Timestamp\n+        ])\n+    ),\n+    get_validation_details(Details).\n+\n+% جمع الأخطاء التفصيلية\n+collect_detailed_errors(Errors) :-\n+    findall(Error, find_validation_error(Error), ErrorList),\n+    convert_errors_to_json(ErrorList, Errors).\n+\n+% تحويل الأخطاء إلى JSON\n+convert_errors_to_json([], []).\n+convert_errors_to_json([Error|Rest], [JsonError|JsonRest]) :-\n+    error_to_json(Error, JsonError),\n+    convert_errors_to_json(Rest, JsonRest).\n+\n+% تحويل خطأ واحد إلى JSON\n+error_to_json(error(row_count, Row, Expected, Actual), \n+              json([\n+                  type=row_count,\n+                  row=Row,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=high\n+              ])) :-\n+    format(atom(Message), 'الصف ~w: متوقع ~w خلايا سفن، موجود ~w', [Row, Expected, Actual]).\n+\n+error_to_json(error(col_count, Col, Expected, Actual), \n+              json([\n+                  type=col_count,\n+                  col=Col,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=high\n+              ])) :-\n+    format(atom(Message), 'العمود ~w: متوقع ~w خلايا سفن، موجود ~w', [Col, Expected, Actual]).\n+\n+error_to_json(error(ship_count, Length, Expected, Actual), \n+              json([\n+                  type=ship_count,\n+                  length=Length,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=critical\n+              ])) :-\n+    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n+\n+error_to_json(error(ship_isolation, R1, C1, R2, C2), \n+              json([\n+                  type=ship_isolation,\n+                  row1=R1,\n+                  col1=C1,\n+                  row2=R2,\n+                  col2=C2,\n+                  message=Message,\n+                  severity=medium\n+              ])) :-\n+    format(atom(Message), 'السفن تتلامس قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n+\n+% الحصول على بيانات الشبكة الكاملة\n+get_complete_grid_data(Result) :-\n+    grid(Size),\n+    get_grid_matrix(GridMatrix),\n+    get_requirements_data(RowReqs, ColReqs),\n+    get_ships_data(ShipsData),\n+    get_current_statistics(Stats),\n+    Result = json([\n+        size=Size,\n+        grid=GridMatrix,\n+        row_requirements=RowReqs,\n+        col_requirements=ColReqs,\n+        ships=ShipsData,\n+        statistics=Stats\n+    ]).\n+\n+% إنشاء مصفوفة الشبكة\n+get_grid_matrix(GridMatrix) :-\n+    grid(Size),\n+    build_grid_matrix(1, Size, GridMatrix).\n+\n+build_grid_matrix(R, MaxRows, []) :-\n+    R > MaxRows, !.\n+build_grid_matrix(R, MaxRows, [Row|Rest]) :-\n+    R =< MaxRows,\n+    build_row_matrix(R, 1, Row),\n+    R1 is R + 1,\n+    build_grid_matrix(R1, MaxRows, Rest).\n+\n+build_row_matrix(R, C, []) :-\n+    grid(MaxCols),\n+    C > MaxCols, !.\n+build_row_matrix(R, C, [json([type=Type, row=R, col=C])|Rest]) :-\n+    grid(MaxCols),\n+    C =< MaxCols,\n+    cell(R, C, Type, _, _),\n+    C1 is C + 1,\n+    build_row_matrix(R, C1, Rest).\n+\n+% الحصول على بيانات المتطلبات\n+get_requirements_data(RowReqs, ColReqs) :-\n+    grid(Size),\n+    build_requirements_list(row, 1, Size, RowReqs),\n+    build_requirements_list(col, 1, Size, ColReqs).\n+\n+build_requirements_list(Type, Index, MaxIndex, []) :-\n+    Index > MaxIndex, !.\n+build_requirements_list(Type, Index, MaxIndex, [Req|Rest]) :-\n+    Index =< MaxIndex,\n+    (   Type = row\n+    ->  row(Index, Count)\n+    ;   col(Index, Count)\n+    ),\n+    Req = json([index=Index, required=Count]),\n+    Index1 is Index + 1,\n+    build_requirements_list(Type, Index1, MaxIndex, Rest).\n+\n+% الحصول على بيانات السفن\n+get_ships_data(ShipsData) :-\n+    findall(json([length=Length, count=Count]), ship(Length, Count), ShipsData).\n+\n+% الحصول على الإحصائيات الحالية\n+get_current_statistics(Stats) :-\n+    count_total_ship_cells(TotalShips),\n+    count_total_sea_cells(TotalSea),\n+    grid(Size),\n+    TotalCells is Size * Size,\n+    Stats = json([\n+        total_cells=TotalCells,\n+        ship_cells=TotalShips,\n+        sea_cells=TotalSea,\n+        completion_percentage=Percentage\n+    ]),\n+    Percentage is (TotalShips + TotalSea) / TotalCells * 100.\n+\n+count_total_ship_cells(Count) :-\n+    findall(1, cell(_, _, ship, _, _), Ships),\n+    length(Ships, Count).\n+\n+count_total_sea_cells(Count) :-\n+    findall(1, cell(_, _, sea, _, _), Seas),\n+    length(Seas, Count).\n+\n+% الحصول على تفاصيل التحقق\n+get_validation_details(Details) :-\n+    validate_row_counts_details(RowDetails),\n+    validate_col_counts_details(ColDetails),\n+    validate_ship_counts_details(ShipDetails),\n+    Details = json([\n+        rows=RowDetails,\n+        columns=ColDetails,\n+        ships=ShipDetails\n+    ]).\n+\n+validate_row_counts_details(Details) :-\n+    findall(json([row=R, expected=Expected, actual=Actual, valid=Valid]), \n+           (row(R, Expected), count_ships_in_row(R, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+validate_col_counts_details(Details) :-\n+    findall(json([col=C, expected=Expected, actual=Actual, valid=Valid]), \n+           (col(C, Expected), count_ships_in_col(C, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+validate_ship_counts_details(Details) :-\n+    findall(json([length=Length, expected=Expected, actual=Actual, valid=Valid]), \n+           (ship(Length, Expected), count_ships_of_length(Length, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+% === القواعد الأساسية للتحقق (من الملف الأصلي) ===\n+\n+% التحقق من جميع القواعد\n+validate_all_rules :-\n+    validate_row_counts,\n+    validate_col_counts,\n+    validate_ship_counts,\n+    validate_ship_connectivity,\n+    validate_ship_isolation.\n+\n+% التحقق من عدد خلايا السفن في كل صف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    validate_all_rows(1, MaxRows).\n+\n+validate_all_rows(R, MaxRows) :-\n+    R > MaxRows, !.\n+validate_all_rows(R, MaxRows) :-\n+    R =< MaxRows,\n+    row(R, ExpectedCount),\n+    count_ships_in_row(R, ActualCount),\n+    ExpectedCount = ActualCount,\n+    R1 is R + 1,\n+    validate_all_rows(R1, MaxRows).\n+\n+% عد السفن في صف محدد\n+count_ships_in_row(Row, Count) :-\n+    count_ships_in_row_helper(Row, 1, 0, Count).\n+\n+count_ships_in_row_helper(Row, Col, Acc, Count) :-\n+    grid(MaxCols),\n+    Col > MaxCols, !,\n+    Count = Acc.\n+count_ships_in_row_helper(Row, Col, Acc, Count) :-\n+    Col =< MaxCols,\n+    (   cell(Row, Col, ship, _, _)\n+    ->  NewAcc is Acc + 1\n+    ;   NewAcc = Acc\n+    ),\n+    Col1 is Col + 1,\n+    count_ships_in_row_helper(Row, Col1, NewAcc, Count).\n+\n+% التحقق من عدد خلايا السفن في كل عمود\n+validate_col_counts :-\n+    grid(MaxCols),\n+    validate_all_cols(1, MaxCols).\n+\n+validate_all_cols(C, MaxCols) :-\n+    C > MaxCols, !.\n+validate_all_cols(C, MaxCols) :-\n+    C =< MaxCols,\n+    col(C, ExpectedCount),\n+    count_ships_in_col(C, ActualCount),\n+    ExpectedCount = ActualCount,\n+    C1 is C + 1,\n+    validate_all_cols(C1, MaxCols).\n+\n+% عد السفن في عمود محدد\n+count_ships_in_col(Col, Count) :-\n+    grid(MaxRows),\n+    count_ships_in_col_helper(1, Col, MaxRows, 0, Count).\n+\n+count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n+    Row > MaxRows, !,\n+    Count = Acc.\n+count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n+    Row =< MaxRows,\n+    (   cell(Row, Col, ship, _, _)\n+    ->  NewAcc is Acc + 1\n+    ;   NewAcc = Acc\n+    ),\n+    Row1 is Row + 1,\n+    count_ships_in_col_helper(Row1, Col, MaxRows, NewAcc, Count).\n+\n+% التحقق من عدد السفن بكل طول\n+validate_ship_counts :-\n+    forall(ship(Length, ExpectedCount), \n+           (count_ships_of_length(Length, ActualCount), \n+            ActualCount = ExpectedCount)).\n+\n+% عد السفن بطول محدد\n+count_ships_of_length(Length, Count) :-\n+    findall(Ship, find_ship_of_length(Length, Ship), Ships),\n+    length(Ships, Count).\n+\n+find_ship_of_length(Length, ship(R, C, Length)) :-\n+    cell(R, C, ship, _, _),\n+    \\+ has_ship_neighbor_left(R, C),\n+    \\+ has_ship_neighbor_up(R, C),\n+    get_ship_length_from_cell(R, C, Length).\n+\n+has_ship_neighbor_left(R, C) :-\n+    C > 1,\n+    C1 is C - 1,\n+    cell(R, C1, ship, _, _).\n+\n+has_ship_neighbor_up(R, C) :-\n+    R > 1,\n+    R1 is R - 1,\n+    cell(R1, C, ship, _, _).\n+\n+% الحصول على طول السفينة من خلية\n+get_ship_length_from_cell(R, C, Length) :-\n+    (   check_horizontal_ship_length(R, C, Length)\n+    ;   check_vertical_ship_length(R, C, Length)\n+    ).\n+\n+check_horizontal_ship_length(R, C, Length) :-\n+    count_horizontal_ship_cells(R, C, Length).\n+\n+count_horizontal_ship_cells(R, C, Length) :-\n+    count_horizontal_ship_cells_helper(R, C, 0, Length).\n+\n+count_horizontal_ship_cells_helper(R, C, Acc, Length) :-\n+    cell(R, C, ship, _, _), !,\n+    NewAcc is Acc + 1,\n+    C1 is C + 1,\n+    count_horizontal_ship_cells_helper(R, C1, NewAcc, Length).\n+count_horizontal_ship_cells_helper(_, _, Length, Length).\n+\n+check_vertical_ship_length(R, C, Length) :-\n+    count_vertical_ship_cells(R, C, Length).\n+\n+count_vertical_ship_cells(R, C, Length) :-\n+    count_vertical_ship_cells_helper(R, C, 0, Length).\n+\n+count_vertical_ship_cells_helper(R, C, Acc, Length) :-\n+    cell(R, C, ship, _, _), !,\n+    NewAcc is Acc + 1,\n+    R1 is R + 1,\n+    count_vertical_ship_cells_helper(R1, C, NewAcc, Length).\n+count_vertical_ship_cells_helper(_, _, Length, Length).\n+\n+% التحقق من اتصال السفن\n+validate_ship_connectivity :-\n+    forall(find_ship_start(R, C), validate_ship_shape(R, C)).\n+\n+find_ship_start(R, C) :-\n+    cell(R, C, ship, _, _),\n+    \\+ has_ship_neighbor_left(R, C),\n+    \\+ has_ship_neighbor_up(R, C).\n+\n+validate_ship_shape(R, C) :-\n+    get_ship_length_from_cell(R, C, Length),\n+    (   Length = 1\n+    ->  true\n+    ;   validate_ship_linearity(R, C, Length)\n+    ).\n+\n+validate_ship_linearity(R, C, Length) :-\n+    (   check_horizontal_ship_continuity(R, C, Length)\n+    ;   check_vertical_ship_continuity(R, C, Length)\n+    ).\n+\n+check_horizontal_ship_continuity(R, C, Length) :-\n+    check_horizontal_continuity_helper(R, C, Length).\n+\n+check_horizontal_continuity_helper(R, C, 0) :- !.\n+check_horizontal_continuity_helper(R, C, Length) :-\n+    Length > 0,\n+    cell(R, C, ship, _, _),\n+    Length1 is Length - 1,\n+    C1 is C + 1,\n+    check_horizontal_continuity_helper(R, C1, Length1).\n+\n+check_vertical_ship_continuity(R, C, Length) :-\n+    check_vertical_continuity_helper(R, C, Length).\n+\n+check_vertical_continuity_helper(R, C, 0) :- !.\n+check_vertical_continuity_helper(R, C, Length) :-\n+    Length > 0,\n+    cell(R, C, ship, _, _),\n+    Length1 is Length - 1,\n+    R1 is R + 1,\n+    check_vertical_continuity_helper(R1, C, Length1).\n+\n+% التحقق من عزل السفن\n+validate_ship_isolation :-\n+    \\+ ships_touching_diagonally.\n+\n+ships_touching_diagonally :-\n+    cell(R1, C1, ship, _, _),\n+    cell(R2, C2, ship, _, _),\n+    \\+ same_ship(R1, C1, R2, C2),\n+    adjacent_diagonal(R1, C1, R2, C2).\n+\n+same_ship(R1, C1, R2, C2) :-\n+    connected_ship_cells(R1, C1, R2, C2).\n+\n+connected_ship_cells(R, C, R, C) :- !.\n+connected_ship_cells(R1, C1, R2, C2) :-\n+    adjacent_orthogonal(R1, C1, NR, NC),\n+    cell(NR, NC, ship, _, _),\n+    connected_ship_cells(NR, NC, R2, C2).\n+\n+adjacent_orthogonal(R1, C1, R2, C2) :-\n+    (   (R1 = R2, abs(C1 - C2) =:= 1)\n+    ;   (C1 = C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+adjacent_diagonal(R1, C1, R2, C2) :-\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% البحث عن الأخطاء\n+find_validation_error(error(row_count, R, Expected, Actual)) :-\n+    row(R, Expected),\n+    count_ships_in_row(R, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(col_count, C, Expected, Actual)) :-\n+    col(C, Expected),\n+    count_ships_in_col(C, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(ship_count, Length, Expected, Actual)) :-\n+    ship(Length, Expected),\n+    count_ships_of_length(Length, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(ship_isolation, R1, C1, R2, C2)) :-\n+    cell(R1, C1, ship, _, _),\n+    cell(R2, C2, ship, _, _),\n+    \\+ same_ship(R1, C1, R2, C2),\n+    adjacent_diagonal(R1, C1, R2, C2).\n+\n+% === أوامر التشغيل ===\n+\n+% تشغيل التحقق المباشر\n+check_solution :-\n+    format('=== Sea Battle Solution Validator ===~n~n'),\n+    (   validate_all_rules\n+    ->  format('✓ الحل صحيح!~n')\n+    ;   format('✗ الحل غير صحيح!~n'),\n+        forall(find_validation_error(Error), \n+               (error_to_message(Error, Message), \n+                format('  - ~w~n', [Message])))\n+    ).\n+\n+error_to_message(error(row_count, R, Expected, Actual), Message) :-\n+    format(atom(Message), 'الصف ~w: متوقع ~w، موجود ~w', [R, Expected, Actual]).\n+\n+error_to_message(error(col_count, C, Expected, Actual), Message) :-\n+    format(atom(Message), 'العمود ~w: متوقع ~w، موجود ~w', [C, Expected, Actual]).\n+\n+error_to_message(error(ship_count, Length, Expected, Actual), Message) :-\n+    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n+\n+error_to_message(error(ship_isolation, R1, C1, R2, C2), Message) :-\n+    format(atom(Message), 'سفن متلامسة قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n+\n+% بدء الخادم تلقائياً\n+:- initialization(start).\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752568481936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,120 @@\n-% Sea Battle HTTP Server - Pure Prolog Solution\n-% ربط خادم HTTP مع البرولوغ مباشرة\n+% sea_battle_server.pl\n+% سيرفر HTTP متكامل للعبة Sea Battle مع دعم CORS\n \n-:- consult('facts.pl').\n+:- consult('facts.pl').  % ملف الحقائق (grid, cell, row, col, ship, ...)\n+\n :- use_module(library(http/thread_httpd)).\n :- use_module(library(http/http_dispatch)).\n :- use_module(library(http/http_json)).\n :- use_module(library(http/http_cors)).\n :- use_module(library(http/http_parameters)).\n :- use_module(library(http/http_files)).\n \n-% تعريف المسارات\n+% تعريف مسارات API\n :- http_handler(root(.), serve_index, []).\n :- http_handler(root(api/validate), validate_api, [method(post)]).\n :- http_handler(root(api/grid), grid_api, [method(get)]).\n :- http_handler(root(api/status), status_api, [method(get)]).\n+% مسار ثابت للملفات (مثل script.js و styles.css) داخل مجلد static/\n :- http_handler(root(static), serve_static, [prefix]).\n \n-% بدء الخادم\n+% تفعيل CORS للطلبات OPTIONS تلقائياً لكل المسارات\n+:- multifile http:options/2.\n+http:options(Request, Options) :-\n+    memberchk(path_info(Path), Request),\n+    memberchk(method(options), Request),\n+    (   sub_atom(Path, 0, _, _, 'api/')\n+    ->  cors_enable(Request, [methods([get,post,options]), headers(['Content-Type', 'Authorization'])]),\n+        Options = []\n+    ;   Options = []\n+    ).\n+\n+% بدء الخادم مع reuse_address true لتجنب مشكلة المنفذ المحجوز\n start_server(Port) :-\n-    http_server(http_dispatch, [port(Port)]),\n+    http_server(http_dispatch, [port(Port), reuse_address(true)]),\n     format('🚢 Sea Battle Server started on http://localhost:~w~n', [Port]).\n \n-% تشغيل الخادم على المنفذ 8080\n start :- start_server(8080).\n \n-% تقديم الصفحة الرئيسية\n+% تقديم الصفحة الرئيسية HTML\n serve_index(_Request) :-\n     reply_html_page(\n-        title('Sea Battle Validator'),\n+        title('مدقق معركة البحر'),\n         [\n-            h1('🚢 Sea Battle Validator'),\n+            \\html_requires(css('styles.css')),\n+            h1('🚢 مدقق معركة البحر'),\n             div(id='app', [\n-                div(class='grid-container', [\n-                    div(id='grid', []),\n-                    div(class='controls', [\n-                        button([onclick='checkSolution()', id='check-btn'], 'تحقق من الحل'),\n-                        div(id='loading', [style='display:none'], 'جاري التحقق...'),\n-                        div(id='results', [])\n-                    ])\n-                ])\n+                div(class='game-board', [\n+                    div(class='requirements-top', id='requirements-top'),\n+                    div(class='board-rows', id='board-rows')\n+                ]),\n+                div(class='controls', [\n+                    button([class('btn check-btn'), id('check-btn')], '🔍 تحقق من الحل'),\n+                    button([class('btn load-btn'), id('load-btn')], '📥 تحميل البيانات'),\n+                    button([class('btn reset-btn'), id('reset-btn')], '🔄 إعادة تعيين')\n+                ]),\n+                div(class('loading'), id('loading'), [style('display:none')], [\n+                    div(class('spinner')),\n+                    p('جاري التحقق من الحل...')\n+                ]),\n+                div(class('results'), id('results'), [style('display:none')], [\n+                    h3('📊 نتائج التحقق:'),\n+                    div(id('log'))\n+                ]),\n+                div(class('console-output'), id('console'), '=== Sea Battle Solution Validator ===\\n=== Prolog Backend Integration ===')\n             ]),\n-            script(src='./script.js')\n+            script(src('./static/script.js'))\n         ]\n     ).\n \n-% تقديم الملفات الثابتة\n+% تقديم الملفات الثابتة (js, css ...)\n serve_static(Request) :-\n     member(path_info(Path), Request),\n-    atom_concat('/static', Path, FullPath),\n-    http_reply_file(FullPath, [], Request).\n+    atom_concat('static', Path, FilePath),\n+    http_reply_file(FilePath, [], Request).\n \n-% API للتحقق من صحة الحل\n+% تمكين CORS لكل طلب API\n+cors_enable_all(Request) :-\n+    cors_enable(Request, [methods([get, post, options]), headers(['Content-Type', 'Authorization'])]).\n+\n+% API حالة الخادم\n+status_api(Request) :-\n+    cors_enable_all(Request),\n+    get_time(Timestamp),\n+    reply_json(json([\n+        status=online,\n+        timestamp=Timestamp,\n+        version='1.0'\n+    ])).\n+\n+% API تحميل بيانات الشبكة كاملة\n+grid_api(Request) :-\n+    cors_enable_all(Request),\n+    get_complete_grid_data(Result),\n+    reply_json(Result).\n+\n+% API تحقق من الحل (POST)\n validate_api(Request) :-\n     cors_enable_all(Request),\n     method(Request, post),\n     http_read_json(Request, JsonIn),\n     process_validation_request(JsonIn, JsonOut),\n     reply_json(JsonOut).\n \n-% معالجة طلب التحقق\n process_validation_request(json(Data), Result) :-\n     (   get_dict(grid, Data, GridData)\n     ->  update_grid_from_json(GridData),\n         validate_solution_complete(Result)\n-    ;   Result = json([\n+    ;   get_time(Timestamp),\n+        Result = json([\n             valid=false,\n             error='Invalid request format',\n             timestamp=Timestamp\n         ])\n-    ),\n-    get_time(Timestamp).\n+    ).\n \n-% تحديث الشبكة من البيانات المرسلة\n update_grid_from_json(GridData) :-\n-    % تحديث بيانات الخلايا بناءً على البيانات المرسلة\n     retractall(cell(_, _, _, _, _)),\n     assert_grid_from_json(GridData, 1).\n \n assert_grid_from_json([], _).\n@@ -92,109 +132,9 @@\n     assert(cell(R, C, Type, nil, nil)),\n     C1 is C + 1,\n     assert_row_from_json(Rest, R, C1).\n \n-% API للحصول على بيانات الشبكة\n-grid_api(Request) :-\n-    cors_enable_all(Request),\n-    get_complete_grid_data(Result),\n-    reply_json(Result).\n-\n-% API للحصول على حالة الخادم\n-status_api(Request) :-\n-    cors_enable_all(Request),\n-    get_time(Timestamp),\n-    reply_json(json([\n-        status=online,\n-        timestamp=Timestamp,\n-        version='1.0'\n-    ])).\n-\n-% تمكين CORS لجميع الطلبات\n-cors_enable_all(Request) :-\n-    cors_enable(Request, [\n-        methods([get, post, options]),\n-        headers(['Content-Type', 'Authorization'])\n-    ]).\n-\n-% التحقق الكامل من الحل\n-validate_solution_complete(Result) :-\n-    get_time(Timestamp),\n-    (   validate_all_rules\n-    ->  Result = json([\n-            valid=true,\n-            message='الحل صحيح! جميع القواعد محققة.',\n-            details=Details,\n-            timestamp=Timestamp\n-        ])\n-    ;   collect_detailed_errors(Errors),\n-        Result = json([\n-            valid=false,\n-            message='الحل غير صحيح. يرجى مراجعة الأخطاء.',\n-            errors=Errors,\n-            timestamp=Timestamp\n-        ])\n-    ),\n-    get_validation_details(Details).\n-\n-% جمع الأخطاء التفصيلية\n-collect_detailed_errors(Errors) :-\n-    findall(Error, find_validation_error(Error), ErrorList),\n-    convert_errors_to_json(ErrorList, Errors).\n-\n-% تحويل الأخطاء إلى JSON\n-convert_errors_to_json([], []).\n-convert_errors_to_json([Error|Rest], [JsonError|JsonRest]) :-\n-    error_to_json(Error, JsonError),\n-    convert_errors_to_json(Rest, JsonRest).\n-\n-% تحويل خطأ واحد إلى JSON\n-error_to_json(error(row_count, Row, Expected, Actual), \n-              json([\n-                  type=row_count,\n-                  row=Row,\n-                  expected=Expected,\n-                  actual=Actual,\n-                  message=Message,\n-                  severity=high\n-              ])) :-\n-    format(atom(Message), 'الصف ~w: متوقع ~w خلايا سفن، موجود ~w', [Row, Expected, Actual]).\n-\n-error_to_json(error(col_count, Col, Expected, Actual), \n-              json([\n-                  type=col_count,\n-                  col=Col,\n-                  expected=Expected,\n-                  actual=Actual,\n-                  message=Message,\n-                  severity=high\n-              ])) :-\n-    format(atom(Message), 'العمود ~w: متوقع ~w خلايا سفن، موجود ~w', [Col, Expected, Actual]).\n-\n-error_to_json(error(ship_count, Length, Expected, Actual), \n-              json([\n-                  type=ship_count,\n-                  length=Length,\n-                  expected=Expected,\n-                  actual=Actual,\n-                  message=Message,\n-                  severity=critical\n-              ])) :-\n-    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n-\n-error_to_json(error(ship_isolation, R1, C1, R2, C2), \n-              json([\n-                  type=ship_isolation,\n-                  row1=R1,\n-                  col1=C1,\n-                  row2=R2,\n-                  col2=C2,\n-                  message=Message,\n-                  severity=medium\n-              ])) :-\n-    format(atom(Message), 'السفن تتلامس قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n-\n-% الحصول على بيانات الشبكة الكاملة\n+% تفاصيل الشبكة لجلبها للواجهة\n get_complete_grid_data(Result) :-\n     grid(Size),\n     get_grid_matrix(GridMatrix),\n     get_requirements_data(RowReqs, ColReqs),\n@@ -208,66 +148,57 @@\n         ships=ShipsData,\n         statistics=Stats\n     ]).\n \n-% إنشاء مصفوفة الشبكة\n get_grid_matrix(GridMatrix) :-\n     grid(Size),\n     build_grid_matrix(1, Size, GridMatrix).\n \n-build_grid_matrix(R, MaxRows, []) :-\n-    R > MaxRows, !.\n+build_grid_matrix(R, MaxRows, []) :- R > MaxRows, !.\n build_grid_matrix(R, MaxRows, [Row|Rest]) :-\n     R =< MaxRows,\n     build_row_matrix(R, 1, Row),\n     R1 is R + 1,\n     build_grid_matrix(R1, MaxRows, Rest).\n \n build_row_matrix(R, C, []) :-\n-    grid(MaxCols),\n-    C > MaxCols, !.\n+    grid(Size),\n+    C > Size, !.\n build_row_matrix(R, C, [json([type=Type, row=R, col=C])|Rest]) :-\n-    grid(MaxCols),\n-    C =< MaxCols,\n+    grid(Size),\n+    C =< Size,\n     cell(R, C, Type, _, _),\n     C1 is C + 1,\n     build_row_matrix(R, C1, Rest).\n \n-% الحصول على بيانات المتطلبات\n get_requirements_data(RowReqs, ColReqs) :-\n     grid(Size),\n     build_requirements_list(row, 1, Size, RowReqs),\n     build_requirements_list(col, 1, Size, ColReqs).\n \n-build_requirements_list(Type, Index, MaxIndex, []) :-\n-    Index > MaxIndex, !.\n+build_requirements_list(Type, Index, MaxIndex, []) :- Index > MaxIndex, !.\n build_requirements_list(Type, Index, MaxIndex, [Req|Rest]) :-\n     Index =< MaxIndex,\n-    (   Type = row\n-    ->  row(Index, Count)\n-    ;   col(Index, Count)\n-    ),\n+    (Type = row -> row(Index, Count) ; col(Index, Count)),\n     Req = json([index=Index, required=Count]),\n     Index1 is Index + 1,\n     build_requirements_list(Type, Index1, MaxIndex, Rest).\n \n-% الحصول على بيانات السفن\n get_ships_data(ShipsData) :-\n     findall(json([length=Length, count=Count]), ship(Length, Count), ShipsData).\n \n-% الحصول على الإحصائيات الحالية\n get_current_statistics(Stats) :-\n     count_total_ship_cells(TotalShips),\n     count_total_sea_cells(TotalSea),\n     grid(Size),\n     TotalCells is Size * Size,\n+    Percentage is ((TotalShips + TotalSea) / TotalCells) * 100,\n     Stats = json([\n         total_cells=TotalCells,\n         ship_cells=TotalShips,\n         sea_cells=TotalSea,\n         completion_percentage=Percentage\n-    ]),\n-    Percentage is (TotalShips + TotalSea) / TotalCells * 100.\n+    ]).\n \n count_total_ship_cells(Count) :-\n     findall(1, cell(_, _, ship, _, _), Ships),\n     length(Ships, Count).\n@@ -275,118 +206,114 @@\n count_total_sea_cells(Count) :-\n     findall(1, cell(_, _, sea, _, _), Seas),\n     length(Seas, Count).\n \n-% الحصول على تفاصيل التحقق\n-get_validation_details(Details) :-\n-    validate_row_counts_details(RowDetails),\n-    validate_col_counts_details(ColDetails),\n-    validate_ship_counts_details(ShipDetails),\n-    Details = json([\n-        rows=RowDetails,\n-        columns=ColDetails,\n-        ships=ShipDetails\n-    ]).\n+% التحقق الكامل من الحل وإرجاع النتيجة JSON\n+validate_solution_complete(Result) :-\n+    get_time(Timestamp),\n+    (   validate_all_rules\n+    ->  get_validation_details(Details),\n+        Result = json([\n+            valid=true,\n+            message='الحل صحيح! جميع القواعد محققة.',\n+            details=Details,\n+            timestamp=Timestamp\n+        ])\n+    ;   collect_detailed_errors(Errors),\n+        Result = json([\n+            valid=false,\n+            message='الحل غير صحيح. يرجى مراجعة الأخطاء.',\n+            errors=Errors,\n+            timestamp=Timestamp\n+        ])\n+    ).\n \n-validate_row_counts_details(Details) :-\n-    findall(json([row=R, expected=Expected, actual=Actual, valid=Valid]), \n-           (row(R, Expected), count_ships_in_row(R, Actual), \n-            (Expected = Actual -> Valid = true; Valid = false)), \n-           Details).\n+collect_detailed_errors(Errors) :-\n+    findall(Error, find_validation_error(Error), ErrorList),\n+    convert_errors_to_json(ErrorList, Errors).\n \n-validate_col_counts_details(Details) :-\n-    findall(json([col=C, expected=Expected, actual=Actual, valid=Valid]), \n-           (col(C, Expected), count_ships_in_col(C, Actual), \n-            (Expected = Actual -> Valid = true; Valid = false)), \n-           Details).\n+convert_errors_to_json([], []).\n+convert_errors_to_json([Error|Rest], [JsonError|JsonRest]) :-\n+    error_to_json(Error, JsonError),\n+    convert_errors_to_json(Rest, JsonRest).\n \n-validate_ship_counts_details(Details) :-\n-    findall(json([length=Length, expected=Expected, actual=Actual, valid=Valid]), \n-           (ship(Length, Expected), count_ships_of_length(Length, Actual), \n-            (Expected = Actual -> Valid = true; Valid = false)), \n-           Details).\n+error_to_json(error(row_count, Row, Expected, Actual), json([\n+    type=row_count,\n+    row=Row,\n+    expected=Expected,\n+    actual=Actual,\n+    message=Message,\n+    severity=high\n+])) :-\n+    format(atom(Message), 'الصف ~w: متوقع ~w خلايا سفن، موجود ~w', [Row, Expected, Actual]).\n \n-% === القواعد الأساسية للتحقق (من الملف الأصلي) ===\n+error_to_json(error(col_count, Col, Expected, Actual), json([\n+    type=col_count,\n+    col=Col,\n+    expected=Expected,\n+    actual=Actual,\n+    message=Message,\n+    severity=high\n+])) :-\n+    format(atom(Message), 'العمود ~w: متوقع ~w خلايا سفن، موجود ~w', [Col, Expected, Actual]).\n \n-% التحقق من جميع القواعد\n+error_to_json(error(ship_count, Length, Expected, Actual), json([\n+    type=ship_count,\n+    length=Length,\n+    expected=Expected,\n+    actual=Actual,\n+    message=Message,\n+    severity=critical\n+])) :-\n+    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n+\n+error_to_json(error(ship_isolation, R1, C1, R2, C2), json([\n+    type=ship_isolation,\n+    row1=R1,\n+    col1=C1,\n+    row2=R2,\n+    col2=C2,\n+    message=Message,\n+    severity=medium\n+])) :-\n+    format(atom(Message), 'السفن تتلامس قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n+\n+% قواعد التحقق الأساسية (من كودك الأصلي):\n+\n validate_all_rules :-\n     validate_row_counts,\n     validate_col_counts,\n     validate_ship_counts,\n     validate_ship_connectivity,\n     validate_ship_isolation.\n \n-% التحقق من عدد خلايا السفن في كل صف\n+% - تحقق صفوف\n validate_row_counts :-\n-    grid(MaxRows),\n-    validate_all_rows(1, MaxRows).\n+    grid(Size),\n+    forall(between(1, Size, R),\n+           (row(R, Expected), count_ships_in_row(R, Actual), Expected =:= Actual)).\n \n-validate_all_rows(R, MaxRows) :-\n-    R > MaxRows, !.\n-validate_all_rows(R, MaxRows) :-\n-    R =< MaxRows,\n-    row(R, ExpectedCount),\n-    count_ships_in_row(R, ActualCount),\n-    ExpectedCount = ActualCount,\n-    R1 is R + 1,\n-    validate_all_rows(R1, MaxRows).\n-\n-% عد السفن في صف محدد\n count_ships_in_row(Row, Count) :-\n-    count_ships_in_row_helper(Row, 1, 0, Count).\n+    grid(Size),\n+    findall(1, (between(1, Size, C), cell(Row, C, ship, _, _)), Cells),\n+    length(Cells, Count).\n \n-count_ships_in_row_helper(Row, Col, Acc, Count) :-\n-    grid(MaxCols),\n-    Col > MaxCols, !,\n-    Count = Acc.\n-count_ships_in_row_helper(Row, Col, Acc, Count) :-\n-    Col =< MaxCols,\n-    (   cell(Row, Col, ship, _, _)\n-    ->  NewAcc is Acc + 1\n-    ;   NewAcc = Acc\n-    ),\n-    Col1 is Col + 1,\n-    count_ships_in_row_helper(Row, Col1, NewAcc, Count).\n-\n-% التحقق من عدد خلايا السفن في كل عمود\n+% - تحقق أعمدة\n validate_col_counts :-\n-    grid(MaxCols),\n-    validate_all_cols(1, MaxCols).\n+    grid(Size),\n+    forall(between(1, Size, C),\n+           (col(C, Expected), count_ships_in_col(C, Actual), Expected =:= Actual)).\n \n-validate_all_cols(C, MaxCols) :-\n-    C > MaxCols, !.\n-validate_all_cols(C, MaxCols) :-\n-    C =< MaxCols,\n-    col(C, ExpectedCount),\n-    count_ships_in_col(C, ActualCount),\n-    ExpectedCount = ActualCount,\n-    C1 is C + 1,\n-    validate_all_cols(C1, MaxCols).\n-\n-% عد السفن في عمود محدد\n count_ships_in_col(Col, Count) :-\n-    grid(MaxRows),\n-    count_ships_in_col_helper(1, Col, MaxRows, 0, Count).\n+    grid(Size),\n+    findall(1, (between(1, Size, R), cell(R, Col, ship, _, _)), Cells),\n+    length(Cells, Count).\n \n-count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n-    Row > MaxRows, !,\n-    Count = Acc.\n-count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n-    Row =< MaxRows,\n-    (   cell(Row, Col, ship, _, _)\n-    ->  NewAcc is Acc + 1\n-    ;   NewAcc = Acc\n-    ),\n-    Row1 is Row + 1,\n-    count_ships_in_col_helper(Row1, Col, MaxRows, NewAcc, Count).\n-\n-% التحقق من عدد السفن بكل طول\n+% - تحقق عدد السفن حسب الطول\n validate_ship_counts :-\n-    forall(ship(Length, ExpectedCount), \n-           (count_ships_of_length(Length, ActualCount), \n-            ActualCount = ExpectedCount)).\n+    forall(ship(Length, ExpectedCount),\n+           (count_ships_of_length(Length, ActualCount), ExpectedCount =:= ActualCount)).\n \n-% عد السفن بطول محدد\n count_ships_of_length(Length, Count) :-\n     findall(Ship, find_ship_of_length(Length, Ship), Ships),\n     length(Ships, Count).\n \n@@ -405,13 +332,11 @@\n     R > 1,\n     R1 is R - 1,\n     cell(R1, C, ship, _, _).\n \n-% الحصول على طول السفينة من خلية\n get_ship_length_from_cell(R, C, Length) :-\n-    (   check_horizontal_ship_length(R, C, Length)\n-    ;   check_vertical_ship_length(R, C, Length)\n-    ).\n+    (check_horizontal_ship_length(R, C, Length);\n+     check_vertical_ship_length(R, C, Length)).\n \n check_horizontal_ship_length(R, C, Length) :-\n     count_horizontal_ship_cells(R, C, Length).\n \n@@ -437,9 +362,9 @@\n     R1 is R + 1,\n     count_vertical_ship_cells_helper(R1, C, NewAcc, Length).\n count_vertical_ship_cells_helper(_, _, Length, Length).\n \n-% التحقق من اتصال السفن\n+% تحقق اتصال السفن\n validate_ship_connectivity :-\n     forall(find_ship_start(R, C), validate_ship_shape(R, C)).\n \n find_ship_start(R, C) :-\n@@ -448,22 +373,18 @@\n     \\+ has_ship_neighbor_up(R, C).\n \n validate_ship_shape(R, C) :-\n     get_ship_length_from_cell(R, C, Length),\n-    (   Length = 1\n-    ->  true\n-    ;   validate_ship_linearity(R, C, Length)\n-    ).\n+    (Length = 1 -> true ; validate_ship_linearity(R, C, Length)).\n \n validate_ship_linearity(R, C, Length) :-\n-    (   check_horizontal_ship_continuity(R, C, Length)\n-    ;   check_vertical_ship_continuity(R, C, Length)\n-    ).\n+    (check_horizontal_ship_continuity(R, C, Length);\n+     check_vertical_ship_continuity(R, C, Length)).\n \n check_horizontal_ship_continuity(R, C, Length) :-\n     check_horizontal_continuity_helper(R, C, Length).\n \n-check_horizontal_continuity_helper(R, C, 0) :- !.\n+check_horizontal_continuity_helper(_, _, 0) :- !.\n check_horizontal_continuity_helper(R, C, Length) :-\n     Length > 0,\n     cell(R, C, ship, _, _),\n     Length1 is Length - 1,\n@@ -472,17 +393,17 @@\n \n check_vertical_ship_continuity(R, C, Length) :-\n     check_vertical_continuity_helper(R, C, Length).\n \n-check_vertical_continuity_helper(R, C, 0) :- !.\n+check_vertical_continuity_helper(_, _, 0) :- !.\n check_vertical_continuity_helper(R, C, Length) :-\n     Length > 0,\n     cell(R, C, ship, _, _),\n     Length1 is Length - 1,\n     R1 is R + 1,\n     check_vertical_continuity_helper(R1, C, Length1).\n \n-% التحقق من عزل السفن\n+% تحقق عزل السفن (لا تتلامس قطرياً)\n validate_ship_isolation :-\n     \\+ ships_touching_diagonally.\n \n ships_touching_diagonally :-\n@@ -500,17 +421,16 @@\n     cell(NR, NC, ship, _, _),\n     connected_ship_cells(NR, NC, R2, C2).\n \n adjacent_orthogonal(R1, C1, R2, C2) :-\n-    (   (R1 = R2, abs(C1 - C2) =:= 1)\n-    ;   (C1 = C2, abs(R1 - R2) =:= 1)\n-    ).\n+    (R1 = R2, abs(C1 - C2) =:= 1);\n+    (C1 = C2, abs(R1 - R2) =:= 1).\n \n adjacent_diagonal(R1, C1, R2, C2) :-\n     abs(R1 - R2) =:= 1,\n     abs(C1 - C2) =:= 1.\n \n-% البحث عن الأخطاء\n+% جمع أخطاء التحقق\n find_validation_error(error(row_count, R, Expected, Actual)) :-\n     row(R, Expected),\n     count_ships_in_row(R, Actual),\n     Expected \\= Actual.\n@@ -530,31 +450,6 @@\n     cell(R2, C2, ship, _, _),\n     \\+ same_ship(R1, C1, R2, C2),\n     adjacent_diagonal(R1, C1, R2, C2).\n \n-% === أوامر التشغيل ===\n-\n-% تشغيل التحقق المباشر\n-check_solution :-\n-    format('=== Sea Battle Solution Validator ===~n~n'),\n-    (   validate_all_rules\n-    ->  format('✓ الحل صحيح!~n')\n-    ;   format('✗ الحل غير صحيح!~n'),\n-        forall(find_validation_error(Error), \n-               (error_to_message(Error, Message), \n-                format('  - ~w~n', [Message])))\n-    ).\n-\n-error_to_message(error(row_count, R, Expected, Actual), Message) :-\n-    format(atom(Message), 'الصف ~w: متوقع ~w، موجود ~w', [R, Expected, Actual]).\n-\n-error_to_message(error(col_count, C, Expected, Actual), Message) :-\n-    format(atom(Message), 'العمود ~w: متوقع ~w، موجود ~w', [C, Expected, Actual]).\n-\n-error_to_message(error(ship_count, Length, Expected, Actual), Message) :-\n-    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n-\n-error_to_message(error(ship_isolation, R1, C1, R2, C2), Message) :-\n-    format(atom(Message), 'سفن متلامسة قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n-\n-% بدء الخادم تلقائياً\n-:- initialization(start).\n\\ No newline at end of file\n+% تشغيل تلقائي عند تحميل الملف\n+:- initialization(start).\n"
                },
                {
                    "date": 1752568550341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,586 @@\n+% Sea Battle HTTP Server - Pure Prolog Solution (محدث)\n+:- consult('facts.pl').\n+:- use_module(library(http/thread_httpd)).\n+:- use_module(library(http/http_dispatch)).\n+:- use_module(library(http/http_json)).\n+:- use_module(library(http/http_cors)).\n+:- use_module(library(http/http_parameters)).\n+:- use_module(library(http/http_files)).\n+\n+% تعريف المسارات\n+:- http_handler(root(.), serve_index, []).\n+:- http_handler(root(api/validate), validate_api, [method(post)]).\n+:- http_handler(root(api/validate), cors_options_handler, [method(options)]).\n+:- http_handler(root(api/grid), grid_api, [method(get)]).\n+:- http_handler(root(api/grid), cors_options_handler, [method(options)]).\n+:- http_handler(root(api/status), status_api, [method(get)]).\n+:- http_handler(root(api/status), cors_options_handler, [method(options)]).\n+:- http_handler(root(static), serve_static, [prefix]).\n+\n+% بدء الخادم مع reuse_address لتفادي مشاكل التكرار\n+start_server(Port) :-\n+    http_server(http_dispatch, [port(Port), reuse_address(true)]),\n+    format('🚢 Sea Battle Server started on http://localhost:~w~n', [Port]).\n+\n+start :- start_server(8080).\n+\n+% معالجة طلبات OPTIONS للـ CORS\n+cors_options_handler(Request) :-\n+    cors_enable_all(Request),\n+    format('Status: 204~n~n').\n+\n+% تمكين CORS لجميع الطلبات\n+cors_enable_all(Request) :-\n+    cors_enable(Request, [\n+        methods([get, post, options]),\n+        headers(['Content-Type', 'Authorization'])\n+    ]).\n+\n+% تقديم الصفحة الرئيسية\n+serve_index(_Request) :-\n+    reply_html_page(\n+        title('Sea Battle Validator'),\n+        [\n+            h1('🚢 Sea Battle Validator'),\n+            div(id='app', [\n+                div(class='grid-container', [\n+                    div(id='grid', []),\n+                    div(class='controls', [\n+                        button([onclick='checkSolution()', id='check-btn'], 'تحقق من الحل'),\n+                        div(id='loading', [style='display:none'], 'جاري التحقق...'),\n+                        div(id='results', [])\n+                    ])\n+                ])\n+            ]),\n+            script(src='./script.js')\n+        ]\n+    ).\n+\n+% تقديم الملفات الثابتة\n+serve_static(Request) :-\n+    member(path_info(Path), Request),\n+    atom_concat('/static', Path, FullPath),\n+    http_reply_file(FullPath, [], Request).\n+\n+% API للتحقق من صحة الحل\n+validate_api(Request) :-\n+    cors_enable_all(Request),\n+    method(Request, post),\n+    http_read_json(Request, JsonIn),\n+    process_validation_request(JsonIn, JsonOut),\n+    reply_json(JsonOut).\n+\n+% المعالجة التفصيلية لطلب التحقق\n+process_validation_request(json(Data), Result) :-\n+    (   get_dict(grid, Data, GridData)\n+    ->  update_grid_from_json(GridData),\n+        validate_solution_complete(Result)\n+    ;   get_time(Timestamp),\n+        Result = json([\n+            valid=false,\n+            error='Invalid request format',\n+            timestamp=Timestamp\n+        ])\n+    ).\n+\n+% تحديث بيانات الشبكة من JSON\n+update_grid_from_json(GridData) :-\n+    retractall(cell(_, _, _, _, _)),\n+    assert_grid_from_json(GridData, 1).\n+\n+assert_grid_from_json([], _).\n+assert_grid_from_json([Row|Rest], R) :-\n+    assert_row_from_json(Row, R, 1),\n+    R1 is R + 1,\n+    assert_grid_from_json(Rest, R1).\n+\n+assert_row_from_json([], _, _).\n+assert_row_from_json([Cell|Rest], R, C) :-\n+    (   Cell == 2\n+    ->  Type = ship\n+    ;   Type = sea\n+    ),\n+    assert(cell(R, C, Type, nil, nil)),\n+    C1 is C + 1,\n+    assert_row_from_json(Rest, R, C1).\n+\n+% API جلب بيانات الشبكة\n+grid_api(Request) :-\n+    cors_enable_all(Request),\n+    get_complete_grid_data(Result),\n+    reply_json(Result).\n+\n+% API حالة السيرفر\n+status_api(Request) :-\n+    cors_enable_all(Request),\n+    get_time(Timestamp),\n+    reply_json(json([\n+        status=online,\n+        timestamp=Timestamp,\n+        version='1.0'\n+    ])).\n+% API للحصول على بيانات الشبكة\n+grid_api(Request) :-\n+    cors_enable_all(Request),\n+    get_complete_grid_data(Result),\n+    reply_json(Result).\n+\n+% API للحصول على حالة الخادم\n+status_api(Request) :-\n+    cors_enable_all(Request),\n+    get_time(Timestamp),\n+    reply_json(json([\n+        status=online,\n+        timestamp=Timestamp,\n+        version='1.0'\n+    ])).\n+\n+% تمكين CORS لجميع الطلبات\n+cors_enable_all(Request) :-\n+    cors_enable(Request, [\n+        methods([get, post, options]),\n+        headers(['Content-Type', 'Authorization'])\n+    ]).\n+\n+% التحقق الكامل من الحل\n+validate_solution_complete(Result) :-\n+    get_time(Timestamp),\n+    (   validate_all_rules\n+    ->  Result = json([\n+            valid=true,\n+            message='الحل صحيح! جميع القواعد محققة.',\n+            details=Details,\n+            timestamp=Timestamp\n+        ])\n+    ;   collect_detailed_errors(Errors),\n+        Result = json([\n+            valid=false,\n+            message='الحل غير صحيح. يرجى مراجعة الأخطاء.',\n+            errors=Errors,\n+            timestamp=Timestamp\n+        ])\n+    ),\n+    get_validation_details(Details).\n+\n+% جمع الأخطاء التفصيلية\n+collect_detailed_errors(Errors) :-\n+    findall(Error, find_validation_error(Error), ErrorList),\n+    convert_errors_to_json(ErrorList, Errors).\n+\n+% تحويل الأخطاء إلى JSON\n+convert_errors_to_json([], []).\n+convert_errors_to_json([Error|Rest], [JsonError|JsonRest]) :-\n+    error_to_json(Error, JsonError),\n+    convert_errors_to_json(Rest, JsonRest).\n+\n+% تحويل خطأ واحد إلى JSON\n+error_to_json(error(row_count, Row, Expected, Actual), \n+              json([\n+                  type=row_count,\n+                  row=Row,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=high\n+              ])) :-\n+    format(atom(Message), 'الصف ~w: متوقع ~w خلايا سفن، موجود ~w', [Row, Expected, Actual]).\n+\n+error_to_json(error(col_count, Col, Expected, Actual), \n+              json([\n+                  type=col_count,\n+                  col=Col,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=high\n+              ])) :-\n+    format(atom(Message), 'العمود ~w: متوقع ~w خلايا سفن، موجود ~w', [Col, Expected, Actual]).\n+\n+error_to_json(error(ship_count, Length, Expected, Actual), \n+              json([\n+                  type=ship_count,\n+                  length=Length,\n+                  expected=Expected,\n+                  actual=Actual,\n+                  message=Message,\n+                  severity=critical\n+              ])) :-\n+    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n+\n+error_to_json(error(ship_isolation, R1, C1, R2, C2), \n+              json([\n+                  type=ship_isolation,\n+                  row1=R1,\n+                  col1=C1,\n+                  row2=R2,\n+                  col2=C2,\n+                  message=Message,\n+                  severity=medium\n+              ])) :-\n+    format(atom(Message), 'السفن تتلامس قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n+\n+% الحصول على بيانات الشبكة الكاملة\n+get_complete_grid_data(Result) :-\n+    grid(Size),\n+    get_grid_matrix(GridMatrix),\n+    get_requirements_data(RowReqs, ColReqs),\n+    get_ships_data(ShipsData),\n+    get_current_statistics(Stats),\n+    Result = json([\n+        size=Size,\n+        grid=GridMatrix,\n+        row_requirements=RowReqs,\n+        col_requirements=ColReqs,\n+        ships=ShipsData,\n+        statistics=Stats\n+    ]).\n+\n+% إنشاء مصفوفة الشبكة\n+get_grid_matrix(GridMatrix) :-\n+    grid(Size),\n+    build_grid_matrix(1, Size, GridMatrix).\n+\n+build_grid_matrix(R, MaxRows, []) :-\n+    R > MaxRows, !.\n+build_grid_matrix(R, MaxRows, [Row|Rest]) :-\n+    R =< MaxRows,\n+    build_row_matrix(R, 1, Row),\n+    R1 is R + 1,\n+    build_grid_matrix(R1, MaxRows, Rest).\n+\n+build_row_matrix(R, C, []) :-\n+    grid(MaxCols),\n+    C > MaxCols, !.\n+build_row_matrix(R, C, [json([type=Type, row=R, col=C])|Rest]) :-\n+    grid(MaxCols),\n+    C =< MaxCols,\n+    cell(R, C, Type, _, _),\n+    C1 is C + 1,\n+    build_row_matrix(R, C1, Rest).\n+\n+% الحصول على بيانات المتطلبات\n+get_requirements_data(RowReqs, ColReqs) :-\n+    grid(Size),\n+    build_requirements_list(row, 1, Size, RowReqs),\n+    build_requirements_list(col, 1, Size, ColReqs).\n+\n+build_requirements_list(Type, Index, MaxIndex, []) :-\n+    Index > MaxIndex, !.\n+build_requirements_list(Type, Index, MaxIndex, [Req|Rest]) :-\n+    Index =< MaxIndex,\n+    (   Type = row\n+    ->  row(Index, Count)\n+    ;   col(Index, Count)\n+    ),\n+    Req = json([index=Index, required=Count]),\n+    Index1 is Index + 1,\n+    build_requirements_list(Type, Index1, MaxIndex, Rest).\n+\n+% الحصول على بيانات السفن\n+get_ships_data(ShipsData) :-\n+    findall(json([length=Length, count=Count]), ship(Length, Count), ShipsData).\n+\n+% الحصول على الإحصائيات الحالية\n+get_current_statistics(Stats) :-\n+    count_total_ship_cells(TotalShips),\n+    count_total_sea_cells(TotalSea),\n+    grid(Size),\n+    TotalCells is Size * Size,\n+    Stats = json([\n+        total_cells=TotalCells,\n+        ship_cells=TotalShips,\n+        sea_cells=TotalSea,\n+        completion_percentage=Percentage\n+    ]),\n+    Percentage is (TotalShips + TotalSea) / TotalCells * 100.\n+\n+count_total_ship_cells(Count) :-\n+    findall(1, cell(_, _, ship, _, _), Ships),\n+    length(Ships, Count).\n+\n+count_total_sea_cells(Count) :-\n+    findall(1, cell(_, _, sea, _, _), Seas),\n+    length(Seas, Count).\n+\n+% الحصول على تفاصيل التحقق\n+get_validation_details(Details) :-\n+    validate_row_counts_details(RowDetails),\n+    validate_col_counts_details(ColDetails),\n+    validate_ship_counts_details(ShipDetails),\n+    Details = json([\n+        rows=RowDetails,\n+        columns=ColDetails,\n+        ships=ShipDetails\n+    ]).\n+\n+validate_row_counts_details(Details) :-\n+    findall(json([row=R, expected=Expected, actual=Actual, valid=Valid]), \n+           (row(R, Expected), count_ships_in_row(R, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+validate_col_counts_details(Details) :-\n+    findall(json([col=C, expected=Expected, actual=Actual, valid=Valid]), \n+           (col(C, Expected), count_ships_in_col(C, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+validate_ship_counts_details(Details) :-\n+    findall(json([length=Length, expected=Expected, actual=Actual, valid=Valid]), \n+           (ship(Length, Expected), count_ships_of_length(Length, Actual), \n+            (Expected = Actual -> Valid = true; Valid = false)), \n+           Details).\n+\n+% === القواعد الأساسية للتحقق (من الملف الأصلي) ===\n+\n+% التحقق من جميع القواعد\n+validate_all_rules :-\n+    validate_row_counts,\n+    validate_col_counts,\n+    validate_ship_counts,\n+    validate_ship_connectivity,\n+    validate_ship_isolation.\n+\n+% التحقق من عدد خلايا السفن في كل صف\n+validate_row_counts :-\n+    grid(MaxRows),\n+    validate_all_rows(1, MaxRows).\n+\n+validate_all_rows(R, MaxRows) :-\n+    R > MaxRows, !.\n+validate_all_rows(R, MaxRows) :-\n+    R =< MaxRows,\n+    row(R, ExpectedCount),\n+    count_ships_in_row(R, ActualCount),\n+    ExpectedCount = ActualCount,\n+    R1 is R + 1,\n+    validate_all_rows(R1, MaxRows).\n+\n+% عد السفن في صف محدد\n+count_ships_in_row(Row, Count) :-\n+    count_ships_in_row_helper(Row, 1, 0, Count).\n+\n+count_ships_in_row_helper(Row, Col, Acc, Count) :-\n+    grid(MaxCols),\n+    Col > MaxCols, !,\n+    Count = Acc.\n+count_ships_in_row_helper(Row, Col, Acc, Count) :-\n+    Col =< MaxCols,\n+    (   cell(Row, Col, ship, _, _)\n+    ->  NewAcc is Acc + 1\n+    ;   NewAcc = Acc\n+    ),\n+    Col1 is Col + 1,\n+    count_ships_in_row_helper(Row, Col1, NewAcc, Count).\n+\n+% التحقق من عدد خلايا السفن في كل عمود\n+validate_col_counts :-\n+    grid(MaxCols),\n+    validate_all_cols(1, MaxCols).\n+\n+validate_all_cols(C, MaxCols) :-\n+    C > MaxCols, !.\n+validate_all_cols(C, MaxCols) :-\n+    C =< MaxCols,\n+    col(C, ExpectedCount),\n+    count_ships_in_col(C, ActualCount),\n+    ExpectedCount = ActualCount,\n+    C1 is C + 1,\n+    validate_all_cols(C1, MaxCols).\n+\n+% عد السفن في عمود محدد\n+count_ships_in_col(Col, Count) :-\n+    grid(MaxRows),\n+    count_ships_in_col_helper(1, Col, MaxRows, 0, Count).\n+\n+count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n+    Row > MaxRows, !,\n+    Count = Acc.\n+count_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n+    Row =< MaxRows,\n+    (   cell(Row, Col, ship, _, _)\n+    ->  NewAcc is Acc + 1\n+    ;   NewAcc = Acc\n+    ),\n+    Row1 is Row + 1,\n+    count_ships_in_col_helper(Row1, Col, MaxRows, NewAcc, Count).\n+\n+% التحقق من عدد السفن بكل طول\n+validate_ship_counts :-\n+    forall(ship(Length, ExpectedCount), \n+           (count_ships_of_length(Length, ActualCount), \n+            ActualCount = ExpectedCount)).\n+\n+% عد السفن بطول محدد\n+count_ships_of_length(Length, Count) :-\n+    findall(Ship, find_ship_of_length(Length, Ship), Ships),\n+    length(Ships, Count).\n+\n+find_ship_of_length(Length, ship(R, C, Length)) :-\n+    cell(R, C, ship, _, _),\n+    \\+ has_ship_neighbor_left(R, C),\n+    \\+ has_ship_neighbor_up(R, C),\n+    get_ship_length_from_cell(R, C, Length).\n+\n+has_ship_neighbor_left(R, C) :-\n+    C > 1,\n+    C1 is C - 1,\n+    cell(R, C1, ship, _, _).\n+\n+has_ship_neighbor_up(R, C) :-\n+    R > 1,\n+    R1 is R - 1,\n+    cell(R1, C, ship, _, _).\n+\n+% الحصول على طول السفينة من خلية\n+get_ship_length_from_cell(R, C, Length) :-\n+    (   check_horizontal_ship_length(R, C, Length)\n+    ;   check_vertical_ship_length(R, C, Length)\n+    ).\n+\n+check_horizontal_ship_length(R, C, Length) :-\n+    count_horizontal_ship_cells(R, C, Length).\n+\n+count_horizontal_ship_cells(R, C, Length) :-\n+    count_horizontal_ship_cells_helper(R, C, 0, Length).\n+\n+count_horizontal_ship_cells_helper(R, C, Acc, Length) :-\n+    cell(R, C, ship, _, _), !,\n+    NewAcc is Acc + 1,\n+    C1 is C + 1,\n+    count_horizontal_ship_cells_helper(R, C1, NewAcc, Length).\n+count_horizontal_ship_cells_helper(_, _, Length, Length).\n+\n+check_vertical_ship_length(R, C, Length) :-\n+    count_vertical_ship_cells(R, C, Length).\n+\n+count_vertical_ship_cells(R, C, Length) :-\n+    count_vertical_ship_cells_helper(R, C, 0, Length).\n+\n+count_vertical_ship_cells_helper(R, C, Acc, Length) :-\n+    cell(R, C, ship, _, _), !,\n+    NewAcc is Acc + 1,\n+    R1 is R + 1,\n+    count_vertical_ship_cells_helper(R1, C, NewAcc, Length).\n+count_vertical_ship_cells_helper(_, _, Length, Length).\n+\n+% التحقق من اتصال السفن\n+validate_ship_connectivity :-\n+    forall(find_ship_start(R, C), validate_ship_shape(R, C)).\n+\n+find_ship_start(R, C) :-\n+    cell(R, C, ship, _, _),\n+    \\+ has_ship_neighbor_left(R, C),\n+    \\+ has_ship_neighbor_up(R, C).\n+\n+validate_ship_shape(R, C) :-\n+    get_ship_length_from_cell(R, C, Length),\n+    (   Length = 1\n+    ->  true\n+    ;   validate_ship_linearity(R, C, Length)\n+    ).\n+\n+validate_ship_linearity(R, C, Length) :-\n+    (   check_horizontal_ship_continuity(R, C, Length)\n+    ;   check_vertical_ship_continuity(R, C, Length)\n+    ).\n+\n+check_horizontal_ship_continuity(R, C, Length) :-\n+    check_horizontal_continuity_helper(R, C, Length).\n+\n+check_horizontal_continuity_helper(R, C, 0) :- !.\n+check_horizontal_continuity_helper(R, C, Length) :-\n+    Length > 0,\n+    cell(R, C, ship, _, _),\n+    Length1 is Length - 1,\n+    C1 is C + 1,\n+    check_horizontal_continuity_helper(R, C1, Length1).\n+\n+check_vertical_ship_continuity(R, C, Length) :-\n+    check_vertical_continuity_helper(R, C, Length).\n+\n+check_vertical_continuity_helper(R, C, 0) :- !.\n+check_vertical_continuity_helper(R, C, Length) :-\n+    Length > 0,\n+    cell(R, C, ship, _, _),\n+    Length1 is Length - 1,\n+    R1 is R + 1,\n+    check_vertical_continuity_helper(R1, C, Length1).\n+\n+% التحقق من عزل السفن\n+validate_ship_isolation :-\n+    \\+ ships_touching_diagonally.\n+\n+ships_touching_diagonally :-\n+    cell(R1, C1, ship, _, _),\n+    cell(R2, C2, ship, _, _),\n+    \\+ same_ship(R1, C1, R2, C2),\n+    adjacent_diagonal(R1, C1, R2, C2).\n+\n+same_ship(R1, C1, R2, C2) :-\n+    connected_ship_cells(R1, C1, R2, C2).\n+\n+connected_ship_cells(R, C, R, C) :- !.\n+connected_ship_cells(R1, C1, R2, C2) :-\n+    adjacent_orthogonal(R1, C1, NR, NC),\n+    cell(NR, NC, ship, _, _),\n+    connected_ship_cells(NR, NC, R2, C2).\n+\n+adjacent_orthogonal(R1, C1, R2, C2) :-\n+    (   (R1 = R2, abs(C1 - C2) =:= 1)\n+    ;   (C1 = C2, abs(R1 - R2) =:= 1)\n+    ).\n+\n+adjacent_diagonal(R1, C1, R2, C2) :-\n+    abs(R1 - R2) =:= 1,\n+    abs(C1 - C2) =:= 1.\n+\n+% البحث عن الأخطاء\n+find_validation_error(error(row_count, R, Expected, Actual)) :-\n+    row(R, Expected),\n+    count_ships_in_row(R, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(col_count, C, Expected, Actual)) :-\n+    col(C, Expected),\n+    count_ships_in_col(C, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(ship_count, Length, Expected, Actual)) :-\n+    ship(Length, Expected),\n+    count_ships_of_length(Length, Actual),\n+    Expected \\= Actual.\n+\n+find_validation_error(error(ship_isolation, R1, C1, R2, C2)) :-\n+    cell(R1, C1, ship, _, _),\n+    cell(R2, C2, ship, _, _),\n+    \\+ same_ship(R1, C1, R2, C2),\n+    adjacent_diagonal(R1, C1, R2, C2).\n+\n+% === أوامر التشغيل ===\n+\n+% تشغيل التحقق المباشر\n+check_solution :-\n+    format('=== Sea Battle Solution Validator ===~n~n'),\n+    (   validate_all_rules\n+    ->  format('✓ الحل صحيح!~n')\n+    ;   format('✗ الحل غير صحيح!~n'),\n+        forall(find_validation_error(Error), \n+               (error_to_message(Error, Message), \n+                format('  - ~w~n', [Message])))\n+    ).\n+\n+error_to_message(error(row_count, R, Expected, Actual), Message) :-\n+    format(atom(Message), 'الصف ~w: متوقع ~w، موجود ~w', [R, Expected, Actual]).\n+\n+error_to_message(error(col_count, C, Expected, Actual), Message) :-\n+    format(atom(Message), 'العمود ~w: متوقع ~w، موجود ~w', [C, Expected, Actual]).\n+\n+error_to_message(error(ship_count, Length, Expected, Actual), Message) :-\n+    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n+\n+error_to_message(error(ship_isolation, R1, C1, R2, C2), Message) :-\n+    format(atom(Message), 'سفن متلامسة قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n+\n+% بدء الخادم تلقائياً\n+:- initialization(start).\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752567991434,
            "name": "Commit-0",
            "content": "% Sea Battle HTTP Server - Pure Prolog Solution\n% ربط خادم HTTP مع البرولوغ مباشرة\n\n:- consult('facts.pl').\n:- use_module(library(http/thread_httpd)).\n:- use_module(library(http/http_dispatch)).\n:- use_module(library(http/http_json)).\n:- use_module(library(http/http_cors)).\n:- use_module(library(http/http_parameters)).\n:- use_module(library(http/http_files)).\n\n% تعريف المسارات\n:- http_handler(root(.), serve_index, []).\n:- http_handler(root(api/validate), validate_api, [method(post)]).\n:- http_handler(root(api/grid), grid_api, [method(get)]).\n:- http_handler(root(api/status), status_api, [method(get)]).\n:- http_handler(root(static), serve_static, [prefix]).\n\n% بدء الخادم\nstart_server(Port) :-\n    http_server(http_dispatch, [port(Port)]),\n    format('🚢 Sea Battle Server started on http://localhost:~w~n', [Port]).\n\n% تشغيل الخادم على المنفذ 8080\nstart :- start_server(8080).\n\n% تقديم الصفحة الرئيسية\nserve_index(_Request) :-\n    reply_html_page(\n        title('Sea Battle Validator'),\n        [\n            h1('🚢 Sea Battle Validator'),\n            div(id='app', [\n                div(class='grid-container', [\n                    div(id='grid', []),\n                    div(class='controls', [\n                        button([onclick='checkSolution()', id='check-btn'], 'تحقق من الحل'),\n                        div(id='loading', [style='display:none'], 'جاري التحقق...'),\n                        div(id='results', [])\n                    ])\n                ])\n            ]),\n            script(src='/static/app.js')\n        ]\n    ).\n\n% تقديم الملفات الثابتة\nserve_static(Request) :-\n    member(path_info(Path), Request),\n    atom_concat('/static', Path, FullPath),\n    http_reply_file(FullPath, [], Request).\n\n% تفعيل CORS لجميع الطلبات الواردة\ncors_enable_all(Request) :-\n    cors_enable(Request, [\n        methods([get, post, options]),\n        headers(['Content-Type', 'Authorization'])\n    ]).\n\n% API للتحقق من صحة الحل\nvalidate_api(Request) :-\n    cors_enable_all(Request),\n    http_read_json(Request, JsonIn),\n    process_validation_request(JsonIn, JsonOut),\n    reply_json(JsonOut).\n\n% معالجة طلب التحقق\nprocess_validation_request(json(Data), Result) :-\n    (   get_dict(grid, Data, GridData)\n    ->  retractall(cell(_, _, _, _, _)),\n        assert_grid_from_json(GridData, 1),\n        validate_solution_complete(Result)\n    ;   get_time(Timestamp),\n        Result = json([\n            valid=false,\n            error='Invalid request format',\n            timestamp=Timestamp\n        ])\n    ).\n\nassert_grid_from_json([], _).\nassert_grid_from_json([Row|Rest], R) :-\n    assert_row_from_json(Row, R, 1),\n    R1 is R + 1,\n    assert_grid_from_json(Rest, R1).\n\nassert_row_from_json([], _, _).\nassert_row_from_json([Cell|Rest], R, C) :-\n    (   Cell == 2\n    ->  Type = ship\n    ;   Type = sea\n    ),\n    assert(cell(R, C, Type, nil, nil)),\n    C1 is C + 1,\n    assert_row_from_json(Rest, R, C1).\n\n% API للحصول على بيانات الشبكة\ngrid_api(Request) :-\n    cors_enable_all(Request),\n    get_complete_grid_data(Result),\n    reply_json(Result).\n\n% API للحصول على حالة الخادم\nstatus_api(Request) :-\n    cors_enable_all(Request),\n    get_time(Timestamp),\n    reply_json(json([\n        status=online,\n        timestamp=Timestamp,\n        version='1.0'\n    ])).\n% معالجة طلب التحقق\nprocess_validation_request(json(Data), Result) :-\n    (   get_dict(grid, Data, GridData)\n    ->  update_grid_from_json(GridData),\n        validate_solution_complete(Result)\n    ;   Result = json([\n            valid=false,\n            error='Invalid request format',\n            timestamp=Timestamp\n        ])\n    ),\n    get_time(Timestamp).\n\n% تحديث الشبكة من البيانات المرسلة\nupdate_grid_from_json(GridData) :-\n    % تحديث بيانات الخلايا بناءً على البيانات المرسلة\n    retractall(cell(_, _, _, _, _)),\n    assert_grid_from_json(GridData, 1).\n\nassert_grid_from_json([], _).\nassert_grid_from_json([Row|Rest], R) :-\n    assert_row_from_json(Row, R, 1),\n    R1 is R + 1,\n    assert_grid_from_json(Rest, R1).\n\nassert_row_from_json([], _, _).\nassert_row_from_json([Cell|Rest], R, C) :-\n    (   Cell == 2\n    ->  Type = ship\n    ;   Type = sea\n    ),\n    assert(cell(R, C, Type, nil, nil)),\n    C1 is C + 1,\n    assert_row_from_json(Rest, R, C1).\n\n% API للحصول على بيانات الشبكة\ngrid_api(Request) :-\n    cors_enable_all(Request),\n    get_complete_grid_data(Result),\n    reply_json(Result).\n\n% API للحصول على حالة الخادم\nstatus_api(Request) :-\n    cors_enable_all(Request),\n    get_time(Timestamp),\n    reply_json(json([\n        status=online,\n        timestamp=Timestamp,\n        version='1.0'\n    ])).\n\n% تمكين CORS لجميع الطلبات\ncors_enable_all(Request) :-\n    cors_enable(Request, [\n        methods([get, post, options]),\n        headers(['Content-Type', 'Authorization'])\n    ]).\n\n% التحقق الكامل من الحل\nvalidate_solution_complete(Result) :-\n    get_time(Timestamp),\n    (   validate_all_rules\n    ->  Result = json([\n            valid=true,\n            message='الحل صحيح! جميع القواعد محققة.',\n            details=Details,\n            timestamp=Timestamp\n        ])\n    ;   collect_detailed_errors(Errors),\n        Result = json([\n            valid=false,\n            message='الحل غير صحيح. يرجى مراجعة الأخطاء.',\n            errors=Errors,\n            timestamp=Timestamp\n        ])\n    ),\n    get_validation_details(Details).\n\n% جمع الأخطاء التفصيلية\ncollect_detailed_errors(Errors) :-\n    findall(Error, find_validation_error(Error), ErrorList),\n    convert_errors_to_json(ErrorList, Errors).\n\n% تحويل الأخطاء إلى JSON\nconvert_errors_to_json([], []).\nconvert_errors_to_json([Error|Rest], [JsonError|JsonRest]) :-\n    error_to_json(Error, JsonError),\n    convert_errors_to_json(Rest, JsonRest).\n\n% تحويل خطأ واحد إلى JSON\nerror_to_json(error(row_count, Row, Expected, Actual), \n              json([\n                  type=row_count,\n                  row=Row,\n                  expected=Expected,\n                  actual=Actual,\n                  message=Message,\n                  severity=high\n              ])) :-\n    format(atom(Message), 'الصف ~w: متوقع ~w خلايا سفن، موجود ~w', [Row, Expected, Actual]).\n\nerror_to_json(error(col_count, Col, Expected, Actual), \n              json([\n                  type=col_count,\n                  col=Col,\n                  expected=Expected,\n                  actual=Actual,\n                  message=Message,\n                  severity=high\n              ])) :-\n    format(atom(Message), 'العمود ~w: متوقع ~w خلايا سفن، موجود ~w', [Col, Expected, Actual]).\n\nerror_to_json(error(ship_count, Length, Expected, Actual), \n              json([\n                  type=ship_count,\n                  length=Length,\n                  expected=Expected,\n                  actual=Actual,\n                  message=Message,\n                  severity=critical\n              ])) :-\n    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n\nerror_to_json(error(ship_isolation, R1, C1, R2, C2), \n              json([\n                  type=ship_isolation,\n                  row1=R1,\n                  col1=C1,\n                  row2=R2,\n                  col2=C2,\n                  message=Message,\n                  severity=medium\n              ])) :-\n    format(atom(Message), 'السفن تتلامس قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n\n% الحصول على بيانات الشبكة الكاملة\nget_complete_grid_data(Result) :-\n    grid(Size),\n    get_grid_matrix(GridMatrix),\n    get_requirements_data(RowReqs, ColReqs),\n    get_ships_data(ShipsData),\n    get_current_statistics(Stats),\n    Result = json([\n        size=Size,\n        grid=GridMatrix,\n        row_requirements=RowReqs,\n        col_requirements=ColReqs,\n        ships=ShipsData,\n        statistics=Stats\n    ]).\n\n% إنشاء مصفوفة الشبكة\nget_grid_matrix(GridMatrix) :-\n    grid(Size),\n    build_grid_matrix(1, Size, GridMatrix).\n\nbuild_grid_matrix(R, MaxRows, []) :-\n    R > MaxRows, !.\nbuild_grid_matrix(R, MaxRows, [Row|Rest]) :-\n    R =< MaxRows,\n    build_row_matrix(R, 1, Row),\n    R1 is R + 1,\n    build_grid_matrix(R1, MaxRows, Rest).\n\nbuild_row_matrix(R, C, []) :-\n    grid(MaxCols),\n    C > MaxCols, !.\nbuild_row_matrix(R, C, [json([type=Type, row=R, col=C])|Rest]) :-\n    grid(MaxCols),\n    C =< MaxCols,\n    cell(R, C, Type, _, _),\n    C1 is C + 1,\n    build_row_matrix(R, C1, Rest).\n\n% الحصول على بيانات المتطلبات\nget_requirements_data(RowReqs, ColReqs) :-\n    grid(Size),\n    build_requirements_list(row, 1, Size, RowReqs),\n    build_requirements_list(col, 1, Size, ColReqs).\n\nbuild_requirements_list(Type, Index, MaxIndex, []) :-\n    Index > MaxIndex, !.\nbuild_requirements_list(Type, Index, MaxIndex, [Req|Rest]) :-\n    Index =< MaxIndex,\n    (   Type = row\n    ->  row(Index, Count)\n    ;   col(Index, Count)\n    ),\n    Req = json([index=Index, required=Count]),\n    Index1 is Index + 1,\n    build_requirements_list(Type, Index1, MaxIndex, Rest).\n\n% الحصول على بيانات السفن\nget_ships_data(ShipsData) :-\n    findall(json([length=Length, count=Count]), ship(Length, Count), ShipsData).\n\n% الحصول على الإحصائيات الحالية\nget_current_statistics(Stats) :-\n    count_total_ship_cells(TotalShips),\n    count_total_sea_cells(TotalSea),\n    grid(Size),\n    TotalCells is Size * Size,\n    Stats = json([\n        total_cells=TotalCells,\n        ship_cells=TotalShips,\n        sea_cells=TotalSea,\n        completion_percentage=Percentage\n    ]),\n    Percentage is (TotalShips + TotalSea) / TotalCells * 100.\n\ncount_total_ship_cells(Count) :-\n    findall(1, cell(_, _, ship, _, _), Ships),\n    length(Ships, Count).\n\ncount_total_sea_cells(Count) :-\n    findall(1, cell(_, _, sea, _, _), Seas),\n    length(Seas, Count).\n\n% الحصول على تفاصيل التحقق\nget_validation_details(Details) :-\n    validate_row_counts_details(RowDetails),\n    validate_col_counts_details(ColDetails),\n    validate_ship_counts_details(ShipDetails),\n    Details = json([\n        rows=RowDetails,\n        columns=ColDetails,\n        ships=ShipDetails\n    ]).\n\nvalidate_row_counts_details(Details) :-\n    findall(json([row=R, expected=Expected, actual=Actual, valid=Valid]), \n           (row(R, Expected), count_ships_in_row(R, Actual), \n            (Expected = Actual -> Valid = true; Valid = false)), \n           Details).\n\nvalidate_col_counts_details(Details) :-\n    findall(json([col=C, expected=Expected, actual=Actual, valid=Valid]), \n           (col(C, Expected), count_ships_in_col(C, Actual), \n            (Expected = Actual -> Valid = true; Valid = false)), \n           Details).\n\nvalidate_ship_counts_details(Details) :-\n    findall(json([length=Length, expected=Expected, actual=Actual, valid=Valid]), \n           (ship(Length, Expected), count_ships_of_length(Length, Actual), \n            (Expected = Actual -> Valid = true; Valid = false)), \n           Details).\n\n% === القواعد الأساسية للتحقق (من الملف الأصلي) ===\n\n% التحقق من جميع القواعد\nvalidate_all_rules :-\n    validate_row_counts,\n    validate_col_counts,\n    validate_ship_counts,\n    validate_ship_connectivity,\n    validate_ship_isolation.\n\n% التحقق من عدد خلايا السفن في كل صف\nvalidate_row_counts :-\n    grid(MaxRows),\n    validate_all_rows(1, MaxRows).\n\nvalidate_all_rows(R, MaxRows) :-\n    R > MaxRows, !.\nvalidate_all_rows(R, MaxRows) :-\n    R =< MaxRows,\n    row(R, ExpectedCount),\n    count_ships_in_row(R, ActualCount),\n    ExpectedCount = ActualCount,\n    R1 is R + 1,\n    validate_all_rows(R1, MaxRows).\n\n% عد السفن في صف محدد\ncount_ships_in_row(Row, Count) :-\n    count_ships_in_row_helper(Row, 1, 0, Count).\n\ncount_ships_in_row_helper(Row, Col, Acc, Count) :-\n    grid(MaxCols),\n    Col > MaxCols, !,\n    Count = Acc.\ncount_ships_in_row_helper(Row, Col, Acc, Count) :-\n    Col =< MaxCols,\n    (   cell(Row, Col, ship, _, _)\n    ->  NewAcc is Acc + 1\n    ;   NewAcc = Acc\n    ),\n    Col1 is Col + 1,\n    count_ships_in_row_helper(Row, Col1, NewAcc, Count).\n\n% التحقق من عدد خلايا السفن في كل عمود\nvalidate_col_counts :-\n    grid(MaxCols),\n    validate_all_cols(1, MaxCols).\n\nvalidate_all_cols(C, MaxCols) :-\n    C > MaxCols, !.\nvalidate_all_cols(C, MaxCols) :-\n    C =< MaxCols,\n    col(C, ExpectedCount),\n    count_ships_in_col(C, ActualCount),\n    ExpectedCount = ActualCount,\n    C1 is C + 1,\n    validate_all_cols(C1, MaxCols).\n\n% عد السفن في عمود محدد\ncount_ships_in_col(Col, Count) :-\n    grid(MaxRows),\n    count_ships_in_col_helper(1, Col, MaxRows, 0, Count).\n\ncount_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n    Row > MaxRows, !,\n    Count = Acc.\ncount_ships_in_col_helper(Row, Col, MaxRows, Acc, Count) :-\n    Row =< MaxRows,\n    (   cell(Row, Col, ship, _, _)\n    ->  NewAcc is Acc + 1\n    ;   NewAcc = Acc\n    ),\n    Row1 is Row + 1,\n    count_ships_in_col_helper(Row1, Col, MaxRows, NewAcc, Count).\n\n% التحقق من عدد السفن بكل طول\nvalidate_ship_counts :-\n    forall(ship(Length, ExpectedCount), \n           (count_ships_of_length(Length, ActualCount), \n            ActualCount = ExpectedCount)).\n\n% عد السفن بطول محدد\ncount_ships_of_length(Length, Count) :-\n    findall(Ship, find_ship_of_length(Length, Ship), Ships),\n    length(Ships, Count).\n\nfind_ship_of_length(Length, ship(R, C, Length)) :-\n    cell(R, C, ship, _, _),\n    \\+ has_ship_neighbor_left(R, C),\n    \\+ has_ship_neighbor_up(R, C),\n    get_ship_length_from_cell(R, C, Length).\n\nhas_ship_neighbor_left(R, C) :-\n    C > 1,\n    C1 is C - 1,\n    cell(R, C1, ship, _, _).\n\nhas_ship_neighbor_up(R, C) :-\n    R > 1,\n    R1 is R - 1,\n    cell(R1, C, ship, _, _).\n\n% الحصول على طول السفينة من خلية\nget_ship_length_from_cell(R, C, Length) :-\n    (   check_horizontal_ship_length(R, C, Length)\n    ;   check_vertical_ship_length(R, C, Length)\n    ).\n\ncheck_horizontal_ship_length(R, C, Length) :-\n    count_horizontal_ship_cells(R, C, Length).\n\ncount_horizontal_ship_cells(R, C, Length) :-\n    count_horizontal_ship_cells_helper(R, C, 0, Length).\n\ncount_horizontal_ship_cells_helper(R, C, Acc, Length) :-\n    cell(R, C, ship, _, _), !,\n    NewAcc is Acc + 1,\n    C1 is C + 1,\n    count_horizontal_ship_cells_helper(R, C1, NewAcc, Length).\ncount_horizontal_ship_cells_helper(_, _, Length, Length).\n\ncheck_vertical_ship_length(R, C, Length) :-\n    count_vertical_ship_cells(R, C, Length).\n\ncount_vertical_ship_cells(R, C, Length) :-\n    count_vertical_ship_cells_helper(R, C, 0, Length).\n\ncount_vertical_ship_cells_helper(R, C, Acc, Length) :-\n    cell(R, C, ship, _, _), !,\n    NewAcc is Acc + 1,\n    R1 is R + 1,\n    count_vertical_ship_cells_helper(R1, C, NewAcc, Length).\ncount_vertical_ship_cells_helper(_, _, Length, Length).\n\n% التحقق من اتصال السفن\nvalidate_ship_connectivity :-\n    forall(find_ship_start(R, C), validate_ship_shape(R, C)).\n\nfind_ship_start(R, C) :-\n    cell(R, C, ship, _, _),\n    \\+ has_ship_neighbor_left(R, C),\n    \\+ has_ship_neighbor_up(R, C).\n\nvalidate_ship_shape(R, C) :-\n    get_ship_length_from_cell(R, C, Length),\n    (   Length = 1\n    ->  true\n    ;   validate_ship_linearity(R, C, Length)\n    ).\n\nvalidate_ship_linearity(R, C, Length) :-\n    (   check_horizontal_ship_continuity(R, C, Length)\n    ;   check_vertical_ship_continuity(R, C, Length)\n    ).\n\ncheck_horizontal_ship_continuity(R, C, Length) :-\n    check_horizontal_continuity_helper(R, C, Length).\n\ncheck_horizontal_continuity_helper(R, C, 0) :- !.\ncheck_horizontal_continuity_helper(R, C, Length) :-\n    Length > 0,\n    cell(R, C, ship, _, _),\n    Length1 is Length - 1,\n    C1 is C + 1,\n    check_horizontal_continuity_helper(R, C1, Length1).\n\ncheck_vertical_ship_continuity(R, C, Length) :-\n    check_vertical_continuity_helper(R, C, Length).\n\ncheck_vertical_continuity_helper(R, C, 0) :- !.\ncheck_vertical_continuity_helper(R, C, Length) :-\n    Length > 0,\n    cell(R, C, ship, _, _),\n    Length1 is Length - 1,\n    R1 is R + 1,\n    check_vertical_continuity_helper(R1, C, Length1).\n\n% التحقق من عزل السفن\nvalidate_ship_isolation :-\n    \\+ ships_touching_diagonally.\n\nships_touching_diagonally :-\n    cell(R1, C1, ship, _, _),\n    cell(R2, C2, ship, _, _),\n    \\+ same_ship(R1, C1, R2, C2),\n    adjacent_diagonal(R1, C1, R2, C2).\n\nsame_ship(R1, C1, R2, C2) :-\n    connected_ship_cells(R1, C1, R2, C2).\n\nconnected_ship_cells(R, C, R, C) :- !.\nconnected_ship_cells(R1, C1, R2, C2) :-\n    adjacent_orthogonal(R1, C1, NR, NC),\n    cell(NR, NC, ship, _, _),\n    connected_ship_cells(NR, NC, R2, C2).\n\nadjacent_orthogonal(R1, C1, R2, C2) :-\n    (   (R1 = R2, abs(C1 - C2) =:= 1)\n    ;   (C1 = C2, abs(R1 - R2) =:= 1)\n    ).\n\nadjacent_diagonal(R1, C1, R2, C2) :-\n    abs(R1 - R2) =:= 1,\n    abs(C1 - C2) =:= 1.\n\n% البحث عن الأخطاء\nfind_validation_error(error(row_count, R, Expected, Actual)) :-\n    row(R, Expected),\n    count_ships_in_row(R, Actual),\n    Expected \\= Actual.\n\nfind_validation_error(error(col_count, C, Expected, Actual)) :-\n    col(C, Expected),\n    count_ships_in_col(C, Actual),\n    Expected \\= Actual.\n\nfind_validation_error(error(ship_count, Length, Expected, Actual)) :-\n    ship(Length, Expected),\n    count_ships_of_length(Length, Actual),\n    Expected \\= Actual.\n\nfind_validation_error(error(ship_isolation, R1, C1, R2, C2)) :-\n    cell(R1, C1, ship, _, _),\n    cell(R2, C2, ship, _, _),\n    \\+ same_ship(R1, C1, R2, C2),\n    adjacent_diagonal(R1, C1, R2, C2).\n\n% === أوامر التشغيل ===\n\n% تشغيل التحقق المباشر\ncheck_solution :-\n    format('=== Sea Battle Solution Validator ===~n~n'),\n    (   validate_all_rules\n    ->  format('✓ الحل صحيح!~n')\n    ;   format('✗ الحل غير صحيح!~n'),\n        forall(find_validation_error(Error), \n               (error_to_message(Error, Message), \n                format('  - ~w~n', [Message])))\n    ).\n\nerror_to_message(error(row_count, R, Expected, Actual), Message) :-\n    format(atom(Message), 'الصف ~w: متوقع ~w، موجود ~w', [R, Expected, Actual]).\n\nerror_to_message(error(col_count, C, Expected, Actual), Message) :-\n    format(atom(Message), 'العمود ~w: متوقع ~w، موجود ~w', [C, Expected, Actual]).\n\nerror_to_message(error(ship_count, Length, Expected, Actual), Message) :-\n    format(atom(Message), 'السفن بطول ~w: متوقع ~w، موجود ~w', [Length, Expected, Actual]).\n\nerror_to_message(error(ship_isolation, R1, C1, R2, C2), Message) :-\n    format(atom(Message), 'سفن متلامسة قطرياً في (~w,~w) و (~w,~w)', [R1, C1, R2, C2]).\n\n% بدء الخادم تلقائياً\n:- initialization(start)."
        }
    ]
}